/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_components_Realisations_RealisationsAd_vue"],{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/add-realisation-1.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/add-realisation-1.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: [\"height\", \"width\"]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/add-realisation-1.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/description-1.vue?vue&type=script&lang=js&":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/description-1.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: [\"height\", \"width\"],\n  name: \"description-1\"\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/description-1.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/infos-base-1.vue?vue&type=script&lang=js&":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/infos-base-1.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: [\"height\", \"width\"],\n  data: function data() {\n    return {};\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/infos-base-1.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/medias-1.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/medias-1.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: [\"height\", \"width\"],\n  data: function data() {\n    return {};\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/medias-1.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! vuex */ \"./node_modules/vuex/dist/vuex.esm.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n/* harmony import */ var vue2_editor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue2-editor */ \"./node_modules/vue2-editor/dist/vue2-editor.esm.js\");\n/* harmony import */ var quill_image_drop_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! quill-image-drop-module */ \"./node_modules/quill-image-drop-module/index.js\");\n/* harmony import */ var quill_image_resize_vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! quill-image-resize-vue */ \"./node_modules/quill-image-resize-vue/image-resize-vue.min.js\");\n/* harmony import */ var quill_image_resize_vue__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(quill_image_resize_vue__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _Icons_infos_base_1_vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Icons/infos-base-1.vue */ \"./resources/js/components/Icons/infos-base-1.vue\");\n/* harmony import */ var _Icons_description_1_vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Icons/description-1.vue */ \"./resources/js/components/Icons/description-1.vue\");\n/* harmony import */ var _Icons_medias_1_vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Icons/medias-1.vue */ \"./resources/js/components/Icons/medias-1.vue\");\n/* harmony import */ var _Icons_add_realisation_1_vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Icons/add-realisation-1.vue */ \"./resources/js/components/Icons/add-realisation-1.vue\");\n/* harmony import */ var _mixin_uplodFile__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../mixin/uplodFile */ \"./resources/js/mixin/uplodFile.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n //import { ImageDrop } from \"quill-image-drop-module\";\n\nvar sha1 = __webpack_require__(/*! js-sha1 */ \"./node_modules/js-sha1/src/sha1.js\"); //import ImageResize from \"quill-image-resize-vue\";\n\n\n\n\n\n\n\n\nvue2_editor__WEBPACK_IMPORTED_MODULE_2__.Quill.register(\"modules/imageDrop\", quill_image_drop_module__WEBPACK_IMPORTED_MODULE_3__.ImageDrop);\nvue2_editor__WEBPACK_IMPORTED_MODULE_2__.Quill.register(\"modules/imageResize\", (quill_image_resize_vue__WEBPACK_IMPORTED_MODULE_4___default()));\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  components: {\n    infosBase1: _Icons_infos_base_1_vue__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    medias1: _Icons_medias_1_vue__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n    description1: _Icons_description_1_vue__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    addRealisation1: _Icons_add_realisation_1_vue__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n  },\n  name: \"App\",\n  mixins: [_mixin_uplodFile__WEBPACK_IMPORTED_MODULE_9__[\"default\"]],\n  data: function data() {\n    return {\n      radio: \"\",\n      value: null,\n      viewInfoTilte: false,\n      images: [],\n      index: null,\n      selecteds: [],\n      data: null,\n      editor: null,\n      labelCol: {\n        span: 4\n      },\n      wrapperCol: {\n        span: 14\n      },\n      title: \"\",\n      formData1: new FormData(),\n      entities: [],\n      subcategory_id: null,\n      tags: [],\n      success: \"\",\n      corne: (0,vue__WEBPACK_IMPORTED_MODULE_10__.ref)(4),\n      cloudName: \"ddt7qfshl\",\n      uploadHeaders: {},\n      importation: false,\n      isError: false,\n      errorText: null,\n      isLoading: false,\n      records: {\n        poster: [],\n        images: [],\n        docs: [],\n        video: []\n      },\n      toStore: {\n        poster: [],\n        images: [],\n        docs: [],\n        video: []\n      },\n      recordsForUpload: {\n        poster: [],\n        images: [],\n        docs: [],\n        video: []\n      },\n      loading: {\n        poster: false,\n        images: false,\n        docs: false,\n        video: false\n      },\n      name: \"\",\n      selectedEntity: null,\n      selectedFiliere: null,\n      selectable: false,\n      values: [],\n      e1: 1,\n      steps: 2,\n      description: \"\",\n      typeTitle: \"\",\n      messageTitle: \"\",\n      vide: false,\n      disabledFiliere: true,\n      filieres: [],\n      customToolbar: [[{\n        font: []\n      }], [{\n        header: [false, 1, 2, 3, 4, 5, 6]\n      }], [{\n        size: [\"small\", false, \"large\", \"huge\"]\n      }], [\"bold\", \"italic\", \"underline\", \"strike\"], [{\n        align: \"\"\n      }, {\n        align: \"center\"\n      }, {\n        align: \"right\"\n      }, {\n        align: \"justify\"\n      }], [{\n        header: 1\n      }, {\n        header: 2\n      }], [\"blockquote\", \"code-block\"], [{\n        list: \"ordered\"\n      }, {\n        list: \"bullet\"\n      }, {\n        list: \"check\"\n      }], [{\n        script: \"sub\"\n      }, {\n        script: \"super\"\n      }], [{\n        indent: \"-1\"\n      }, {\n        indent: \"+1\"\n      }], [{\n        color: []\n      }, {\n        background: []\n      }], [\"link\", \"image\", \"formula\"], [{\n        direction: \"rtl\"\n      }], [\"clean\"]],\n      editorSettings: {\n        modules: {\n          imageDrop: true,\n          imageResize: {}\n        }\n      }\n    };\n  },\n  watch: {\n    selectedEntity: function selectedEntity(val) {\n      var index = val;\n      var entity = this.entities.find(function (entity) {\n        return entity.id == val;\n      });\n      console.log(\"entity\");\n      console.log(entity);\n      this.filieres = entity.filieres;\n      console.log(this.filieres);\n      this.disabledFiliere = false;\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, (0,vuex__WEBPACK_IMPORTED_MODULE_11__.mapGetters)({\n    user: \"auth/getUser\"\n  })), {}, {\n    filteredDataArray: function filteredDataArray() {\n      var _this = this;\n\n      return this.tags.filter(function (option) {\n        return option.name.toString().toLowerCase().indexOf(_this.name.toLowerCase()) >= 0;\n      });\n    },\n    filterTag: function filterTag(item, queryText, itemText) {\n      return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) >= 0;\n    }\n  }),\n  methods: {\n    valideTitle: function valideTitle() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      console.log(value);\n      this.title = value;\n\n      if (this.title.length == 0) {\n        this.typeTitle = \"is-danger\";\n        this.messageTitle = \"Le titre est requis\";\n      } else {\n        this.typeTitle = \"is-success\";\n        this.messageTitle = \"\";\n      }\n    },\n    remove: function remove(item) {\n      console.log(item);\n      console.log(this.values);\n      var index = this.values.indexOf(item.id);\n      if (index >= 0) this.values.splice(index, 1);\n    },\n    showAddTag: function showAddTag() {\n      var _this2 = this;\n\n      this.$buefy.dialog.prompt({\n        type: \"is-info\",\n        message: \"Tag\",\n        inputAttrs: {\n          placeholder: \"e.g. Web\",\n          maxlength: 20,\n          value: this.name\n        },\n        confirmText: \"Ajouter\",\n        onConfirm: function onConfirm(value) {\n          _this2.createTag(value);\n\n          _this2.getAllTags();\n        }\n      });\n    },\n    createTag: function createTag(value) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios__WEBPACK_IMPORTED_MODULE_0___default().post(\"/api/v1/tags\", {\n                  name: value\n                }).then(function (response) {\n                  console.log(response.data.tag);\n\n                  _this3.$vs.notify({\n                    title: \"Success\",\n                    text: \"Vous venez d'ajouter un tag avec succès\",\n                    color: \"success\"\n                  });\n                })[\"catch\"](function (_ref) {\n                  var data = _ref.response.data;\n                  console.log(data.message);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    init: function init() {\n      /* this.posterRecords = [];\r\n      this.posterRecordsForUpload = [];\r\n      this.posterToStore = [];\r\n      this.imagesRecords = [];\r\n      this.imagesRecordsForUpload = [];\r\n      this.imagesToStore = [];\r\n      this.docsRecords = [];\r\n      this.docsRecordsForUpload = [];\r\n      this.docsToStore = [];\r\n      this.videoRecords = [];\r\n      this.videoRecordsForUpload = [];\r\n      this.videoToStore = [];\r\n      this.formData1 = new FormData();\r\n      this.title = \"\";\r\n      this.description = \"\";\r\n      this.values = [];*/\n    },\n    getAllEntities: function getAllEntities() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios__WEBPACK_IMPORTED_MODULE_0___default().get(\"/api/v1/entities\").then(function (response) {\n                  console.log(\"entites\");\n                  console.log(response.data.data);\n                  var entities = response.data.data;\n                  _this4.entities = _toConsumableArray(entities);\n                })[\"catch\"](function (error) {\n                  console.log(error);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    formDataForRealisation: function formDataForRealisation(type, index, fileToStore) {\n      this.formData1.append(type, JSON.stringify(fileToStore));\n    },\n    submitForm: function submitForm() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this5.valideTitle(_this5.title);\n\n                if (!(_this5.messageTitle.length == 0)) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                if (!( //this.imagesRecordsForUpload.length == 0 &&\n                _this5.recordsForUpload[\"images\"].length == 0 && _this5.recordsForUpload[\"video\"].length == 0 && _this5.recordsForUpload[\"docs\"].length == 0)) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                console.log(\"description\");\n                console.log(_this5.description);\n\n                _this5.formData1.append(\"title\", _this5.title);\n\n                _this5.formData1.append(\"description\", _this5.description);\n\n                _this5.formData1.append(\"tags\", JSON.stringify(_this5.values));\n\n                _this5.formData1.append(\"entity_id\", _this5.selectedEntity);\n\n                _this5.formData1.append(\"filiere_id\", _this5.selectedFiliere); //this.formData1.append(\"tags\",this.values);\n\n                /*_.each(this.values, (value, key) => {\r\n                this.formData1.append(\"tags[]\", value);\r\n                });*/\n\n\n                if (_this5.posterToStore.length != 0) _this5.formDataForRealisation(\"poster\", 0, _this5.posterToStore);\n                if (_this5.videoToStore.length != 0) _this5.formDataForRealisation(\"video\", 0, _this5.videoToStore);\n                if (_this5.docsToStore.length != 0) _this5.formDataForRealisation(\"docs\", 0, _this5.docsToStore);\n                console.log(\"mon sesult\");\n                console.log(_this5.formData1.get);\n                _this5.isLoading = true;\n                _context3.next = 18;\n                return axios__WEBPACK_IMPORTED_MODULE_0___default().post(\"/api/v1/users/\" + _this5.user.id + \"/realisations\", _this5.formData1).then(function (response) {\n                  console.log(response);\n\n                  _this5.$vs.notify({\n                    color: \"success\",\n                    title: \"SUCCES\",\n                    text: \"LA REALISATION/PROJET A ETE AJOUTE AVEC SUCCES\"\n                  });\n\n                  _this5.init();\n                })[\"catch\"](function (_ref2) {\n                  var data = _ref2.response.data;\n                  console.log(data);\n\n                  _this5.$vs.notify({\n                    color: \"danger\",\n                    title: \"Erreur\",\n                    text: data\n                  });\n                })[\"finally\"](function () {\n                  _this5.isLoading = false;\n                });\n\n              case 18:\n                _context3.next = 22;\n                break;\n\n              case 20:\n                _this5.importation = true;\n                setTimeout(function () {\n                  _this5.importation = false;\n                }, 10000);\n\n              case 22:\n                _context3.next = 26;\n                break;\n\n              case 24:\n                _this5.vide = true;\n                setTimeout(function () {\n                  _this5.vide = false;\n                }, 10000);\n\n              case 26:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    successUpload: function successUpload() {\n      this.$vs.notify({\n        color: \"success\",\n        title: \"Upload Success\",\n        text: \"Lorem ipsum dolor sit amet, consectetur\"\n      });\n    },\n    addRealisation: function addRealisation() {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                //api/v1/users/{user}/subcategories/{subcategory}/realisations\n                console.log(\"azertyuiop  \" + _this6.desc + \"\");\n                _context4.next = 3;\n                return axios__WEBPACK_IMPORTED_MODULE_0___default().post(\"/api/v1/users/\" + _this6.user.id + \"/subcategories/\" + _this6.subcategory_id + \"/realisations\", _this6.form).then(function (response) {\n                  var _this6$$vs$notify;\n\n                  console.log(response);\n\n                  _this6.$vs.notify((_this6$$vs$notify = {\n                    color: \"success\"\n                  }, _defineProperty(_this6$$vs$notify, \"color\", \"success\"), _defineProperty(_this6$$vs$notify, \"title\", \"Upload Success\"), _defineProperty(_this6$$vs$notify, \"text\", response.data.message), _this6$$vs$notify));\n\n                  _this6.init();\n                })[\"catch\"](function (_ref3) {\n                  var data = _ref3.response.data;\n                  console.log(data.message);\n\n                  _this6.$vs.notify({\n                    color: \"danger\",\n                    title: \"boff\",\n                    text: response.data.message\n                  });\n                });\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    getAllTags: function getAllTags() {\n      var _this7 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return axios__WEBPACK_IMPORTED_MODULE_0___default().get(\"/api/v1/tags\").then(function (response) {\n                  console.log(response.data.data); // const categories = response.data.data;\n\n                  _this7.tags = response.data.data;\n                })[\"catch\"](function (error) {\n                  console.log(error);\n                });\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    handleImageAdded: function handleImageAdded(file, Editor, cursorLocation, resetUploader) {\n      var _this8 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var CLOUDINARY_UPLOAD_PRESET, formData;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                CLOUDINARY_UPLOAD_PRESET = \"ml_default\";\n                formData = new FormData();\n                formData.append(\"upload_preset\", CLOUDINARY_UPLOAD_PRESET);\n                formData.append(\"folder\", \"ressources/images\");\n                formData.append(\"file\", file);\n                console.log(\"sass\");\n                console.log(cursorLocation);\n                console.log(resetUploader); // console.log(a);\n\n                _context6.next = 10;\n                return axios__WEBPACK_IMPORTED_MODULE_0___default().post(\"https://api.cloudinary.com/v1_1/ddt7qfshl/image/upload\", formData).then(function (response) {\n                  console.log(response);\n\n                  _this8.images.push(response.data);\n\n                  console.log(Editor);\n                  Editor.insertEmbed(cursorLocation, \"image\", response.data.secure_url //response.data.public_id\n                  );\n                  resetUploader();\n                })[\"catch\"](function (_ref4) {\n                  var data = _ref4.response.data;\n                  console.log(data);\n                });\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    handleImageRemoved: function handleImageRemoved(file, Editor, cursorLocation) {\n      var _this9 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var index;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                console.log(\"seyd\");\n                console.log(file);\n                console.log(Editor);\n                console.log(cursorLocation);\n                index = _this9.images.findIndex(function (ele) {\n                  console.log(\"file\");\n                  console.log(file);\n                  return ele.secure_url == file;\n                });\n                _context7.t0 = (axios__WEBPACK_IMPORTED_MODULE_0___default());\n                _context7.next = 8;\n                return _this9.formDataDeletedFile(index);\n\n              case 8:\n                _context7.t1 = _context7.sent;\n                _context7.next = 11;\n                return _context7.t0.post.call(_context7.t0, \"https://api.cloudinary.com/v1_1/ddt7qfshl/image/destroy\", _context7.t1).then(function (res) {\n                  console.log(\"nathe\");\n                  console.log(res.data.result);\n                })[\"catch\"](function (_ref5) {\n                  var data = _ref5.response.data;\n                  console.log(data.message);\n                });\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n    formDataDeletedFile: function formDataDeletedFile(index) {\n      var _this10 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var timestamp, api_key, string1, signature, formData;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                timestamp = new Date().getTime();\n                api_key = \"721474231639524\";\n                string1 = \"public_id=\" + _this10.images[index].public_id + \"&timestamp=\" + timestamp + \"tKW-g80_eRQbtSHSjwQHbfNzwDc\";\n                _context8.next = 5;\n                return sha1(string1);\n\n              case 5:\n                signature = _context8.sent;\n                formData = new FormData();\n                formData.append(\"public_id\", _this10.images[index].public_id);\n                formData.append(\"signature\", signature);\n                formData.append(\"timestamp\", timestamp);\n                formData.append(\"api_key\", api_key);\n                return _context8.abrupt(\"return\", formData);\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    }\n  },\n  mounted: function mounted() {\n    var _this11 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _this11.getAllTags();\n\n            case 2:\n              _context9.next = 4;\n              return _this11.getAllEntities();\n\n            case 4:\n              console.log(\"methode fdghjklmù\");\n              console.log(_this11.$data);\n\n            case 6:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }))();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/add-realisation-1.vue?vue&type=template&id=689a3695&":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/add-realisation-1.vue?vue&type=template&id=689a3695& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", {\n    staticClass: \"css-u0dcsn eu4oa1w0\"\n  }, [_c(\"div\", {\n    staticClass: \"css-1jrcd50 eu4oa1w0\"\n  }, [_c(\"svg\", {\n    style: {\n      width: _vm.width,\n      height: _vm.height\n    },\n    attrs: {\n      role: \"img\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      \"aria-hidden\": \"true\",\n      viewBox: \"15 24 120 78\"\n    }\n  }, [_c(\"defs\", [_c(\"filter\", {\n    attrs: {\n      id: \"spot-documents-1_svg__spot-documents-1__filter0_d\",\n      width: \"77.5\",\n      height: \"28.118\",\n      x: \"38.48\",\n      y: \"57.471\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \".5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"spot-documents-1_svg__spot-documents-1__filter1_di\",\n      width: \"19.67\",\n      height: \"5.624\",\n      x: \"66.903\",\n      y: \"70.533\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \".5\",\n      dy: \".5\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \".25\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \".5\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"spot-documents-1_svg__spot-documents-1__paint0_linear\",\n      x1: \"40.796\",\n      x2: \"116.673\",\n      y1: \"53.915\",\n      y2: \"117.193\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#E2E0FD\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#9288EE\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"clipPath\", {\n    attrs: {\n      id: \"spot-documents-1_svg__spot-documents-1__svgClip\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"#fff\",\n      d: \"m29.535 56.608 15.253-5.615V40.298H73.84l40.347-14.852 19.588 75.489h-26.119V101H44.752v-.065H16.225l13.31-44.328z\"\n    }\n  })]), _vm._v(\" \"), _c(\"pattern\", {\n    attrs: {\n      id: \"spot-documents-1_svg__spot-documents-1__texture\",\n      width: \"38\",\n      height: \"32\",\n      x: \"0\",\n      y: \"0\",\n      patternTransform: \"scale(.3)\",\n      patternUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#404040\",\n      \"fill-rule\": \"evenodd\",\n      d: \"M10 0h1v1h-1V0zm8 0h1v1h-1V0zm15 0h1v1h-1V0zm10 1h1v1h-1V1zm27 0h1v1h-1V1zM6 1h1v1H6V1zm23 0h1v1h-1V1zm2 0h1v1h-1V1zm25 0h1v1h-1V1zm19 0h1v1h-1V1zM3 1h1v1H3V1zm4 1h1v1H7V2zm16 0h1v1h-1V2zm14 0h1v1h-1V2zm8 0h1v1h-1V2zm8 0h1v1h-1V2zm5 0h1v1h-1V2zm10 0h1v1h-1V2zM1 3h1v1H1V3zm3 0h1v1H4V3zm4 0h2v1H8V3zm6 0h1v1h-1V3zm2 0h1v1h-1V3zm9 0h1v1h-1V3zm2 0h2v1h-2V3zm9 0h2v1h-2V3zm6 1h1v1h-1V4zm8 0h1v1h-1V4zm11 0h1v1h-1V4zm4 0h1v1h-1V4zM21 4h1v1h-1V4zm9 0h1v1h-1V4zm7 0h1v1h-1V4zm9 0h1v1h-1V4zm13 1h1v1h-1V5zm11 0h1v1h-1V5zm4 0h1v1h-1V5zM4 5h1v1H4V5zm3 0h1v1H7V5zm5 0h1v1h-1V5zm28 0h1v1h-1V5zm15 1h2v1h-2V6zm10 0h1v1h-1V6zm10 0h1v1h-1V6zM1 6h1v1H1V6zm8 0h1v1H9V6zm16 0h1v1h-1V6zm8 0h1v1h-1V6zm12 0h1v1h-1V6zm2 1h1v1h-1V7zm3 0h1v1h-1V7zm2 0h1v2h-1V7zm3 0h1v1h-1V7zm4 0h1v1h-1V7zM6 7h1v1H6V7zm12 0h1v1h-1V7zm1 0h2v1h-2V7zm7 0h1v1h-1V7zm3 1h1v2h-1V8zm38 0h1v1h-1V8zm7 0h1v1h-1V8zM3 8h1v1H3V8zm4 0h1v1H7V8zm4 0h1v1h-1V8zm4 0h1v1h-1V8zm9 1h1v1h-1V9zm24 0h1v1h-1V9zm3 0h1v1h-1V9zm2 0h1v1h-1V9zm2 0h1v1h-1V9zm13 0h1v1h-1V9zm2 0h1v1h-1V9zm5 1h1v1h-1v-1zm-57 0h1v1h-1v-1zm9 0h1v1h-1v-1zm39 0h1v1h-1v-1zm5 0h2v1h-2v-1zm6 0h2v1h-2v-1zm-65 0h1v1h-1v-1zm4 1h1v1h-1v-1zm12 0h1v1h-1v-1zm3 0h1v1h-1v-1zm1 0h1v1h-1v-1zm9 0h1v1h-1v-1zm3 0h1v1h-1v-1zm2 0h1v1h-1v-1zm12 1h1v2h-1v-2zm5-1h1v1h-1v-1zM6 12h1v1H6v-1zm4 0h1v1h-1v-1zm4 0h1v1h-1v-1zm7 0h1v1h-1v-1zm2 0h1v1h-1v-1zm31 0h1v1h-1v-1zm12 0h1v1h-1v-1zm11 1h1v1h-1v-1zM1 13h1v1H1v-1zm12 0h1v1h-1v-1zm4 0h1v1h-1v-1zm7 0h1v1h-1v-1zm19 0h1v1h-1v-1zm19 0h1v1h-1v-1zm8 1h1v1h-1v-1zM2 14h1v1H2v-1zm20 0h1v1h-1v-1zm4 0h1v1h-1v-1zm5 0h2v1h-2v-1zm10 0h1v1h-1v-1zm-2-2h1v1h-1v-1zm7 2h1v1h-1v-1zm3 0h1v1h-1v-1zm1 1h2v1h-2v-1zm19 0h1v1h-1v-1zm-58 0h1v1h-1v-1zm3 0h1v1h-1v-1zm13 0h2v1h-2v-1zm9 0h1v1h-1v-1zm1-7h1v1h-1V8zm7 7h1v1h-1v-1zm10 1h1v2h-1v-2zm6 0h1v2h-1v-2zm5-1h2v1h-2v-1zm8 1h1v1h-1v-1zM5 16h1v2H5v-2zm8 0h1v1h-1v-1zm35 1h1v2h-1v-2zm4-1h1v1h-1v-1zm4 0h1v1h-1v-1zM2 16h1v1H2v-1zm17 1h1v1h-1v-1zm8 0h1v2h-1v-2zm6 0h1v1h-1v-1zm28 0h2v1h-2v-1zM3 17h1v1H3v-1zm11 0h1v1h-1v-1zm2 0h1v1h-1v-1zm8 1h1v1h-1v-1zm12 0h1v1h-1v-1zm13 0h1v1h-1v-1zm17 0h1v1h-1v-1zm2 0h2v1h-2v-1zm8 0h2v1h-2v-1zM5 18h1v1H5v-1zm6 1h1v1h-1v-1zm15 0h1v1h-1v-1zm32 0h1v1h-1v-1zm2 0h1v1h-1v-1zm13 0h1v1h-1v-1zm-56 0h1v1h-1v-1zm3 0h1v1h-1v-1zm9 1h1v1h-1v-1zm7 0h1v1h-1v-1zm6 0h1v1h-1v-1zm20 0h1v1h-1v-1zm3 0h1v1h-1v-1zm11 0h1v1h-1v-1zM6 20h2v1H6v-1zm6 0h1v1h-1v-1zm23 1h1v1h-1v-1zm11 0h1v1h-1v-1zm7 0h1v1h-1v-1zm11 0h1v1h-1v-1zm7 0h1v1h-1v-1zM5 21h1v1H5v-1zm10 0h1v1h-1v-1zm4 1h1v1h-1v-1zm17 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm34 0h1v1h-1v-1zM9 22h1v1H9v-1zm43 0h1v1h-1v-1zm8 0h1v1h-1v-1zm1 1h1v1h-1v-1zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zM2 24h1v2H2v-2zm27-1h1v1h-1v-1zm6 0h1v1h-1v-1zm5 0h2v1h-2v-1zm6 0h1v1h-1v-1zm11 0h1v1h-1v-1zm15 1h1v1h-1v-1zM4 24h1v1H4v-1zm15 0h1v1h-1v-1zm11 0h1v1h-1v-1zm9 0h1v1h-1v-1zm29 0h1v1h-1v-1zM7 25h1v1H7v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zm10 0h1v1h-1v-1zm11 0h1v1h-1v-1zm8 1h1v2h-1v-2zm18-1h2v1h-2v-1zm9 0h1v1h-1v-1zm5 0h1v1h-1v-1zm2 1h1v1h-1v-1zm-62 0h1v1h-1v-1zm5 0h1v1h-1v-1zm2 0h1v1h-1v-1zm24 0h1v1h-1v-1zm12 0h1v1h-1v-1zm3 0h1v1h-1v-1zm7 1h1v1h-1v-1zm3 0h1v1h-1v-1zM9 27h1v1H9v-1zm18 0h1v1h-1v-1zm9 0h1v1h-1v-1zm3 0h2v1h-2v-1zm10 0h1v1h-1v-1zm3 1h1v1h-1v-1zm5 0h1v1h-1v-1zm12 0h1v1h-1v-1zm7 0h2v1h-2v-1zM3 28h1v1H3v-1zm20 0h1v1h-1v-1zm3 0h1v1h-1v-1zm2 0h1v1h-1v-1zm19 1h1v1h-1v-1zm13 0h1v1h-1v-1zm1 0h1v1h-1v-1zm10 0h1v1h-1v-1zM8 29h1v1H8v-1zm8 0h2v1h-2v-1zm5 0h1v1h-1v-1zm4 1h1v1h-1v-1zm7 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm4 1h1v2h-1v-2zm8 0h1v2h-1v-2zm2-1h1v1h-1v-1zm14 0h1v1h-1v-1zM1 30h1v1H1v-1zm10 1h1v1h-1v-1z\",\n      \"clip-rule\": \"evenodd\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#404040\",\n      \"fill-rule\": \"evenodd\",\n      d: \"M11 31h2v1h-2v-1zm7 0h1v1h-1v-1zm18 0h1v1h-1v-1zm6 0h1v1h-1v-1zm5 0h1v1h-1v-1zm12 1h1v1h-1v-1zm4 0h1v1h-1v-1z\",\n      \"clip-rule\": \"evenodd\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#404040\",\n      \"fill-rule\": \"evenodd\",\n      d: \"M63 32h2v1h-2v-1zm9 0h1v1h-1v-1zm5 0h1v1h-1v-1zM8 33h1v2H8v-2zm11-1h1v1h-1v-1zm23 0h1v1h-1v-1zm31 1h1v1h-1v-1zm-49 0h1v1h-1v-1zm6 0h1v1h-1v-1zm13 0h1v1h-1v-1zm6 0h1v1h-1v-1zm4 0h1v1h-1v-1zm18 0h1v1h-1v-1zm-46 1h1v2h-1v-2zm10 0h1v1h-1v-1zm15 0h1v1h-1v-1zm12 0h1v1h-1v-1zm-52 0h1v1h-1v-1zm4 1h1v2h-1v-2zm17-1h1v1h-1v-1zm8 0h1v1h-1v-1zm12 0h1v1h-1v-1zm6 1h1v2h-1v-2zm4-1h1v1h-1v-1zm8 1h1v2h-1v-2zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zm-64 0h1v1h-1v-1zm10 0h1v1h-1v-1zm2 0h1v1h-1v-1zm40 1h1v1h-1v-1zm-19 0h1v1h-1v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zm14 0h1v1h-1v-1zm8 0h1v1h-1v-1zM2 37h1v1H2v-1zm31 0h1v1h-1v-1zm2 0h1v1h-1v-1zm4 0h1v1h-1v-1zm25 0h1v1h-1v-1zm7 0h1v1h-1v-1zM5 37h1v1H5v-1zm6 0h1v1h-1v-1zm4 2h1v2h-1v-2zm30-1h1v1h-1v-1zm6 0h2v1h-2v-1zm12 0h1v1h-1v-1zm4 0h1v1h-1v-1zm5 0h1v1h-1v-1zm4 0h1v1h-1v-1zM7 38h1v1H7v-1zm6 1h1v1h-1v-1zm5 0h1v1h-1v-1zm4 0h1v1h-1v-1zm4 0h1v1h-1v-1zm5 0h1v1h-1v-1zm1 0h1v1h-1v-1zm18 1h1v2h-1v-2zm8-1h2v1h-2v-1zm-30 1h1v1h-1v-1zm10 0h1v1h-1v-1zm1 0h1v1h-1v-1zm3 0h1v1h-1v-1zm12 0h1v1h-1v-1zm2 0h1v1h-1v-1zm12 1h1v1h-1v-1zm-58 0h1v1h-1v-1zm15 0h1v1h-1v-1zm7 0h1v1h-1v-1zm2 0h1v1h-1v-1zm4 0h1v1h-1v-1zm15 0h1v1h-1v-1zm2 0h1v1h-1v-1zM2 42h1v1H2v-1zm11 0h1v1h-1v-1zm7 1h1v2h-1v-2zm2-1h1v1h-1v-1zm8 0h1v1h-1v-1zm3 0h1v1h-1v-1zm14 0h1v1h-1v-1zm9 0h1v1h-1v-1zm10 0h1v1h-1v-1zm5 1h1v1h-1v-1zm3 0h1v1h-1v-1zM4 43h1v1H4v-1zm19 0h1v1h-1v-1zm11 0h1v1h-1v-1zm4 0h1v1h-1v-1zm2 0h1v1h-1v-1zm18 1h1v1h-1v-1zm2 0h2v1h-2v-1zm7 0h1v1h-1v-1zm6 0h1v1h-1v-1zM8 44h1v1H8v-1zm4 0h3v1h-3v-1zm6 0h1v1h-1v-1zm10 1h1v1h-1v-1zm9 0h1v1h-1v-1zm10 0h1v2h-1v-2zm2 0h1v1h-1v-1zm6 0h1v1h-1v-1zm22 0h1v1h-1v-1zM1 45h1v1H1v-1z\",\n      \"clip-rule\": \"evenodd\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#404040\",\n      \"fill-rule\": \"evenodd\",\n      d: \"M28 45h1v1h-1v-1zm29 0h1v1h-1v-1zm2 1h1v1h-1v-1zm-43 0h2v1h-2v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zm11 0h1v1h-1v-1zm7 1h1v2h-1v-2zm1 0h2v2h-1v-1h-1v-1zm20-1h1v1h-1v-1zm5 1h1v1h-1v-1zm6 0h2v2h-1v-1h-1v-1zM4 47h1v1H4v-1zm22 0h1v1h-1v-1zm11 0h2v1h-2v-1zm11 0h1v1h-1v-1zm3 0h1v1h-1v-1zm12 1h1v1h-1v-1zm3 0h1v1h-1v-1zM6 48h1v1H6v-1zm3 0h2v1H9v-1zm10 0h1v1h-1v-1zm11 0h1v1h-1v-1zm1 1h1v1h-1v-1zm6 0h1v1h-1v-1zm14 0h1v2h-1v-2zm4 0h1v1h-1v-1zM3 49h1v1H3v-1zm5 0h1v1H8v-1zm5 0h1v1h-1v-1zm4 0h1v1h-1v-1zm4 0h1v1h-1v-1zm23 1h1v1h-1v-1zm10 0h1v1h-1v-1zm13 0h1v1h-1v-1zm3 0h1v1h-1v-1zm-60 0h1v1h-1v-1zm19 1h1v2h-1v-2zm9-1h1v1h-1v-1zm14 0h1v1h-1v-1zm17 1h1v1h-1v-1zm-49 1h1v2h-1v-2zm8-1h1v1h-1v-1zm6 0h1v1h-1v-1zm7 0h1v1h-1v-1zm7 0h1v1h-1v-1zm9 1h1v2h-1v-2zm6-1h1v1h-1v-1zM8 52h1v1H8v-1zm15 0h1v1h-1v-1zm17 0h1v1h-1v-1zm4 0h1v1h-1v-1zm16 0h1v1h-1v-1zm13 0h1v1h-1v-1zm4 1h1v1h-1v-1zM2 53h1v1H2v-1zm3 0h1v1H5v-1zm4 0h1v1H9v-1zm6 0h1v1h-1v-1zm16 0h1v1h-1v-1zm8 0h1v1h-1v-1zm8 0h1v1h-1v-1zm11 1h1v1h-1v-1zm16 0h1v1h-1v-1zM6 54h1v1H6v-1zm10 0h1v1h-1v-1zm21 0h1v1h-1v-1zm8 0h1v1h-1v-1zm20 0h1v1h-1v-1zM8 55h1v1H8v-1zm3 2h1v1h-1v-1zm1-2h1v1h-1v-1zm9 0h1v1h-1v-1zm8 0h1v1h-1v-1zm3 0h1v2h-1v-2zm2 0h1v1h-1v-1zm20 0h1v2h-1v-2zM4 55h1v1H4v-1zm11 0h1v1h-1v-1zm29 0h1v1h-1v-1zm31 1h1v2h-1v-2zM3 56h1v1H3v-1zm-1 2h1v1H2v-1zm3-2h1v1H5v-1zm2 2h1v1H7v-1zm0-2h1v1H7v-1zm12 0h1v1h-1v-1zm2 0h1v1h-1v-1zm6 0h1v1h-1v-1zm3 1h1v1h-1v-1zm9 0h2v1h-2v-1zm4 0h1v1h-1v-1zm8 0h1v1h-1v-1zm3 0h1v1h-1v-1zm19 0h1v1h-1v-1zm-57 1h1v1h-1v-1zm6 0h1v1h-1v-1zm26 0h1v1h-1v-1zm15 0h1v1h-1v-1zm2 0h1v1h-1v-1zm-48 0h1v1h-1v-1zm17 0h1v1h-1v-1zm10 0h1v1h-1v-1zm6 1h1v1h-1v-1zm7 0h1v1h-1v-1zm2 0h1v1h-1v-1zm3 0h1v1h-1v-1zm5 0h1v1h-1v-1zm8 0h1v1h-1v-1z\",\n      \"clip-rule\": \"evenodd\"\n    }\n  })])], 1), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      \"clip-path\": \"url(#spot-documents-1_svg__spot-documents-1__svgClip)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#F7C8B8\",\n      d: \"m29.535 56.608 84.652-31.161 19.588 75.488H16.225l13.31-44.327z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#2C2071\",\n      d: \"M107.652 40.299H44.788v20.847h62.864V40.299z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#5644BF\",\n      d: \"M107.656 83.575H44.752V101h62.904V83.575z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#fff\",\n      d: \"M83.256 94.606H69.204a2.316 2.316 0 0 1-2.315-2.312 2.316 2.316 0 0 1 2.315-2.312h14.052c1.27 0 2.303 1.03 2.303 2.312a2.313 2.313 0 0 1-2.303 2.312z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#fff\",\n      d: \"M83.256 51.287H69.204a2.316 2.316 0 0 1-2.315-2.312 2.316 2.316 0 0 1 2.315-2.312h14.052c1.27 0 2.303 1.03 2.303 2.312a2.305 2.305 0 0 1-2.303 2.312z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#spot-documents-1_svg__spot-documents-1__filter0_d)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#spot-documents-1_svg__spot-documents-1__paint0_linear)\",\n      d: \"M88.973 57.47v.159a3.154 3.154 0 0 1-3.15 3.144H66.624a3.154 3.154 0 0 1-3.149-3.144v-.158H38.48v26.117h75.501V57.471H88.973z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#spot-documents-1_svg__spot-documents-1__filter1_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#5644BF\",\n      d: \"M83.271 75.157H69.219a2.316 2.316 0 0 1-2.316-2.312 2.316 2.316 0 0 1 2.316-2.312H83.27c1.27 0 2.302 1.03 2.302 2.312a2.313 2.313 0 0 1-2.302 2.312z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    staticStyle: {\n      \"mix-blend-mode\": \"overlay\"\n    },\n    attrs: {\n      fill: \"url(#spot-documents-1_svg__spot-documents-1__texture)\",\n      d: \"m29.535 56.608 15.253-5.615V40.298H73.84l40.347-14.852 19.588 75.489h-26.119V101H44.752v-.065H16.225l13.31-44.328z\",\n      opacity: \".45\"\n    }\n  })])])])]);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/add-realisation-1.vue?vue&type=template&id=689a3695&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/description-1.vue?vue&type=template&id=da96e660&":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/description-1.vue?vue&type=template&id=da96e660& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", [_c(\"div\", {\n    staticClass: \"css-r8tze2 eu4oa1w0\"\n  }, [_c(\"div\", {\n    staticClass: \"css-j2f1bi eu4oa1w0\",\n    attrs: {\n      \"data-testid\": \"job-description-sheet-header-image\"\n    }\n  }, [_c(\"svg\", {\n    style: {\n      width: _vm.width,\n      height: _vm.height\n    },\n    attrs: {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"none\",\n      viewBox: \"0 0 585 379\",\n      \"aria-hidden\": \"true\",\n      \"data-testid\": \"ipl-illustration-hero\"\n    }\n  }, [_c(\"defs\", [_c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-21\",\n      x: \"0%\",\n      y: \"0%\"\n    }\n  }, [_c(\"feTurbulence\", {\n    attrs: {\n      baseFrequency: \"2.5\",\n      numOctaves: \"4\",\n      result: \"noise\",\n      seed: \"14\"\n    }\n  }), _vm._v(\" \"), _c(\"feComponentTransfer\", {\n    attrs: {\n      \"in\": \"noise\",\n      result: \"opacity\"\n    }\n  }, [_c(\"feFuncA\", {\n    attrs: {\n      slope: \"0.6\",\n      type: \"linear\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"opacity\",\n      in2: \"SourceGraphic\",\n      mode: \"overlay\",\n      result: \"blend\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-20\",\n      width: \"131.37\",\n      height: \"179.752\",\n      x: \"60.328\",\n      y: \"175.355\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-19\",\n      width: \"71.493\",\n      height: \"72.923\",\n      x: \"46.94\",\n      y: \"315.822\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-4\",\n      dy: \"4\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-18\",\n      width: \"154.98\",\n      height: \"141.717\",\n      x: \"174.748\",\n      y: \"54.23\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-17\",\n      width: \"113.611\",\n      height: \"134.992\",\n      x: \"189.521\",\n      y: \"23.521\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-16\",\n      width: \"253.143\",\n      height: \"211.546\",\n      x: \"70.122\",\n      y: \"173.336\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-15\",\n      width: \"117.522\",\n      height: \"188.785\",\n      x: \"314.922\",\n      y: \"141.269\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-14\",\n      width: \"88.859\",\n      height: \"26.311\",\n      x: \"200.806\",\n      y: \"160.3\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-13\",\n      width: \"151.343\",\n      height: \"166.913\",\n      x: \"240.287\",\n      y: \"175.237\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-12\",\n      width: \"36.039\",\n      height: \"63.117\",\n      x: \"377.942\",\n      y: \"130.073\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-11\",\n      width: \"12.727\",\n      height: \"27.036\",\n      x: \"279.421\",\n      y: \"119.291\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-10\",\n      width: \"40.122\",\n      height: \"20.2\",\n      x: \"369.67\",\n      y: \"205.951\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_1930\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_1930\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_1930\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-9\",\n      x1: \"-19.004\",\n      x2: \"273.416\",\n      y1: \"467.015\",\n      y2: \"142.278\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      offset: \"0.444\",\n      \"stop-color\": \"#4F1C36\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.88\",\n      \"stop-color\": \"#74234E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-8\",\n      x1: \"86.859\",\n      x2: \"133.438\",\n      y1: \"410.071\",\n      y2: \"314.616\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      offset: \"0.052\",\n      \"stop-color\": \"#DF7838\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.599\",\n      \"stop-color\": \"#F0996F\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-7\",\n      x1: \"255.669\",\n      x2: \"370.7\",\n      y1: \"259.731\",\n      y2: \"73.192\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      offset: \"0.052\",\n      \"stop-color\": \"#DF7838\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.455\",\n      \"stop-color\": \"#F0996F\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.67\",\n      \"stop-color\": \"#F39E78\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.8\",\n      \"stop-color\": \"#FFB286\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-6\",\n      x1: \"280.368\",\n      x2: \"208.953\",\n      y1: \"27.679\",\n      y2: \"147.247\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      offset: \"0.682\",\n      \"stop-color\": \"#595959\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.948\",\n      \"stop-color\": \"#2D2D2D\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-5\",\n      x1: \"-92.094\",\n      x2: \"198.866\",\n      y1: \"518.364\",\n      y2: \"-20.067\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      offset: \"0.089\",\n      \"stop-color\": \"#4F1C36\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.505\",\n      \"stop-color\": \"#74234E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-4\",\n      x1: \"283.653\",\n      x2: \"283.653\",\n      y1: \"243.801\",\n      y2: \"378.882\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      offset: \"0.37\",\n      \"stop-color\": \"#4F1C36\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.88\",\n      \"stop-color\": \"#74234E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-3\",\n      x1: \"387.287\",\n      x2: \"437.094\",\n      y1: \"324.131\",\n      y2: \"82.872\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#DF7838\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.43\",\n      \"stop-color\": \"#F39E78\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.733\",\n      \"stop-color\": \"#F8A67D\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.856\",\n      \"stop-color\": \"#FFB286\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-2\",\n      x1: \"387.287\",\n      x2: \"437.094\",\n      y1: \"324.131\",\n      y2: \"82.872\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#DF7838\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.43\",\n      \"stop-color\": \"#F39E78\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.733\",\n      \"stop-color\": \"#F8A67D\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"0.856\",\n      \"stop-color\": \"#FFB286\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-1\",\n      x1: \"425.041\",\n      x2: \"392.641\",\n      y1: \"207.62\",\n      y2: \"189.575\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#fff\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#B4B2B1\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"clipPath\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:rc:-0\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"#fff\",\n      d: \"m494.064.972 90.107 377.91H.128l78.647-235.248 120.362-41.347-3.353-6.118c-2.289-11.44 10.823-26.751 20.644-33.073l-5.893-2.762c2.737-7.487 16.31-24.246 23.895-26.656l30.424-9.693a29.902 29.902 0 0 1 27.485 9.463l7.721 7.716c4.578 5.104 3.969 13.01-1.355 17.329l-1.127.308a48.321 48.321 0 0 1 7.566 7.07L494.064.97z\"\n    }\n  })])], 1), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      \"clip-path\": \"url(#ipl-illustrations-hero-:rc:-0)\",\n      filter: \"url(#ipl-illustrations-hero-:rc:-21)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#7BC0AE\",\n      d: \"M.128 378.882H584.17L494.064.972 78.775 143.634.128 378.882z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-20)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-9)\",\n      d: \"M191.49 190.286c1.748-9.72-7.802-17.613-17.013-14.066-9.022 3.479-18.585 6.999-23.421 8.258-10.674 2.789-26.699 25.668-31.278 37.108-4.578 11.439-28.906 52.161-28.906 52.161s-11.514 11.873-19.9 23.312c-1.422 1.95-2.478 4.332-3.237 6.945-6.745 23.123 11.677 46.476 35.734 45.041.61-.041 1.219-.081 1.829-.149 22.12-2.288 67.12-52.608 67.12-52.608l19.072-106.002z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-19)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-8)\",\n      d: \"m98.838 320.966-.434-.244c-10.349-5.903-23.515-2.518-29.733 7.649a25.543 25.543 0 0 0-3.264 8.326l-8.467 42.048h59.494l-17.596-57.779z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-18)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-7)\",\n      d: \"m328.154 116.26-7.085-7.31c-1.666-1.611-4.456-5.781-5.499-7.839 0 0 .135-3.384.46-5.753.475-3.493.122-7.04-1.029-10.37l-3.183-9.166-.691-1.272a48.399 48.399 0 0 0-20.942-20.32h-39.08L212.54 67.957l-10.159 24.91 27.701 53.339-20.63 22.798c-9.374 2.03-18.057 1.191-28.704 4.332 11.663 24.057 59.277 16.354 76.046 7.716 1.843-.947 3.604-1.57 5.27-1.936l21.673 10.831 10.552-22.609a9.693 9.693 0 0 1 7.857-5.536l6.434-.61a15.934 15.934 0 0 0 2.384-.23h.041c.406-.068.826-.135 1.273-.23l3.82-.948c.826-.162 2.113-1.773 3.183-3.344a9.95 9.95 0 0 0 1.68-6.376l-.379-4.752 2.492-3.032c.65-.88.772-2.45.42-3.75-.257-.975-1.232-1.571-2.235-1.489l-1.896.162a3.96 3.96 0 0 1-1.897-.311l-4.808-2.085s5.77.176 7.152-.487c1.124-.542 4.754-2.437 4.754-4.089l-.84-4.481s3.509-1.354 5.785-3.56c.731-.731-.529-5.131-1.355-5.93z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#595959\",\n      d: \"M314.988 93.15h-3.616a9.17 9.17 0 0 0-9.049 7.758l-.339 2.126 2.574-2.776c1.273-1.367 6.665-3.344 6.665-3.344 2.668.204 3.765-3.763 3.765-3.763z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#553D1C\",\n      d: \"m304.53 103.505 4.552-.961c.186-.041.371-.091.552-.15a9.775 9.775 0 0 0-.303 1.286c-.292 1.74-.105 3.222.419 3.31.524.088 1.186-1.251 1.478-2.991.163-.971.177-1.862.066-2.475.063-.046.124-.095.185-.144l2.1-1.72-1.924.61a5.309 5.309 0 0 1-1.95.244 3.061 3.061 0 0 0-2.019.622l-3.156 2.369zm16.54 20.281 5.336-1.625c-2.067 2.691-4.975 1.742-5.306 1.634a.237.237 0 0 0-.03-.009zm0 0c-.001 0 0-.001 0 0z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#DF7838\",\n      d: \"m286.894 128.835-17.501 10.113 6.474-37.839 8.9 12.834 2.127 14.892z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-17)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-6)\",\n      d: \"M282.735 118.208s-15.348 37.094-40.082 31.002c-6.638-1.638-9.93.961-16.499 2.816l-1.707.487-15.957-30.352c-2.858-4.345-5.08-8.826-6.096-13.93l-6.61-12.062c-2.289-11.44 10.823-26.751 20.644-33.073l-5.893-2.762c2.737-7.487 16.31-24.246 23.895-26.656l30.424-9.693a29.902 29.902 0 0 1 27.485 9.463l7.721 7.716c4.578 5.104 3.969 13.01-1.355 17.329l-12.164 3.33c-1.747.474-2.641 2.423-1.869 4.048a45.49 45.49 0 0 1 3.495 28.43l-2.506 12.468-2.926 11.439z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#F39E78\",\n      d: \"M288.058 124.396c-6.881 2.802-15.347-17.098-15.104-25.032.325-10.573 9.726-9.977 14.251 1.124 3.792 9.341 4.131 22.568.853 23.908z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#fff\",\n      d: \"m323.264 130.787-2.195 5.049h-4.388l-3.996-1.056 5.282-.947 5.297-3.046z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#74234E\",\n      d: \"M316.993 133.317a7.96 7.96 0 0 0 3.684-2.613c.258-.325.596-.582.976-.744l2.668-1.124.258 1.367c0 1.652-3.631 3.547-4.755 4.089-1.343.645-6.836.496-7.139.487l4.808 2.085a3.962 3.962 0 0 0 1.897.312l1.896-.163c.989-.095 1.964.514 2.222 1.476.352 1.299.23 2.87-.42 3.75l-.705.866a15.21 15.21 0 0 1-7.26-5.158l-2.438-3.168h-.013l4.321-1.462z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-16)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-5)\",\n      d: \"m90.804 378.733 4.267.149h198.04c12.801-22.121 9.022-82.419 11.419-93.155 2.723-12.197 18.734-27.441 18.734-27.441l-14.209-32.017-21.579-44.296-3.712 7.96-21.673-10.83c-1.68.379-3.427.988-5.269 1.936-16.783 8.637-64.384 16.34-76.047-7.703-6.244 1.841-13.166 5.05-21.294 11.006-34.325 25.154-38.903 99.869-46.53 115.113-7.626 15.243-34.325 46.502-36.614 54.882-2.29 8.38 14.467 24.396 14.467 24.396z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-4)\",\n      d: \"M262.904 378.882h30.208c12.801-22.121 9.021-82.419 11.419-93.154 1.192-5.334 4.917-11.237 8.737-16.205l-23.042-25.722-12.082 11.832s12.936 50.347 9.915 68.434c-3.021 18.087-54.143 45.826-25.155 54.815z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#DF7838\",\n      d: \"m409.104 152.042-11.934-4.454c-1.449-.541-2.872.88-2.343 2.356a13.035 13.035 0 0 0 5.54 6.809l7.934 4.78-11.876 4.249c-1.111.393-1.504 1.801-.745 2.735l.054.067a7.623 7.623 0 0 0 6.773 2.803l-2.193 1.338a1.586 1.586 0 0 0-.176 2.572l.054.054a6.915 6.915 0 0 0 7.125 1.016l8.344-4.13-.989-8.271-1.255.766.414-5.177-2.204.788-2.523-8.301z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-15)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-3)\",\n      d: \"m407.615 210.214-3.075 64.765a56.373 56.373 0 0 1-6.298 19.346l-6.679 15.176c-7.612 14.052-14.128 8.935-29.557 12.455l-9.211 2.098-7.721-5.97s-12.774-9.45-14.196-12.645c-1.422-3.195-9.956-43.145-9.956-43.145l26.902-3.79 20.061-34.008c3.956-7.933 7.911-9.828 11.067-23.163l.623-8.393 28.04 17.274z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-2)\",\n      d: \"m417.964 205.123 9.157-9.003c3.454-3.384 5.513-8.042 5.31-12.875-.055-1.204-.244-2.26-.691-2.91 0 0-.854-6.092-1.314-8.109l-4.01-17.681a4.878 4.878 0 0 0-4.009-2.978 3.607 3.607 0 0 1-2.859-1.977 4.905 4.905 0 0 0-2.072-2.125l-17.583-4.061-4.497-2.045c-1.178-.501-3.278 1.178-3.061 2.451 0 0 .664 4.223 4.795 7.418l12.354 6.769s.19 2.478 1.111 7.595c1.395 7.73-6.286 14.025-13.357 10.776-.135-.054-.257-.122-.392-.189l-4.105-11.778 1.45-7.703c.541-2.87-.786-5.781-3.292-7.23a2.392 2.392 0 0 0-3.359 1.002l-3.021 5.984a3.832 3.832 0 0 1-.474.731l-3.183 3.967a10.772 10.772 0 0 0-2.33 7.445l1.354 20.037-1.693 22.946 6.055 16.029 16.783.569 16.933-23.055z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-14)\",\n      fill: \"#735324\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      d: \"M287.273 182.611c-.407-.122-41.261-12.658-55.823-16.476-14.264-3.736-25.276 3.33-25.385 3.412l-.745-1.138c.461-.311 11.609-7.486 26.469-3.587 14.589 3.818 55.456 16.354 55.876 16.489l-.392 1.3z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      d: \"m226.424 163.117 1.314-.609a2.265 2.265 0 0 1 1.233-.19l5.269.718c.921.121 1.707.69 2.127 1.529a2.802 2.802 0 0 1-1.328 3.791l-.474.217a2.788 2.788 0 0 1-1.869.176l-5.879-1.49a2.154 2.154 0 0 1-1.246-.839 2.214 2.214 0 0 1 .853-3.303zm21.213 5.008 1.517-.704a2.578 2.578 0 0 1 1.422-.217l6.042.826a3.219 3.219 0 0 1 2.438 1.747 3.206 3.206 0 0 1-1.517 4.345l-.542.258a3.284 3.284 0 0 1-2.154.203l-6.759-1.706a2.576 2.576 0 0 1-1.436-.975 2.526 2.526 0 0 1 .989-3.777zm-33.201-4.631a2.336 2.336 0 0 0-.812-.028l-6.042.826a3.219 3.219 0 0 0-2.438 1.747c-.623 1.245-.352 2.68.542 3.641a64.695 64.695 0 0 0 3.779-.677l4.971-5.509z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-13)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#74234E\",\n      d: \"M273.725 175.261c15.382.676 29.737 7.536 39.474 18.847l33.913 42.322a42.544 42.544 0 0 0 7.513 7.293l20.001 15.099c5.246 3.964 9.223 9.228 11.504 15.208l3.863 10.174c2.523 6.63 2.11 13.95-1.112 20.282l-1.867 3.653s-6.914 25.044-19.901 27.547c-13.956 2.692-38.789-6.603-55.867-21.513-17.079-14.91-39.26-28.237-44.093-47.071-2.081-8.104-8.568-21.566-15.296-34.258-8.126-15.343-7.199-33.243 1.725-47.463 4.191-6.657 11.989-10.486 20.143-10.12z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-12)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#fff\",\n      d: \"m397.429 151.403-.312-.163c-4.118-3.195-4.795-7.419-4.795-7.419-.095-.595.311-1.272.88-1.787l-3.616-8.041a4.399 4.399 0 0 0-.908-2.017l-.041-.095-.027.014a5.166 5.166 0 0 0-3.088-1.747c-2.655-.447-5.121 1.151-5.527 3.561-.135.798 0 1.57.298 2.288l-.013.013 6.786 15.379.433-.866a2.422 2.422 0 0 1 3.373-1.029c2.506 1.448 3.834 4.345 3.292 7.229l-1.422 7.541 11.879 26.926 9.361-3.425-16.553-36.362z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:rc:-1)\",\n      d: \"M410.281 191.904c2.572-.981 4.249-2.847 3.744-4.167-.504-1.32-2.998-1.595-5.57-.614s-4.249 2.847-3.744 4.167c.504 1.321 2.998 1.595 5.57.614z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#74234E\",\n      d: \"M384.532 156.481s1.951-.921 4.755-.257l2.276-4.982s-2.141-1.936-4.024-.731l-3.007 5.97z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-11)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#735324\",\n      d: \"M287.576 126.038a5.585 5.585 0 0 0 .482-2.307c0-2.452-1.485-4.44-3.318-4.44s-3.319 1.988-3.319 4.44c0 1.922.912 3.558 2.188 4.177l-1.986 14.115s.23.311.691.704c2.75 2.436 7.003 2.017 9.387-.759l.447-.514-4.572-15.416z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:rc:-10)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#735324\",\n      d: \"M397.971 219.863c.61 1.543 2.139 2.983 4.201 3.753 3.231 1.205 6.55.308 7.413-2.003.864-2.312-1.055-5.162-4.286-6.368-2.029-.757-4.092-.685-5.56.046-5.516-1.61-14.146-4.573-22.798-9.316h-1.169c-.962-.155-5.179.373-3.843 3.544-.367.842.296 2.418 1.17 2.838 3.847 1.885 10.882 3.729 19.887 6.004 2.241.567 3.828 1.063 4.985 1.502z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#409EC8\",\n      d: \"M407.795 220.945c.599-1.604-.733-3.583-2.976-4.419-2.243-.837-4.546-.215-5.145 1.389-.599 1.604.733 3.583 2.976 4.419 2.242.837 4.546.215 5.145-1.389z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#fff\",\n      d: \"M349.544 129.456c.379.163.758.244 1.165.244 2.208 0 4.835-2.599 9.211-8.895 8.899-12.806 14.006-21.85 16.864-27.603l1.734 23.163 3.292-6.904c13.911-29.201 26.048-47.627 29.543-48.344.231.366.867 1.868.637 6.85-.664 14.08 1.476 22.108 6.543 24.544 5.217 2.527 10.901-2.31 11.249-2.607l.007-.005c12.801-11.562 23.191-18.98 26.658-20.104l-.056.197c-.039.14-.084.3-.147.48-2.519 7.54-2.695 11.304-.609 12.955 1.246.989 2.926.758 4.023.082l-2.127-3.466c.258-.054.732.176.84.433-.027-.068-.637-1.61 1.734-8.732.921-2.748.609-4.657-.908-5.645-1.801-1.164-4.876-1.503-18.693 9.422-6.895 5.456-13.37 11.29-13.41 11.332-1.003.893-4.416 3.14-6.787 2.003-1.531-.744-5.025-4.25-4.253-20.7.216-4.656 0-10.112-3.631-11.02-3.21-.784-7.992 1.68-21.05 25.019-3.86 6.89-7.464 13.903-9.929 18.831l-2.032-27.198-3.156 10.452c-.027.108-3.359 10.79-19.669 34.25-2.641 3.818-4.239 5.605-5.133 6.445-.067-3.092 1.388-10.364 2.416-15.5l.035-.177c1.152-5.713 2.33-11.643 2.561-15.637.203-3.6-.732-5.861-2.804-6.728-4.85-2.044-13.33 6.444-16.743 10.18l3.007 2.735c5.269-5.767 10.864-9.68 12.137-9.192.014 0 .474.5.352 2.762-.216 3.71-1.368 9.476-2.492 15.067-2.899 14.459-3.617 19.63-.379 21.011zm-10.512 39.419 3.373 2.261 14.535-21.701c.745 3.195 2.492 6.796 6.515 8.596 1.436.65 2.967.596 4.403-.135 5.919-3.019 9.373-18.29 10.01-21.322l-3.982-.826c-1.409 6.755-4.782 16.963-7.871 18.547-.379.189-.623.162-.893.041-5.338-2.383-4.593-10.601-4.579-10.682l.853-8.15-22.364 33.371z\"\n    }\n  })])])])])]);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9kZXNjcmlwdGlvbi0xLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1kYTk2ZTY2MCYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxNQUFNLEdBQUcsU0FBU0EsTUFBVCxHQUFrQjtFQUM3QixJQUFJQyxHQUFHLEdBQUcsSUFBVjtFQUFBLElBQ0VDLEVBQUUsR0FBR0QsR0FBRyxDQUFDRSxLQUFKLENBQVVELEVBRGpCOztFQUVBLE9BQU9BLEVBQUUsQ0FBQyxLQUFELEVBQVEsQ0FDZkEsRUFBRSxDQUFDLEtBQUQsRUFBUTtJQUFFRSxXQUFXLEVBQUU7RUFBZixDQUFSLEVBQWdELENBQ2hERixFQUFFLENBQ0EsS0FEQSxFQUVBO0lBQ0VFLFdBQVcsRUFBRSxxQkFEZjtJQUVFQyxLQUFLLEVBQUU7TUFBRSxlQUFlO0lBQWpCO0VBRlQsQ0FGQSxFQU1BLENBQ0VILEVBQUUsQ0FDQSxLQURBLEVBRUE7SUFDRUksS0FBSyxFQUFFO01BQUVDLEtBQUssRUFBRU4sR0FBRyxDQUFDTSxLQUFiO01BQW9CQyxNQUFNLEVBQUVQLEdBQUcsQ0FBQ087SUFBaEMsQ0FEVDtJQUVFSCxLQUFLLEVBQUU7TUFDTEksS0FBSyxFQUFFLDRCQURGO01BRUxDLElBQUksRUFBRSxNQUZEO01BR0xDLE9BQU8sRUFBRSxhQUhKO01BSUwsZUFBZSxNQUpWO01BS0wsZUFBZTtJQUxWO0VBRlQsQ0FGQSxFQVlBLENBQ0VULEVBQUUsQ0FDQSxNQURBLEVBRUEsQ0FDRUEsRUFBRSxDQUNBLFFBREEsRUFFQTtJQUNFRyxLQUFLLEVBQUU7TUFDTE8sRUFBRSxFQUFFLGdDQURDO01BRUxDLENBQUMsRUFBRSxJQUZFO01BR0xDLENBQUMsRUFBRTtJQUhFO0VBRFQsQ0FGQSxFQVNBLENBQ0VaLEVBQUUsQ0FBQyxjQUFELEVBQWlCO0lBQ2pCRyxLQUFLLEVBQUU7TUFDTFUsYUFBYSxFQUFFLEtBRFY7TUFFTEMsVUFBVSxFQUFFLEdBRlA7TUFHTEMsTUFBTSxFQUFFLE9BSEg7TUFJTEMsSUFBSSxFQUFFO0lBSkQ7RUFEVSxDQUFqQixDQURKLEVBU0VqQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQVRGLEVBVUVqQixFQUFFLENBQ0EscUJBREEsRUFFQTtJQUFFRyxLQUFLLEVBQUU7TUFBRSxNQUFJLE9BQU47TUFBZVksTUFBTSxFQUFFO0lBQXZCO0VBQVQsQ0FGQSxFQUdBLENBQ0VmLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQUVlLEtBQUssRUFBRSxLQUFUO01BQWdCQyxJQUFJLEVBQUU7SUFBdEI7RUFESyxDQUFaLENBREosQ0FIQSxFQVFBLENBUkEsQ0FWSixFQW9CRXBCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBcEJGLEVBcUJFakIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxNQUFJLFNBREM7TUFFTGlCLEdBQUcsRUFBRSxlQUZBO01BR0xDLElBQUksRUFBRSxTQUhEO01BSUxOLE1BQU0sRUFBRTtJQUpIO0VBREssQ0FBWixDQXJCSixDQVRBLEVBdUNBLENBdkNBLENBREosRUEwQ0VoQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTFDRixFQTJDRWpCLEVBQUUsQ0FDQSxRQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSxnQ0FEQztNQUVMTCxLQUFLLEVBQUUsUUFGRjtNQUdMQyxNQUFNLEVBQUUsU0FISDtNQUlMSyxDQUFDLEVBQUUsUUFKRTtNQUtMQyxDQUFDLEVBQUUsU0FMRTtNQU1MLCtCQUErQixNQU4xQjtNQU9MVSxXQUFXLEVBQUU7SUFQUjtFQURULENBRkEsRUFhQSxDQUNFdEIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxpQkFBaUIsR0FEWjtNQUVMWSxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0FESixFQU9FaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FQRixFQVFFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBUkosRUFlRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBZkYsRUFnQkVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLElBQU47TUFBWUMsRUFBRSxFQUFFO0lBQWhCO0VBQVQsQ0FBYixDQWhCSixFQWlCRTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBakJGLEVBa0JFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FsQkosRUFtQkUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5CRixFQW9CRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0FwQkosRUF5QkV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXpCRixFQTBCRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsb0JBREE7TUFFTEwsTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBMUJKLEVBZ0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoQ0YsRUFpQ0VqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLE1BQUksZUFEQztNQUVMaUIsR0FBRyxFQUFFLDZCQUZBO01BR0xMLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQWpDSixFQXdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBeENGLEVBeUNFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBekNKLEVBZ0RFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoREYsRUFpREVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLE1BQU47TUFBY0MsRUFBRSxFQUFFO0lBQWxCO0VBQVQsQ0FBYixDQWpESixFQWtERTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbERGLEVBbURFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FuREosRUFvREUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXBERixFQXFERWpCLEVBQUUsQ0FBQyxhQUFELEVBQWdCO0lBQ2hCRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxXQURBO01BRUxPLEVBQUUsRUFBRSxJQUZDO01BR0xDLEVBQUUsRUFBRSxHQUhDO01BSUxDLFFBQVEsRUFBRTtJQUpMO0VBRFMsQ0FBaEIsQ0FyREosRUE2REU5QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTdERixFQThERWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0E5REosRUFtRUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5FRixFQW9FRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsT0FEQTtNQUVMQyxJQUFJLEVBQUUsWUFGRDtNQUdMTixNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FwRUosQ0FiQSxFQXlGQSxDQXpGQSxDQTNDSixFQXNJRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBdElGLEVBdUlFakIsRUFBRSxDQUNBLFFBREEsRUFFQTtJQUNFRyxLQUFLLEVBQUU7TUFDTE8sRUFBRSxFQUFFLGdDQURDO01BRUxMLEtBQUssRUFBRSxRQUZGO01BR0xDLE1BQU0sRUFBRSxRQUhIO01BSUxLLENBQUMsRUFBRSxPQUpFO01BS0xDLENBQUMsRUFBRSxTQUxFO01BTUwsK0JBQStCLE1BTjFCO01BT0xVLFdBQVcsRUFBRTtJQVBSO0VBRFQsQ0FGQSxFQWFBLENBQ0V0QixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLGlCQUFpQixHQURaO01BRUxZLE1BQU0sRUFBRTtJQUZIO0VBREssQ0FBWixDQURKLEVBT0VoQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQVBGLEVBUUVqQixFQUFFLENBQUMsZUFBRCxFQUFrQjtJQUNsQkcsS0FBSyxFQUFFO01BQ0wsTUFBSSxhQURDO01BRUxZLE1BQU0sRUFBRSxXQUZIO01BR0xRLE1BQU0sRUFBRTtJQUhIO0VBRFcsQ0FBbEIsQ0FSSixFQWVFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FmRixFQWdCRWpCLEVBQUUsQ0FBQyxVQUFELEVBQWE7SUFBRUcsS0FBSyxFQUFFO01BQUVxQixFQUFFLEVBQUUsSUFBTjtNQUFZQyxFQUFFLEVBQUU7SUFBaEI7RUFBVCxDQUFiLENBaEJKLEVBaUJFMUIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FqQkYsRUFrQkVqQixFQUFFLENBQUMsZ0JBQUQsRUFBbUI7SUFBRUcsS0FBSyxFQUFFO01BQUV1QixZQUFZLEVBQUU7SUFBaEI7RUFBVCxDQUFuQixDQWxCSixFQW1CRTNCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbkJGLEVBb0JFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMb0IsTUFBTSxFQUFFO0lBREg7RUFEVyxDQUFsQixDQXBCSixFQXlCRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBekJGLEVBMEJFakIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxvQkFEQTtNQUVMTCxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0ExQkosRUFnQ0VoQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWhDRixFQWlDRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0wsTUFBSSxlQURDO01BRUxpQixHQUFHLEVBQUUsNkJBRkE7TUFHTEwsTUFBTSxFQUFFO0lBSEg7RUFESyxDQUFaLENBakNKLEVBd0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F4Q0YsRUF5Q0VqQixFQUFFLENBQUMsZUFBRCxFQUFrQjtJQUNsQkcsS0FBSyxFQUFFO01BQ0wsTUFBSSxhQURDO01BRUxZLE1BQU0sRUFBRSxXQUZIO01BR0xRLE1BQU0sRUFBRTtJQUhIO0VBRFcsQ0FBbEIsQ0F6Q0osRUFnREV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWhERixFQWlERWpCLEVBQUUsQ0FBQyxVQUFELEVBQWE7SUFBRUcsS0FBSyxFQUFFO01BQUVxQixFQUFFLEVBQUUsTUFBTjtNQUFjQyxFQUFFLEVBQUU7SUFBbEI7RUFBVCxDQUFiLENBakRKLEVBa0RFMUIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FsREYsRUFtREVqQixFQUFFLENBQUMsZ0JBQUQsRUFBbUI7SUFBRUcsS0FBSyxFQUFFO01BQUV1QixZQUFZLEVBQUU7SUFBaEI7RUFBVCxDQUFuQixDQW5ESixFQW9ERTNCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBcERGLEVBcURFakIsRUFBRSxDQUFDLGFBQUQsRUFBZ0I7SUFDaEJHLEtBQUssRUFBRTtNQUNMaUIsR0FBRyxFQUFFLFdBREE7TUFFTE8sRUFBRSxFQUFFLElBRkM7TUFHTEMsRUFBRSxFQUFFLEdBSEM7TUFJTEMsUUFBUSxFQUFFO0lBSkw7RUFEUyxDQUFoQixDQXJESixFQTZERTlCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBN0RGLEVBOERFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMb0IsTUFBTSxFQUFFO0lBREg7RUFEVyxDQUFsQixDQTlESixFQW1FRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbkVGLEVBb0VFakIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxPQURBO01BRUxDLElBQUksRUFBRSxZQUZEO01BR0xOLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQXBFSixDQWJBLEVBeUZBLENBekZBLENBdklKLEVBa09FaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FsT0YsRUFtT0VqQixFQUFFLENBQ0EsUUFEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUNMTyxFQUFFLEVBQUUsZ0NBREM7TUFFTEwsS0FBSyxFQUFFLFFBRkY7TUFHTEMsTUFBTSxFQUFFLFNBSEg7TUFJTEssQ0FBQyxFQUFFLFNBSkU7TUFLTEMsQ0FBQyxFQUFFLE9BTEU7TUFNTCwrQkFBK0IsTUFOMUI7TUFPTFUsV0FBVyxFQUFFO0lBUFI7RUFEVCxDQUZBLEVBYUEsQ0FDRXRCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0wsaUJBQWlCLEdBRFo7TUFFTFksTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBREosRUFPRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBUEYsRUFRRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTCxNQUFJLGFBREM7TUFFTFksTUFBTSxFQUFFLFdBRkg7TUFHTFEsTUFBTSxFQUFFO0lBSEg7RUFEVyxDQUFsQixDQVJKLEVBZUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWZGLEVBZ0JFakIsRUFBRSxDQUFDLFVBQUQsRUFBYTtJQUFFRyxLQUFLLEVBQUU7TUFBRXFCLEVBQUUsRUFBRSxJQUFOO01BQVlDLEVBQUUsRUFBRTtJQUFoQjtFQUFULENBQWIsQ0FoQkosRUFpQkUxQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWpCRixFQWtCRWpCLEVBQUUsQ0FBQyxnQkFBRCxFQUFtQjtJQUFFRyxLQUFLLEVBQUU7TUFBRXVCLFlBQVksRUFBRTtJQUFoQjtFQUFULENBQW5CLENBbEJKLEVBbUJFM0IsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FuQkYsRUFvQkVqQixFQUFFLENBQUMsZUFBRCxFQUFrQjtJQUNsQkcsS0FBSyxFQUFFO01BQ0xvQixNQUFNLEVBQUU7SUFESDtFQURXLENBQWxCLENBcEJKLEVBeUJFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F6QkYsRUEwQkVqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMaUIsR0FBRyxFQUFFLG9CQURBO01BRUxMLE1BQU0sRUFBRTtJQUZIO0VBREssQ0FBWixDQTFCSixFQWdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBaENGLEVBaUNFakIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxNQUFJLGVBREM7TUFFTGlCLEdBQUcsRUFBRSw2QkFGQTtNQUdMTCxNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FqQ0osRUF3Q0VoQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXhDRixFQXlDRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTCxNQUFJLGFBREM7TUFFTFksTUFBTSxFQUFFLFdBRkg7TUFHTFEsTUFBTSxFQUFFO0lBSEg7RUFEVyxDQUFsQixDQXpDSixFQWdERXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBaERGLEVBaURFakIsRUFBRSxDQUFDLFVBQUQsRUFBYTtJQUFFRyxLQUFLLEVBQUU7TUFBRXFCLEVBQUUsRUFBRSxNQUFOO01BQWNDLEVBQUUsRUFBRTtJQUFsQjtFQUFULENBQWIsQ0FqREosRUFrREUxQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWxERixFQW1ERWpCLEVBQUUsQ0FBQyxnQkFBRCxFQUFtQjtJQUFFRyxLQUFLLEVBQUU7TUFBRXVCLFlBQVksRUFBRTtJQUFoQjtFQUFULENBQW5CLENBbkRKLEVBb0RFM0IsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FwREYsRUFxREVqQixFQUFFLENBQUMsYUFBRCxFQUFnQjtJQUNoQkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsV0FEQTtNQUVMTyxFQUFFLEVBQUUsSUFGQztNQUdMQyxFQUFFLEVBQUUsR0FIQztNQUlMQyxRQUFRLEVBQUU7SUFKTDtFQURTLENBQWhCLENBckRKLEVBNkRFOUIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0E3REYsRUE4REVqQixFQUFFLENBQUMsZUFBRCxFQUFrQjtJQUNsQkcsS0FBSyxFQUFFO01BQ0xvQixNQUFNLEVBQUU7SUFESDtFQURXLENBQWxCLENBOURKLEVBbUVFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FuRUYsRUFvRUVqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMaUIsR0FBRyxFQUFFLE9BREE7TUFFTEMsSUFBSSxFQUFFLFlBRkQ7TUFHTE4sTUFBTSxFQUFFO0lBSEg7RUFESyxDQUFaLENBcEVKLENBYkEsRUF5RkEsQ0F6RkEsQ0FuT0osRUE4VEVoQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTlURixFQStURWpCLEVBQUUsQ0FDQSxRQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSxnQ0FEQztNQUVMTCxLQUFLLEVBQUUsU0FGRjtNQUdMQyxNQUFNLEVBQUUsU0FISDtNQUlMSyxDQUFDLEVBQUUsU0FKRTtNQUtMQyxDQUFDLEVBQUUsUUFMRTtNQU1MLCtCQUErQixNQU4xQjtNQU9MVSxXQUFXLEVBQUU7SUFQUjtFQURULENBRkEsRUFhQSxDQUNFdEIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxpQkFBaUIsR0FEWjtNQUVMWSxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0FESixFQU9FaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FQRixFQVFFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBUkosRUFlRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBZkYsRUFnQkVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLElBQU47TUFBWUMsRUFBRSxFQUFFO0lBQWhCO0VBQVQsQ0FBYixDQWhCSixFQWlCRTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBakJGLEVBa0JFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FsQkosRUFtQkUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5CRixFQW9CRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0FwQkosRUF5QkV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXpCRixFQTBCRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsb0JBREE7TUFFTEwsTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBMUJKLEVBZ0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoQ0YsRUFpQ0VqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLE1BQUksZUFEQztNQUVMaUIsR0FBRyxFQUFFLDZCQUZBO01BR0xMLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQWpDSixFQXdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBeENGLEVBeUNFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBekNKLEVBZ0RFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoREYsRUFpREVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLE1BQU47TUFBY0MsRUFBRSxFQUFFO0lBQWxCO0VBQVQsQ0FBYixDQWpESixFQWtERTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbERGLEVBbURFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FuREosRUFvREUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXBERixFQXFERWpCLEVBQUUsQ0FBQyxhQUFELEVBQWdCO0lBQ2hCRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxXQURBO01BRUxPLEVBQUUsRUFBRSxJQUZDO01BR0xDLEVBQUUsRUFBRSxHQUhDO01BSUxDLFFBQVEsRUFBRTtJQUpMO0VBRFMsQ0FBaEIsQ0FyREosRUE2REU5QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTdERixFQThERWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0E5REosRUFtRUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5FRixFQW9FRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsT0FEQTtNQUVMQyxJQUFJLEVBQUUsWUFGRDtNQUdMTixNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FwRUosQ0FiQSxFQXlGQSxDQXpGQSxDQS9USixFQTBaRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBMVpGLEVBMlpFakIsRUFBRSxDQUNBLFFBREEsRUFFQTtJQUNFRyxLQUFLLEVBQUU7TUFDTE8sRUFBRSxFQUFFLGdDQURDO01BRUxMLEtBQUssRUFBRSxTQUZGO01BR0xDLE1BQU0sRUFBRSxTQUhIO01BSUxLLENBQUMsRUFBRSxRQUpFO01BS0xDLENBQUMsRUFBRSxTQUxFO01BTUwsK0JBQStCLE1BTjFCO01BT0xVLFdBQVcsRUFBRTtJQVBSO0VBRFQsQ0FGQSxFQWFBLENBQ0V0QixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLGlCQUFpQixHQURaO01BRUxZLE1BQU0sRUFBRTtJQUZIO0VBREssQ0FBWixDQURKLEVBT0VoQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQVBGLEVBUUVqQixFQUFFLENBQUMsZUFBRCxFQUFrQjtJQUNsQkcsS0FBSyxFQUFFO01BQ0wsTUFBSSxhQURDO01BRUxZLE1BQU0sRUFBRSxXQUZIO01BR0xRLE1BQU0sRUFBRTtJQUhIO0VBRFcsQ0FBbEIsQ0FSSixFQWVFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FmRixFQWdCRWpCLEVBQUUsQ0FBQyxVQUFELEVBQWE7SUFBRUcsS0FBSyxFQUFFO01BQUVxQixFQUFFLEVBQUUsSUFBTjtNQUFZQyxFQUFFLEVBQUU7SUFBaEI7RUFBVCxDQUFiLENBaEJKLEVBaUJFMUIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FqQkYsRUFrQkVqQixFQUFFLENBQUMsZ0JBQUQsRUFBbUI7SUFBRUcsS0FBSyxFQUFFO01BQUV1QixZQUFZLEVBQUU7SUFBaEI7RUFBVCxDQUFuQixDQWxCSixFQW1CRTNCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbkJGLEVBb0JFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMb0IsTUFBTSxFQUFFO0lBREg7RUFEVyxDQUFsQixDQXBCSixFQXlCRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBekJGLEVBMEJFakIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxvQkFEQTtNQUVMTCxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0ExQkosRUFnQ0VoQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWhDRixFQWlDRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0wsTUFBSSxlQURDO01BRUxpQixHQUFHLEVBQUUsNkJBRkE7TUFHTEwsTUFBTSxFQUFFO0lBSEg7RUFESyxDQUFaLENBakNKLEVBd0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F4Q0YsRUF5Q0VqQixFQUFFLENBQUMsZUFBRCxFQUFrQjtJQUNsQkcsS0FBSyxFQUFFO01BQ0wsTUFBSSxhQURDO01BRUxZLE1BQU0sRUFBRSxXQUZIO01BR0xRLE1BQU0sRUFBRTtJQUhIO0VBRFcsQ0FBbEIsQ0F6Q0osRUFnREV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWhERixFQWlERWpCLEVBQUUsQ0FBQyxVQUFELEVBQWE7SUFBRUcsS0FBSyxFQUFFO01BQUVxQixFQUFFLEVBQUUsTUFBTjtNQUFjQyxFQUFFLEVBQUU7SUFBbEI7RUFBVCxDQUFiLENBakRKLEVBa0RFMUIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FsREYsRUFtREVqQixFQUFFLENBQUMsZ0JBQUQsRUFBbUI7SUFBRUcsS0FBSyxFQUFFO01BQUV1QixZQUFZLEVBQUU7SUFBaEI7RUFBVCxDQUFuQixDQW5ESixFQW9ERTNCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBcERGLEVBcURFakIsRUFBRSxDQUFDLGFBQUQsRUFBZ0I7SUFDaEJHLEtBQUssRUFBRTtNQUNMaUIsR0FBRyxFQUFFLFdBREE7TUFFTE8sRUFBRSxFQUFFLElBRkM7TUFHTEMsRUFBRSxFQUFFLEdBSEM7TUFJTEMsUUFBUSxFQUFFO0lBSkw7RUFEUyxDQUFoQixDQXJESixFQTZERTlCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBN0RGLEVBOERFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMb0IsTUFBTSxFQUFFO0lBREg7RUFEVyxDQUFsQixDQTlESixFQW1FRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbkVGLEVBb0VFakIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxPQURBO01BRUxDLElBQUksRUFBRSxZQUZEO01BR0xOLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQXBFSixDQWJBLEVBeUZBLENBekZBLENBM1pKLEVBc2ZFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F0ZkYsRUF1ZkVqQixFQUFFLENBQ0EsUUFEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUNMTyxFQUFFLEVBQUUsZ0NBREM7TUFFTEwsS0FBSyxFQUFFLFNBRkY7TUFHTEMsTUFBTSxFQUFFLFNBSEg7TUFJTEssQ0FBQyxFQUFFLFNBSkU7TUFLTEMsQ0FBQyxFQUFFLFNBTEU7TUFNTCwrQkFBK0IsTUFOMUI7TUFPTFUsV0FBVyxFQUFFO0lBUFI7RUFEVCxDQUZBLEVBYUEsQ0FDRXRCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0wsaUJBQWlCLEdBRFo7TUFFTFksTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBREosRUFPRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBUEYsRUFRRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTCxNQUFJLGFBREM7TUFFTFksTUFBTSxFQUFFLFdBRkg7TUFHTFEsTUFBTSxFQUFFO0lBSEg7RUFEVyxDQUFsQixDQVJKLEVBZUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWZGLEVBZ0JFakIsRUFBRSxDQUFDLFVBQUQsRUFBYTtJQUFFRyxLQUFLLEVBQUU7TUFBRXFCLEVBQUUsRUFBRSxJQUFOO01BQVlDLEVBQUUsRUFBRTtJQUFoQjtFQUFULENBQWIsQ0FoQkosRUFpQkUxQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWpCRixFQWtCRWpCLEVBQUUsQ0FBQyxnQkFBRCxFQUFtQjtJQUFFRyxLQUFLLEVBQUU7TUFBRXVCLFlBQVksRUFBRTtJQUFoQjtFQUFULENBQW5CLENBbEJKLEVBbUJFM0IsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FuQkYsRUFvQkVqQixFQUFFLENBQUMsZUFBRCxFQUFrQjtJQUNsQkcsS0FBSyxFQUFFO01BQ0xvQixNQUFNLEVBQUU7SUFESDtFQURXLENBQWxCLENBcEJKLEVBeUJFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F6QkYsRUEwQkVqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMaUIsR0FBRyxFQUFFLG9CQURBO01BRUxMLE1BQU0sRUFBRTtJQUZIO0VBREssQ0FBWixDQTFCSixFQWdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBaENGLEVBaUNFakIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxNQUFJLGVBREM7TUFFTGlCLEdBQUcsRUFBRSw2QkFGQTtNQUdMTCxNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FqQ0osRUF3Q0VoQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXhDRixFQXlDRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTCxNQUFJLGFBREM7TUFFTFksTUFBTSxFQUFFLFdBRkg7TUFHTFEsTUFBTSxFQUFFO0lBSEg7RUFEVyxDQUFsQixDQXpDSixFQWdERXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBaERGLEVBaURFakIsRUFBRSxDQUFDLFVBQUQsRUFBYTtJQUFFRyxLQUFLLEVBQUU7TUFBRXFCLEVBQUUsRUFBRSxNQUFOO01BQWNDLEVBQUUsRUFBRTtJQUFsQjtFQUFULENBQWIsQ0FqREosRUFrREUxQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWxERixFQW1ERWpCLEVBQUUsQ0FBQyxnQkFBRCxFQUFtQjtJQUFFRyxLQUFLLEVBQUU7TUFBRXVCLFlBQVksRUFBRTtJQUFoQjtFQUFULENBQW5CLENBbkRKLEVBb0RFM0IsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FwREYsRUFxREVqQixFQUFFLENBQUMsYUFBRCxFQUFnQjtJQUNoQkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsV0FEQTtNQUVMTyxFQUFFLEVBQUUsSUFGQztNQUdMQyxFQUFFLEVBQUUsR0FIQztNQUlMQyxRQUFRLEVBQUU7SUFKTDtFQURTLENBQWhCLENBckRKLEVBNkRFOUIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0E3REYsRUE4REVqQixFQUFFLENBQUMsZUFBRCxFQUFrQjtJQUNsQkcsS0FBSyxFQUFFO01BQ0xvQixNQUFNLEVBQUU7SUFESDtFQURXLENBQWxCLENBOURKLEVBbUVFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FuRUYsRUFvRUVqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMaUIsR0FBRyxFQUFFLE9BREE7TUFFTEMsSUFBSSxFQUFFLFlBRkQ7TUFHTE4sTUFBTSxFQUFFO0lBSEg7RUFESyxDQUFaLENBcEVKLENBYkEsRUF5RkEsQ0F6RkEsQ0F2ZkosRUFrbEJFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FsbEJGLEVBbWxCRWpCLEVBQUUsQ0FDQSxRQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSxnQ0FEQztNQUVMTCxLQUFLLEVBQUUsUUFGRjtNQUdMQyxNQUFNLEVBQUUsUUFISDtNQUlMSyxDQUFDLEVBQUUsU0FKRTtNQUtMQyxDQUFDLEVBQUUsT0FMRTtNQU1MLCtCQUErQixNQU4xQjtNQU9MVSxXQUFXLEVBQUU7SUFQUjtFQURULENBRkEsRUFhQSxDQUNFdEIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxpQkFBaUIsR0FEWjtNQUVMWSxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0FESixFQU9FaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FQRixFQVFFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBUkosRUFlRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBZkYsRUFnQkVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLElBQU47TUFBWUMsRUFBRSxFQUFFO0lBQWhCO0VBQVQsQ0FBYixDQWhCSixFQWlCRTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBakJGLEVBa0JFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FsQkosRUFtQkUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5CRixFQW9CRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0FwQkosRUF5QkV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXpCRixFQTBCRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsb0JBREE7TUFFTEwsTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBMUJKLEVBZ0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoQ0YsRUFpQ0VqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLE1BQUksZUFEQztNQUVMaUIsR0FBRyxFQUFFLDZCQUZBO01BR0xMLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQWpDSixFQXdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBeENGLEVBeUNFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBekNKLEVBZ0RFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoREYsRUFpREVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLE1BQU47TUFBY0MsRUFBRSxFQUFFO0lBQWxCO0VBQVQsQ0FBYixDQWpESixFQWtERTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbERGLEVBbURFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FuREosRUFvREUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXBERixFQXFERWpCLEVBQUUsQ0FBQyxhQUFELEVBQWdCO0lBQ2hCRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxXQURBO01BRUxPLEVBQUUsRUFBRSxJQUZDO01BR0xDLEVBQUUsRUFBRSxHQUhDO01BSUxDLFFBQVEsRUFBRTtJQUpMO0VBRFMsQ0FBaEIsQ0FyREosRUE2REU5QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTdERixFQThERWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0E5REosRUFtRUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5FRixFQW9FRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsT0FEQTtNQUVMQyxJQUFJLEVBQUUsWUFGRDtNQUdMTixNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FwRUosQ0FiQSxFQXlGQSxDQXpGQSxDQW5sQkosRUE4cUJFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0E5cUJGLEVBK3FCRWpCLEVBQUUsQ0FDQSxRQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSxnQ0FEQztNQUVMTCxLQUFLLEVBQUUsU0FGRjtNQUdMQyxNQUFNLEVBQUUsU0FISDtNQUlMSyxDQUFDLEVBQUUsU0FKRTtNQUtMQyxDQUFDLEVBQUUsU0FMRTtNQU1MLCtCQUErQixNQU4xQjtNQU9MVSxXQUFXLEVBQUU7SUFQUjtFQURULENBRkEsRUFhQSxDQUNFdEIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxpQkFBaUIsR0FEWjtNQUVMWSxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0FESixFQU9FaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FQRixFQVFFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBUkosRUFlRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBZkYsRUFnQkVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLElBQU47TUFBWUMsRUFBRSxFQUFFO0lBQWhCO0VBQVQsQ0FBYixDQWhCSixFQWlCRTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBakJGLEVBa0JFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FsQkosRUFtQkUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5CRixFQW9CRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0FwQkosRUF5QkV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXpCRixFQTBCRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsb0JBREE7TUFFTEwsTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBMUJKLEVBZ0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoQ0YsRUFpQ0VqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLE1BQUksZUFEQztNQUVMaUIsR0FBRyxFQUFFLDZCQUZBO01BR0xMLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQWpDSixFQXdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBeENGLEVBeUNFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBekNKLEVBZ0RFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoREYsRUFpREVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLE1BQU47TUFBY0MsRUFBRSxFQUFFO0lBQWxCO0VBQVQsQ0FBYixDQWpESixFQWtERTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbERGLEVBbURFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FuREosRUFvREUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXBERixFQXFERWpCLEVBQUUsQ0FBQyxhQUFELEVBQWdCO0lBQ2hCRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxXQURBO01BRUxPLEVBQUUsRUFBRSxJQUZDO01BR0xDLEVBQUUsRUFBRSxHQUhDO01BSUxDLFFBQVEsRUFBRTtJQUpMO0VBRFMsQ0FBaEIsQ0FyREosRUE2REU5QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTdERixFQThERWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0E5REosRUFtRUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5FRixFQW9FRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsT0FEQTtNQUVMQyxJQUFJLEVBQUUsWUFGRDtNQUdMTixNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FwRUosQ0FiQSxFQXlGQSxDQXpGQSxDQS9xQkosRUEwd0JFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0Exd0JGLEVBMndCRWpCLEVBQUUsQ0FDQSxRQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSxnQ0FEQztNQUVMTCxLQUFLLEVBQUUsUUFGRjtNQUdMQyxNQUFNLEVBQUUsUUFISDtNQUlMSyxDQUFDLEVBQUUsU0FKRTtNQUtMQyxDQUFDLEVBQUUsU0FMRTtNQU1MLCtCQUErQixNQU4xQjtNQU9MVSxXQUFXLEVBQUU7SUFQUjtFQURULENBRkEsRUFhQSxDQUNFdEIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxpQkFBaUIsR0FEWjtNQUVMWSxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0FESixFQU9FaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FQRixFQVFFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBUkosRUFlRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBZkYsRUFnQkVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLElBQU47TUFBWUMsRUFBRSxFQUFFO0lBQWhCO0VBQVQsQ0FBYixDQWhCSixFQWlCRTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBakJGLEVBa0JFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FsQkosRUFtQkUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5CRixFQW9CRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0FwQkosRUF5QkV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXpCRixFQTBCRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsb0JBREE7TUFFTEwsTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBMUJKLEVBZ0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoQ0YsRUFpQ0VqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLE1BQUksZUFEQztNQUVMaUIsR0FBRyxFQUFFLDZCQUZBO01BR0xMLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQWpDSixFQXdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBeENGLEVBeUNFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBekNKLEVBZ0RFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoREYsRUFpREVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLE1BQU47TUFBY0MsRUFBRSxFQUFFO0lBQWxCO0VBQVQsQ0FBYixDQWpESixFQWtERTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbERGLEVBbURFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FuREosRUFvREUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXBERixFQXFERWpCLEVBQUUsQ0FBQyxhQUFELEVBQWdCO0lBQ2hCRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxXQURBO01BRUxPLEVBQUUsRUFBRSxJQUZDO01BR0xDLEVBQUUsRUFBRSxHQUhDO01BSUxDLFFBQVEsRUFBRTtJQUpMO0VBRFMsQ0FBaEIsQ0FyREosRUE2REU5QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTdERixFQThERWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0E5REosRUFtRUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5FRixFQW9FRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsT0FEQTtNQUVMQyxJQUFJLEVBQUUsWUFGRDtNQUdMTixNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FwRUosQ0FiQSxFQXlGQSxDQXpGQSxDQTN3QkosRUFzMkJFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F0MkJGLEVBdTJCRWpCLEVBQUUsQ0FDQSxRQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSxnQ0FEQztNQUVMTCxLQUFLLEVBQUUsUUFGRjtNQUdMQyxNQUFNLEVBQUUsUUFISDtNQUlMSyxDQUFDLEVBQUUsU0FKRTtNQUtMQyxDQUFDLEVBQUUsU0FMRTtNQU1MLCtCQUErQixNQU4xQjtNQU9MVSxXQUFXLEVBQUU7SUFQUjtFQURULENBRkEsRUFhQSxDQUNFdEIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxpQkFBaUIsR0FEWjtNQUVMWSxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0FESixFQU9FaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FQRixFQVFFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBUkosRUFlRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBZkYsRUFnQkVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLElBQU47TUFBWUMsRUFBRSxFQUFFO0lBQWhCO0VBQVQsQ0FBYixDQWhCSixFQWlCRTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBakJGLEVBa0JFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FsQkosRUFtQkUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5CRixFQW9CRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0FwQkosRUF5QkV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXpCRixFQTBCRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsb0JBREE7TUFFTEwsTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBMUJKLEVBZ0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoQ0YsRUFpQ0VqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLE1BQUksZUFEQztNQUVMaUIsR0FBRyxFQUFFLDZCQUZBO01BR0xMLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQWpDSixFQXdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBeENGLEVBeUNFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBekNKLEVBZ0RFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoREYsRUFpREVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLE1BQU47TUFBY0MsRUFBRSxFQUFFO0lBQWxCO0VBQVQsQ0FBYixDQWpESixFQWtERTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbERGLEVBbURFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FuREosRUFvREUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXBERixFQXFERWpCLEVBQUUsQ0FBQyxhQUFELEVBQWdCO0lBQ2hCRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxXQURBO01BRUxPLEVBQUUsRUFBRSxJQUZDO01BR0xDLEVBQUUsRUFBRSxHQUhDO01BSUxDLFFBQVEsRUFBRTtJQUpMO0VBRFMsQ0FBaEIsQ0FyREosRUE2REU5QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTdERixFQThERWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0E5REosRUFtRUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5FRixFQW9FRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsT0FEQTtNQUVMQyxJQUFJLEVBQUUsWUFGRDtNQUdMTixNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FwRUosQ0FiQSxFQXlGQSxDQXpGQSxDQXYyQkosRUFrOEJFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FsOEJGLEVBbThCRWpCLEVBQUUsQ0FDQSxRQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSxnQ0FEQztNQUVMTCxLQUFLLEVBQUUsUUFGRjtNQUdMQyxNQUFNLEVBQUUsTUFISDtNQUlMSyxDQUFDLEVBQUUsUUFKRTtNQUtMQyxDQUFDLEVBQUUsU0FMRTtNQU1MLCtCQUErQixNQU4xQjtNQU9MVSxXQUFXLEVBQUU7SUFQUjtFQURULENBRkEsRUFhQSxDQUNFdEIsRUFBRSxDQUFDLFNBQUQsRUFBWTtJQUNaRyxLQUFLLEVBQUU7TUFDTCxpQkFBaUIsR0FEWjtNQUVMWSxNQUFNLEVBQUU7SUFGSDtFQURLLENBQVosQ0FESixFQU9FaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FQRixFQVFFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBUkosRUFlRXhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBZkYsRUFnQkVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLElBQU47TUFBWUMsRUFBRSxFQUFFO0lBQWhCO0VBQVQsQ0FBYixDQWhCSixFQWlCRTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBakJGLEVBa0JFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FsQkosRUFtQkUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5CRixFQW9CRWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0FwQkosRUF5QkV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXpCRixFQTBCRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsb0JBREE7TUFFTEwsTUFBTSxFQUFFO0lBRkg7RUFESyxDQUFaLENBMUJKLEVBZ0NFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoQ0YsRUFpQ0VqQixFQUFFLENBQUMsU0FBRCxFQUFZO0lBQ1pHLEtBQUssRUFBRTtNQUNMLE1BQUksZUFEQztNQUVMaUIsR0FBRyxFQUFFLDZCQUZBO01BR0xMLE1BQU0sRUFBRTtJQUhIO0VBREssQ0FBWixDQWpDSixFQXdDRWhCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBeENGLEVBeUNFakIsRUFBRSxDQUFDLGVBQUQsRUFBa0I7SUFDbEJHLEtBQUssRUFBRTtNQUNMLE1BQUksYUFEQztNQUVMWSxNQUFNLEVBQUUsV0FGSDtNQUdMUSxNQUFNLEVBQUU7SUFISDtFQURXLENBQWxCLENBekNKLEVBZ0RFeEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoREYsRUFpREVqQixFQUFFLENBQUMsVUFBRCxFQUFhO0lBQUVHLEtBQUssRUFBRTtNQUFFcUIsRUFBRSxFQUFFLE1BQU47TUFBY0MsRUFBRSxFQUFFO0lBQWxCO0VBQVQsQ0FBYixDQWpESixFQWtERTFCLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbERGLEVBbURFakIsRUFBRSxDQUFDLGdCQUFELEVBQW1CO0lBQUVHLEtBQUssRUFBRTtNQUFFdUIsWUFBWSxFQUFFO0lBQWhCO0VBQVQsQ0FBbkIsQ0FuREosRUFvREUzQixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXBERixFQXFERWpCLEVBQUUsQ0FBQyxhQUFELEVBQWdCO0lBQ2hCRyxLQUFLLEVBQUU7TUFDTGlCLEdBQUcsRUFBRSxXQURBO01BRUxPLEVBQUUsRUFBRSxJQUZDO01BR0xDLEVBQUUsRUFBRSxHQUhDO01BSUxDLFFBQVEsRUFBRTtJQUpMO0VBRFMsQ0FBaEIsQ0FyREosRUE2REU5QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTdERixFQThERWpCLEVBQUUsQ0FBQyxlQUFELEVBQWtCO0lBQ2xCRyxLQUFLLEVBQUU7TUFDTG9CLE1BQU0sRUFBRTtJQURIO0VBRFcsQ0FBbEIsQ0E5REosRUFtRUV4QixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5FRixFQW9FRWpCLEVBQUUsQ0FBQyxTQUFELEVBQVk7SUFDWkcsS0FBSyxFQUFFO01BQ0xpQixHQUFHLEVBQUUsT0FEQTtNQUVMQyxJQUFJLEVBQUUsWUFGRDtNQUdMTixNQUFNLEVBQUU7SUFISDtFQURLLENBQVosQ0FwRUosQ0FiQSxFQXlGQSxDQXpGQSxDQW44QkosRUE4aENFaEIsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0E5aENGLEVBK2hDRWpCLEVBQUUsQ0FDQSxnQkFEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUNMTyxFQUFFLEVBQUUsK0JBREM7TUFFTG9CLEVBQUUsRUFBRSxTQUZDO01BR0xDLEVBQUUsRUFBRSxTQUhDO01BSUxDLEVBQUUsRUFBRSxTQUpDO01BS0xDLEVBQUUsRUFBRSxTQUxDO01BTUxDLGFBQWEsRUFBRTtJQU5WO0VBRFQsQ0FGQSxFQVlBLENBQ0VsQyxFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLE9BQVY7TUFBbUIsY0FBYztJQUFqQztFQURFLENBQVQsQ0FESixFQUlFcEMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FKRixFQUtFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFBRWdDLE1BQU0sRUFBRSxNQUFWO01BQWtCLGNBQWM7SUFBaEM7RUFERSxDQUFULENBTEosQ0FaQSxFQXFCQSxDQXJCQSxDQS9oQ0osRUFzakNFcEMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F0akNGLEVBdWpDRWpCLEVBQUUsQ0FDQSxnQkFEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUNMTyxFQUFFLEVBQUUsK0JBREM7TUFFTG9CLEVBQUUsRUFBRSxRQUZDO01BR0xDLEVBQUUsRUFBRSxTQUhDO01BSUxDLEVBQUUsRUFBRSxTQUpDO01BS0xDLEVBQUUsRUFBRSxTQUxDO01BTUxDLGFBQWEsRUFBRTtJQU5WO0VBRFQsQ0FGQSxFQVlBLENBQ0VsQyxFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLE9BQVY7TUFBbUIsY0FBYztJQUFqQztFQURFLENBQVQsQ0FESixFQUlFcEMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FKRixFQUtFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFBRWdDLE1BQU0sRUFBRSxPQUFWO01BQW1CLGNBQWM7SUFBakM7RUFERSxDQUFULENBTEosQ0FaQSxFQXFCQSxDQXJCQSxDQXZqQ0osRUE4a0NFcEMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0E5a0NGLEVBK2tDRWpCLEVBQUUsQ0FDQSxnQkFEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUNMTyxFQUFFLEVBQUUsK0JBREM7TUFFTG9CLEVBQUUsRUFBRSxTQUZDO01BR0xDLEVBQUUsRUFBRSxPQUhDO01BSUxDLEVBQUUsRUFBRSxTQUpDO01BS0xDLEVBQUUsRUFBRSxRQUxDO01BTUxDLGFBQWEsRUFBRTtJQU5WO0VBRFQsQ0FGQSxFQVlBLENBQ0VsQyxFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLE9BQVY7TUFBbUIsY0FBYztJQUFqQztFQURFLENBQVQsQ0FESixFQUlFcEMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FKRixFQUtFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFBRWdDLE1BQU0sRUFBRSxPQUFWO01BQW1CLGNBQWM7SUFBakM7RUFERSxDQUFULENBTEosRUFRRXBDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBUkYsRUFTRWpCLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQUVnQyxNQUFNLEVBQUUsTUFBVjtNQUFrQixjQUFjO0lBQWhDO0VBREUsQ0FBVCxDQVRKLEVBWUVwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQVpGLEVBYUVqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLEtBQVY7TUFBaUIsY0FBYztJQUEvQjtFQURFLENBQVQsQ0FiSixDQVpBLEVBNkJBLENBN0JBLENBL2tDSixFQThtQ0VwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTltQ0YsRUErbUNFakIsRUFBRSxDQUNBLGdCQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSwrQkFEQztNQUVMb0IsRUFBRSxFQUFFLFNBRkM7TUFHTEMsRUFBRSxFQUFFLFNBSEM7TUFJTEMsRUFBRSxFQUFFLFFBSkM7TUFLTEMsRUFBRSxFQUFFLFNBTEM7TUFNTEMsYUFBYSxFQUFFO0lBTlY7RUFEVCxDQUZBLEVBWUEsQ0FDRWxDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQUVnQyxNQUFNLEVBQUUsT0FBVjtNQUFtQixjQUFjO0lBQWpDO0VBREUsQ0FBVCxDQURKLEVBSUVwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQUpGLEVBS0VqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLE9BQVY7TUFBbUIsY0FBYztJQUFqQztFQURFLENBQVQsQ0FMSixDQVpBLEVBcUJBLENBckJBLENBL21DSixFQXNvQ0VwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXRvQ0YsRUF1b0NFakIsRUFBRSxDQUNBLGdCQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSwrQkFEQztNQUVMb0IsRUFBRSxFQUFFLFNBRkM7TUFHTEMsRUFBRSxFQUFFLFNBSEM7TUFJTEMsRUFBRSxFQUFFLFNBSkM7TUFLTEMsRUFBRSxFQUFFLFNBTEM7TUFNTEMsYUFBYSxFQUFFO0lBTlY7RUFEVCxDQUZBLEVBWUEsQ0FDRWxDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQUVnQyxNQUFNLEVBQUUsT0FBVjtNQUFtQixjQUFjO0lBQWpDO0VBREUsQ0FBVCxDQURKLEVBSUVwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQUpGLEVBS0VqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLE9BQVY7TUFBbUIsY0FBYztJQUFqQztFQURFLENBQVQsQ0FMSixDQVpBLEVBcUJBLENBckJBLENBdm9DSixFQThwQ0VwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTlwQ0YsRUErcENFakIsRUFBRSxDQUNBLGdCQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSwrQkFEQztNQUVMb0IsRUFBRSxFQUFFLFNBRkM7TUFHTEMsRUFBRSxFQUFFLFNBSEM7TUFJTEMsRUFBRSxFQUFFLFNBSkM7TUFLTEMsRUFBRSxFQUFFLFNBTEM7TUFNTEMsYUFBYSxFQUFFO0lBTlY7RUFEVCxDQUZBLEVBWUEsQ0FDRWxDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQUVnQyxNQUFNLEVBQUUsTUFBVjtNQUFrQixjQUFjO0lBQWhDO0VBREUsQ0FBVCxDQURKLEVBSUVwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQUpGLEVBS0VqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLE1BQVY7TUFBa0IsY0FBYztJQUFoQztFQURFLENBQVQsQ0FMSixDQVpBLEVBcUJBLENBckJBLENBL3BDSixFQXNyQ0VwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXRyQ0YsRUF1ckNFakIsRUFBRSxDQUNBLGdCQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQ0xPLEVBQUUsRUFBRSwrQkFEQztNQUVMb0IsRUFBRSxFQUFFLFNBRkM7TUFHTEMsRUFBRSxFQUFFLFNBSEM7TUFJTEMsRUFBRSxFQUFFLFNBSkM7TUFLTEMsRUFBRSxFQUFFLFFBTEM7TUFNTEMsYUFBYSxFQUFFO0lBTlY7RUFEVCxDQUZBLEVBWUEsQ0FDRWxDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFBRUcsS0FBSyxFQUFFO01BQUUsY0FBYztJQUFoQjtFQUFULENBQVQsQ0FESixFQUVFSixHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQUZGLEVBR0VqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLE1BQVY7TUFBa0IsY0FBYztJQUFoQztFQURFLENBQVQsQ0FISixFQU1FcEMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FORixFQU9FakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFBRWdDLE1BQU0sRUFBRSxPQUFWO01BQW1CLGNBQWM7SUFBakM7RUFERSxDQUFULENBUEosRUFVRXBDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBVkYsRUFXRWpCLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQUVnQyxNQUFNLEVBQUUsT0FBVjtNQUFtQixjQUFjO0lBQWpDO0VBREUsQ0FBVCxDQVhKLENBWkEsRUEyQkEsQ0EzQkEsQ0F2ckNKLEVBb3RDRXBDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBcHRDRixFQXF0Q0VqQixFQUFFLENBQ0EsZ0JBREEsRUFFQTtJQUNFRyxLQUFLLEVBQUU7TUFDTE8sRUFBRSxFQUFFLCtCQURDO01BRUxvQixFQUFFLEVBQUUsU0FGQztNQUdMQyxFQUFFLEVBQUUsU0FIQztNQUlMQyxFQUFFLEVBQUUsU0FKQztNQUtMQyxFQUFFLEVBQUUsUUFMQztNQU1MQyxhQUFhLEVBQUU7SUFOVjtFQURULENBRkEsRUFZQSxDQUNFbEMsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUFFRyxLQUFLLEVBQUU7TUFBRSxjQUFjO0lBQWhCO0VBQVQsQ0FBVCxDQURKLEVBRUVKLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBRkYsRUFHRWpCLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQUVnQyxNQUFNLEVBQUUsTUFBVjtNQUFrQixjQUFjO0lBQWhDO0VBREUsQ0FBVCxDQUhKLEVBTUVwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQU5GLEVBT0VqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUFFZ0MsTUFBTSxFQUFFLE9BQVY7TUFBbUIsY0FBYztJQUFqQztFQURFLENBQVQsQ0FQSixFQVVFcEMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FWRixFQVdFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFBRWdDLE1BQU0sRUFBRSxPQUFWO01BQW1CLGNBQWM7SUFBakM7RUFERSxDQUFULENBWEosQ0FaQSxFQTJCQSxDQTNCQSxDQXJ0Q0osRUFrdkNFcEMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FsdkNGLEVBbXZDRWpCLEVBQUUsQ0FDQSxnQkFEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUNMTyxFQUFFLEVBQUUsK0JBREM7TUFFTG9CLEVBQUUsRUFBRSxTQUZDO01BR0xDLEVBQUUsRUFBRSxTQUhDO01BSUxDLEVBQUUsRUFBRSxRQUpDO01BS0xDLEVBQUUsRUFBRSxTQUxDO01BTUxDLGFBQWEsRUFBRTtJQU5WO0VBRFQsQ0FGQSxFQVlBLENBQ0VsQyxFQUFFLENBQUMsTUFBRCxFQUFTO0lBQUVHLEtBQUssRUFBRTtNQUFFLGNBQWM7SUFBaEI7RUFBVCxDQUFULENBREosRUFFRUosR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FGRixFQUdFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFBRWdDLE1BQU0sRUFBRSxHQUFWO01BQWUsY0FBYztJQUE3QjtFQURFLENBQVQsQ0FISixDQVpBLEVBbUJBLENBbkJBLENBbnZDSixFQXd3Q0VwQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXh3Q0YsRUF5d0NFakIsRUFBRSxDQUNBLFVBREEsRUFFQTtJQUFFRyxLQUFLLEVBQUU7TUFBRU8sRUFBRSxFQUFFO0lBQU47RUFBVCxDQUZBLEVBR0EsQ0FDRVYsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEksS0FBSyxFQUFFLDRCQURGO01BRUxDLElBQUksRUFBRSxNQUZEO01BR0w0QixDQUFDLEVBQUU7SUFIRTtFQURFLENBQVQsQ0FESixDQUhBLENBendDSixDQUZBLEVBeXhDQSxDQXp4Q0EsQ0FESixFQTR4Q0VyQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTV4Q0YsRUE2eENFakIsRUFBRSxDQUNBLEdBREEsRUFFQTtJQUNFRyxLQUFLLEVBQUU7TUFDTCxhQUFhLHFDQURSO01BRUxrQyxNQUFNLEVBQUU7SUFGSDtFQURULENBRkEsRUFRQSxDQUNFckMsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEssSUFBSSxFQUFFLFNBREQ7TUFFTDRCLENBQUMsRUFBRTtJQUZFO0VBREUsQ0FBVCxDQURKLEVBT0VyQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQVBGLEVBUUVqQixFQUFFLENBQ0EsR0FEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUFFa0MsTUFBTSxFQUFFO0lBQVY7RUFEVCxDQUZBLEVBS0EsQ0FDRXJDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxxQ0FERDtNQUVMNEIsQ0FBQyxFQUFFO0lBRkU7RUFERSxDQUFULENBREosQ0FMQSxDQVJKLEVBc0JFckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F0QkYsRUF1QkVqQixFQUFFLENBQ0EsR0FEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUFFa0MsTUFBTSxFQUFFO0lBQVY7RUFEVCxDQUZBLEVBS0EsQ0FDRXJDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxxQ0FERDtNQUVMNEIsQ0FBQyxFQUFFO0lBRkU7RUFERSxDQUFULENBREosQ0FMQSxDQXZCSixFQXFDRXJDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBckNGLEVBc0NFakIsRUFBRSxDQUNBLEdBREEsRUFFQTtJQUNFRyxLQUFLLEVBQUU7TUFBRWtDLE1BQU0sRUFBRTtJQUFWO0VBRFQsQ0FGQSxFQUtBLENBQ0VyQyxFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUNMSyxJQUFJLEVBQUUscUNBREQ7TUFFTDRCLENBQUMsRUFBRTtJQUZFO0VBREUsQ0FBVCxDQURKLENBTEEsQ0F0Q0osRUFvREVyQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXBERixFQXFERWpCLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxTQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0FyREosRUEyREVyQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTNERixFQTRERWpCLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxTQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0E1REosRUFrRUVyQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQWxFRixFQW1FRWpCLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxTQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0FuRUosRUF5RUVyQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQXpFRixFQTBFRWpCLEVBQUUsQ0FDQSxHQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQUVrQyxNQUFNLEVBQUU7SUFBVjtFQURULENBRkEsRUFLQSxDQUNFckMsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEssSUFBSSxFQUFFLHFDQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0FESixDQUxBLENBMUVKLEVBd0ZFckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F4RkYsRUF5RkVqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUNMSyxJQUFJLEVBQUUsU0FERDtNQUVMNEIsQ0FBQyxFQUFFO0lBRkU7RUFERSxDQUFULENBekZKLEVBK0ZFckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0EvRkYsRUFnR0VqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUNMSyxJQUFJLEVBQUUsTUFERDtNQUVMNEIsQ0FBQyxFQUFFO0lBRkU7RUFERSxDQUFULENBaEdKLEVBc0dFckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F0R0YsRUF1R0VqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUNMSyxJQUFJLEVBQUUsU0FERDtNQUVMNEIsQ0FBQyxFQUFFO0lBRkU7RUFERSxDQUFULENBdkdKLEVBNkdFckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0E3R0YsRUE4R0VqQixFQUFFLENBQ0EsR0FEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUFFa0MsTUFBTSxFQUFFO0lBQVY7RUFEVCxDQUZBLEVBS0EsQ0FDRXJDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxxQ0FERDtNQUVMNEIsQ0FBQyxFQUFFO0lBRkU7RUFERSxDQUFULENBREosQ0FMQSxDQTlHSixFQTRIRXJDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBNUhGLEVBNkhFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEssSUFBSSxFQUFFLHFDQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0E3SEosRUFtSUVyQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQW5JRixFQW9JRWpCLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxTQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0FwSUosRUEwSUVyQyxHQUFHLENBQUNrQixFQUFKLENBQU8sR0FBUCxDQTFJRixFQTJJRWpCLEVBQUUsQ0FDQSxHQURBLEVBRUE7SUFDRUcsS0FBSyxFQUFFO01BQUVrQyxNQUFNLEVBQUU7SUFBVjtFQURULENBRkEsRUFLQSxDQUNFckMsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEssSUFBSSxFQUFFLHFDQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0FESixFQU9FckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FQRixFQVFFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEssSUFBSSxFQUFFLHFDQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0FSSixDQUxBLENBM0lKLEVBZ0tFckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FoS0YsRUFpS0VqQixFQUFFLENBQ0EsR0FEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUNMa0MsTUFBTSxFQUFFLHNDQURIO01BRUw3QixJQUFJLEVBQUU7SUFGRDtFQURULENBRkEsRUFRQSxDQUNFUixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUNMaUMsQ0FBQyxFQUFFO0lBREU7RUFERSxDQUFULENBREosRUFNRXJDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBTkYsRUFPRWpCLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xpQyxDQUFDLEVBQUU7SUFERTtFQURFLENBQVQsQ0FQSixDQVJBLENBaktKLEVBdUxFckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F2TEYsRUF3TEVqQixFQUFFLENBQ0EsR0FEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUFFa0MsTUFBTSxFQUFFO0lBQVY7RUFEVCxDQUZBLEVBS0EsQ0FDRXJDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxTQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0FESixDQUxBLENBeExKLEVBc01FckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0F0TUYsRUF1TUVqQixFQUFFLENBQ0EsR0FEQSxFQUVBO0lBQ0VHLEtBQUssRUFBRTtNQUFFa0MsTUFBTSxFQUFFO0lBQVY7RUFEVCxDQUZBLEVBS0EsQ0FDRXJDLEVBQUUsQ0FBQyxNQUFELEVBQVM7SUFDVEcsS0FBSyxFQUFFO01BQ0xLLElBQUksRUFBRSxNQUREO01BRUw0QixDQUFDLEVBQUU7SUFGRTtFQURFLENBQVQsQ0FESixDQUxBLENBdk1KLEVBcU5FckMsR0FBRyxDQUFDa0IsRUFBSixDQUFPLEdBQVAsQ0FyTkYsRUFzTkVqQixFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUNMSyxJQUFJLEVBQUUscUNBREQ7TUFFTDRCLENBQUMsRUFBRTtJQUZFO0VBREUsQ0FBVCxDQXROSixFQTRORXJDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBNU5GLEVBNk5FakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEssSUFBSSxFQUFFLFNBREQ7TUFFTDRCLENBQUMsRUFBRTtJQUZFO0VBREUsQ0FBVCxDQTdOSixFQW1PRXJDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbk9GLEVBb09FakIsRUFBRSxDQUNBLEdBREEsRUFFQTtJQUNFRyxLQUFLLEVBQUU7TUFBRWtDLE1BQU0sRUFBRTtJQUFWO0VBRFQsQ0FGQSxFQUtBLENBQ0VyQyxFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUNMSyxJQUFJLEVBQUUsU0FERDtNQUVMNEIsQ0FBQyxFQUFFO0lBRkU7RUFERSxDQUFULENBREosQ0FMQSxDQXBPSixFQWtQRXJDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBbFBGLEVBbVBFakIsRUFBRSxDQUNBLEdBREEsRUFFQTtJQUNFRyxLQUFLLEVBQUU7TUFBRWtDLE1BQU0sRUFBRTtJQUFWO0VBRFQsQ0FGQSxFQUtBLENBQ0VyQyxFQUFFLENBQUMsTUFBRCxFQUFTO0lBQ1RHLEtBQUssRUFBRTtNQUNMSyxJQUFJLEVBQUUsU0FERDtNQUVMNEIsQ0FBQyxFQUFFO0lBRkU7RUFERSxDQUFULENBREosQ0FMQSxDQW5QSixFQWlRRXJDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBalFGLEVBa1FFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEssSUFBSSxFQUFFLFNBREQ7TUFFTDRCLENBQUMsRUFBRTtJQUZFO0VBREUsQ0FBVCxDQWxRSixFQXdRRXJDLEdBQUcsQ0FBQ2tCLEVBQUosQ0FBTyxHQUFQLENBeFFGLEVBeVFFakIsRUFBRSxDQUFDLE1BQUQsRUFBUztJQUNURyxLQUFLLEVBQUU7TUFDTEssSUFBSSxFQUFFLE1BREQ7TUFFTDRCLENBQUMsRUFBRTtJQUZFO0VBREUsQ0FBVCxDQXpRSixDQVJBLENBN3hDSixDQVpBLENBREosQ0FOQSxDQUQ4QyxDQUFoRCxDQURhLENBQVIsQ0FBVDtBQWlsREQsQ0FwbEREOztBQXFsREEsSUFBSUUsZUFBZSxHQUFHLEVBQXRCO0FBQ0F4QyxNQUFNLENBQUN5QyxhQUFQLEdBQXVCLElBQXZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvSWNvbnMvZGVzY3JpcHRpb24tMS52dWU/YmE1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICB2YXIgX3ZtID0gdGhpcyxcbiAgICBfYyA9IF92bS5fc2VsZi5fY1xuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY3NzLXI4dHplMiBldTRvYTF3MFwiIH0sIFtcbiAgICAgIF9jKFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwiY3NzLWoyZjFiaSBldTRvYTF3MFwiLFxuICAgICAgICAgIGF0dHJzOiB7IFwiZGF0YS10ZXN0aWRcIjogXCJqb2ItZGVzY3JpcHRpb24tc2hlZXQtaGVhZGVyLWltYWdlXCIgfSxcbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJzdmdcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgd2lkdGg6IF92bS53aWR0aCwgaGVpZ2h0OiBfdm0uaGVpZ2h0IH0sXG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgICAgICAgICAgICBmaWxsOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICB2aWV3Qm94OiBcIjAgMCA1ODUgMzc5XCIsXG4gICAgICAgICAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgICAgICAgICAgICBcImRhdGEtdGVzdGlkXCI6IFwiaXBsLWlsbHVzdHJhdGlvbi1oZXJvXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImRlZnNcIixcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJmaWx0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotMjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFwiMCVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiMCVcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZVR1cmJ1bGVuY2VcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUZyZXF1ZW5jeTogXCIyLjVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtT2N0YXZlczogXCI0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJub2lzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVkOiBcIjE0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZlQ29tcG9uZW50VHJhbnNmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaW46IFwibm9pc2VcIiwgcmVzdWx0OiBcIm9wYWNpdHlcIiB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVGdW5jQVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2xvcGU6IFwiMC42XCIsIHR5cGU6IFwibGluZWFyXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwib3BhY2l0eVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiU291cmNlR3JhcGhpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcIm92ZXJsYXlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImJsZW5kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImZpbHRlclwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImlwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0yMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiMTMxLjM3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMTc5Ljc1MlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogXCI2MC4zMjhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiMTc1LjM1NVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIjogXCJzUkdCXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlRmxvb2RcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmbG9vZC1vcGFjaXR5XCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi0zXCIsIGR5OiBcIjNcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIxLjVcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwLjMgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJlZmZlY3QxX2Ryb3BTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlR3JhcGhpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiZWZmZWN0MV9kcm9wU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJzaGFwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAxMjcgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVPZmZzZXRcIiwgeyBhdHRyczogeyBkeDogXCItMS41XCIsIGR5OiBcIjFcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIwLjc1XCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb21wb3NpdGVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrMjogXCItMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrMzogXCIxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBcImFyaXRobWV0aWNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMSAwIDAgMCAwIDEgMCAwIDAgMCAxIDAgMCAwIDAuMyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJzaGFwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInNvZnQtbGlnaHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImVmZmVjdDJfaW5uZXJTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTE5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCI3MS40OTNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCI3Mi45MjNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFwiNDYuOTRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiMzE1LjgyMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIjogXCJzUkdCXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlRmxvb2RcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmbG9vZC1vcGFjaXR5XCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi00XCIsIGR5OiBcIjRcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIzXCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMC4zIDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcIkJhY2tncm91bmRJbWFnZUZpeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiZWZmZWN0MV9kcm9wU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUdyYXBoaWNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcImVmZmVjdDFfZHJvcFNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwic2hhcGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMTI3IDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlT2Zmc2V0XCIsIHsgYXR0cnM6IHsgZHg6IFwiLTEuNVwiLCBkeTogXCIxXCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVHYXVzc2lhbkJsdXJcIiwgeyBhdHRyczogeyBzdGREZXZpYXRpb246IFwiMC43NVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29tcG9zaXRlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazI6IFwiLTFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazM6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogXCJhcml0aG1ldGljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDEgMCAwIDAgMCAxIDAgMCAwIDAgMSAwIDAgMCAwLjMgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwic2hhcGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJzb2Z0LWxpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJlZmZlY3QyX2lubmVyU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImZpbHRlclwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImlwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0xOFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiMTU0Ljk4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMTQxLjcxN1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogXCIxNzQuNzQ4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBcIjU0LjIzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyc1wiOiBcInNSR0JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclVuaXRzOiBcInVzZXJTcGFjZU9uVXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVGbG9vZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImZsb29kLW9wYWNpdHlcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJCYWNrZ3JvdW5kSW1hZ2VGaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMTI3IDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlT2Zmc2V0XCIsIHsgYXR0cnM6IHsgZHg6IFwiLTNcIiwgZHk6IFwiM1wiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlR2F1c3NpYW5CbHVyXCIsIHsgYXR0cnM6IHsgc3RkRGV2aWF0aW9uOiBcIjEuNVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAuMyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJCYWNrZ3JvdW5kSW1hZ2VGaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImVmZmVjdDFfZHJvcFNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VHcmFwaGljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJlZmZlY3QxX2Ryb3BTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcInNoYXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi0xLjVcIiwgZHk6IFwiMVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlR2F1c3NpYW5CbHVyXCIsIHsgYXR0cnM6IHsgc3RkRGV2aWF0aW9uOiBcIjAuNzVcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbXBvc2l0ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGsyOiBcIi0xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGszOiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6IFwiYXJpdGhtZXRpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAxIDAgMCAwIDAgMSAwIDAgMCAwIDEgMCAwIDAgMC4zIDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcInNoYXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwic29mdC1saWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiZWZmZWN0Ml9pbm5lclNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJmaWx0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotMTdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjExMy42MTFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCIxMzQuOTkyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBcIjE4OS41MjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiMjMuNTIxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyc1wiOiBcInNSR0JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclVuaXRzOiBcInVzZXJTcGFjZU9uVXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVGbG9vZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImZsb29kLW9wYWNpdHlcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJCYWNrZ3JvdW5kSW1hZ2VGaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMTI3IDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlT2Zmc2V0XCIsIHsgYXR0cnM6IHsgZHg6IFwiLTNcIiwgZHk6IFwiM1wiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlR2F1c3NpYW5CbHVyXCIsIHsgYXR0cnM6IHsgc3RkRGV2aWF0aW9uOiBcIjEuNVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAuMyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJCYWNrZ3JvdW5kSW1hZ2VGaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImVmZmVjdDFfZHJvcFNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VHcmFwaGljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJlZmZlY3QxX2Ryb3BTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcInNoYXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi0xLjVcIiwgZHk6IFwiMVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlR2F1c3NpYW5CbHVyXCIsIHsgYXR0cnM6IHsgc3RkRGV2aWF0aW9uOiBcIjAuNzVcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbXBvc2l0ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGsyOiBcIi0xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGszOiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6IFwiYXJpdGhtZXRpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAxIDAgMCAwIDAgMSAwIDAgMCAwIDEgMCAwIDAgMC4zIDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcInNoYXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwic29mdC1saWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiZWZmZWN0Ml9pbm5lclNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJmaWx0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotMTZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjI1My4xNDNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCIyMTEuNTQ2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBcIjcwLjEyMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogXCIxNzMuMzM2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyc1wiOiBcInNSR0JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclVuaXRzOiBcInVzZXJTcGFjZU9uVXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVGbG9vZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImZsb29kLW9wYWNpdHlcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJCYWNrZ3JvdW5kSW1hZ2VGaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMTI3IDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlT2Zmc2V0XCIsIHsgYXR0cnM6IHsgZHg6IFwiLTNcIiwgZHk6IFwiM1wiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlR2F1c3NpYW5CbHVyXCIsIHsgYXR0cnM6IHsgc3RkRGV2aWF0aW9uOiBcIjEuNVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAuMyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJCYWNrZ3JvdW5kSW1hZ2VGaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImVmZmVjdDFfZHJvcFNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VHcmFwaGljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJlZmZlY3QxX2Ryb3BTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcInNoYXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi0xLjVcIiwgZHk6IFwiMVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlR2F1c3NpYW5CbHVyXCIsIHsgYXR0cnM6IHsgc3RkRGV2aWF0aW9uOiBcIjAuNzVcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbXBvc2l0ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGsyOiBcIi0xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGszOiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6IFwiYXJpdGhtZXRpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAxIDAgMCAwIDAgMSAwIDAgMCAwIDEgMCAwIDAgMC4zIDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcInNoYXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwic29mdC1saWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiZWZmZWN0Ml9pbm5lclNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJmaWx0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotMTVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjExNy41MjJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCIxODguNzg1XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBcIjMxNC45MjJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiMTQxLjI2OVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIjogXCJzUkdCXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlRmxvb2RcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmbG9vZC1vcGFjaXR5XCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi0zXCIsIGR5OiBcIjNcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIxLjVcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwLjMgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJlZmZlY3QxX2Ryb3BTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlR3JhcGhpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiZWZmZWN0MV9kcm9wU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJzaGFwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAxMjcgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVPZmZzZXRcIiwgeyBhdHRyczogeyBkeDogXCItMS41XCIsIGR5OiBcIjFcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIwLjc1XCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb21wb3NpdGVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrMjogXCItMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrMzogXCIxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBcImFyaXRobWV0aWNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMSAwIDAgMCAwIDEgMCAwIDAgMCAxIDAgMCAwIDAuMyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJzaGFwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInNvZnQtbGlnaHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImVmZmVjdDJfaW5uZXJTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTE0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCI4OC44NTlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCIyNi4zMTFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFwiMjAwLjgwNlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogXCIxNjAuM1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIjogXCJzUkdCXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlRmxvb2RcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmbG9vZC1vcGFjaXR5XCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi0xXCIsIGR5OiBcIjFcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIxLjVcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwLjMgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJlZmZlY3QxX2Ryb3BTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlR3JhcGhpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiZWZmZWN0MV9kcm9wU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJzaGFwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAxMjcgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVPZmZzZXRcIiwgeyBhdHRyczogeyBkeDogXCItMS41XCIsIGR5OiBcIjFcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIwLjc1XCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb21wb3NpdGVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrMjogXCItMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrMzogXCIxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBcImFyaXRobWV0aWNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMSAwIDAgMCAwIDEgMCAwIDAgMCAxIDAgMCAwIDAuMyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJzaGFwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInNvZnQtbGlnaHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImVmZmVjdDJfaW5uZXJTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTEzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCIxNTEuMzQzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMTY2LjkxM1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogXCIyNDAuMjg3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBcIjE3NS4yMzdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzXCI6IFwic1JHQlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyVW5pdHM6IFwidXNlclNwYWNlT25Vc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUZsb29kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmxvb2Qtb3BhY2l0eVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcIkJhY2tncm91bmRJbWFnZUZpeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAxMjcgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVPZmZzZXRcIiwgeyBhdHRyczogeyBkeDogXCItM1wiLCBkeTogXCIzXCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVHYXVzc2lhbkJsdXJcIiwgeyBhdHRyczogeyBzdGREZXZpYXRpb246IFwiMS41XCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMC4zIDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcIkJhY2tncm91bmRJbWFnZUZpeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiZWZmZWN0MV9kcm9wU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUdyYXBoaWNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcImVmZmVjdDFfZHJvcFNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwic2hhcGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMTI3IDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlT2Zmc2V0XCIsIHsgYXR0cnM6IHsgZHg6IFwiLTEuNVwiLCBkeTogXCIxXCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVHYXVzc2lhbkJsdXJcIiwgeyBhdHRyczogeyBzdGREZXZpYXRpb246IFwiMC43NVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29tcG9zaXRlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazI6IFwiLTFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazM6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogXCJhcml0aG1ldGljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDEgMCAwIDAgMCAxIDAgMCAwIDAgMSAwIDAgMCAwLjMgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwic2hhcGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJzb2Z0LWxpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJlZmZlY3QyX2lubmVyU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImZpbHRlclwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImlwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0xMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiMzYuMDM5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiNjMuMTE3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBcIjM3Ny45NDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IFwiMTMwLjA3M1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIjogXCJzUkdCXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlRmxvb2RcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmbG9vZC1vcGFjaXR5XCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi0xXCIsIGR5OiBcIjFcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIwLjVcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwLjMgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiQmFja2dyb3VuZEltYWdlRml4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJlZmZlY3QxX2Ryb3BTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlR3JhcGhpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiZWZmZWN0MV9kcm9wU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJzaGFwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAxMjcgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVPZmZzZXRcIiwgeyBhdHRyczogeyBkeDogXCItMS41XCIsIGR5OiBcIjFcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUdhdXNzaWFuQmx1clwiLCB7IGF0dHJzOiB7IHN0ZERldmlhdGlvbjogXCIwLjc1XCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb21wb3NpdGVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrMjogXCItMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrMzogXCIxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBcImFyaXRobWV0aWNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMSAwIDAgMCAwIDEgMCAwIDAgMCAxIDAgMCAwIDAuMyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJzaGFwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBcInNvZnQtbGlnaHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImVmZmVjdDJfaW5uZXJTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZmlsdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTExXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCIxMi43MjdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCIyNy4wMzZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFwiMjc5LjQyMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogXCIxMTkuMjkxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyc1wiOiBcInNSR0JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclVuaXRzOiBcInVzZXJTcGFjZU9uVXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVGbG9vZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImZsb29kLW9wYWNpdHlcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJCYWNrZ3JvdW5kSW1hZ2VGaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMTI3IDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlT2Zmc2V0XCIsIHsgYXR0cnM6IHsgZHg6IFwiLTFcIiwgZHk6IFwiMVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlR2F1c3NpYW5CbHVyXCIsIHsgYXR0cnM6IHsgc3RkRGV2aWF0aW9uOiBcIjAuNVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAuMyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJCYWNrZ3JvdW5kSW1hZ2VGaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImVmZmVjdDFfZHJvcFNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VHcmFwaGljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJlZmZlY3QxX2Ryb3BTaGFkb3dfMjk1XzE5MzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcInNoYXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIjAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDEyNyAwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZU9mZnNldFwiLCB7IGF0dHJzOiB7IGR4OiBcIi0xLjVcIiwgZHk6IFwiMVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlR2F1c3NpYW5CbHVyXCIsIHsgYXR0cnM6IHsgc3RkRGV2aWF0aW9uOiBcIjAuNzVcIiB9IH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbXBvc2l0ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGsyOiBcIi0xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGszOiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6IFwiYXJpdGhtZXRpY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAxIDAgMCAwIDAgMSAwIDAgMCAwIDEgMCAwIDAgMC4zIDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcInNoYXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwic29mdC1saWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiZWZmZWN0Ml9pbm5lclNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJmaWx0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotMTBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjQwLjEyMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBcIjIwLjJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFwiMzY5LjY3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBcIjIwNS45NTFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzXCI6IFwic1JHQlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyVW5pdHM6IFwidXNlclNwYWNlT25Vc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUZsb29kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmxvb2Qtb3BhY2l0eVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcIkJhY2tncm91bmRJbWFnZUZpeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjogXCJTb3VyY2VBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiaGFyZEFscGhhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAxMjcgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVPZmZzZXRcIiwgeyBhdHRyczogeyBkeDogXCItMVwiLCBkeTogXCIxXCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVHYXVzc2lhbkJsdXJcIiwgeyBhdHRyczogeyBzdGREZXZpYXRpb246IFwiMC41XCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVDb2xvck1hdHJpeFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMC4zIDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQmxlbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcIkJhY2tncm91bmRJbWFnZUZpeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwiZWZmZWN0MV9kcm9wU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUJsZW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluOiBcIlNvdXJjZUdyYXBoaWNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW4yOiBcImVmZmVjdDFfZHJvcFNoYWRvd18yOTVfMTkzMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IFwic2hhcGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29sb3JNYXRyaXhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW46IFwiU291cmNlQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBcImhhcmRBbHBoYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMTI3IDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlT2Zmc2V0XCIsIHsgYXR0cnM6IHsgZHg6IFwiLTEuNVwiLCBkeTogXCIxXCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVHYXVzc2lhbkJsdXJcIiwgeyBhdHRyczogeyBzdGREZXZpYXRpb246IFwiMC43NVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImZlQ29tcG9zaXRlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluMjogXCJoYXJkQWxwaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazI6IFwiLTFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazM6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogXCJhcml0aG1ldGljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJmZUNvbG9yTWF0cml4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCIwIDAgMCAwIDEgMCAwIDAgMCAxIDAgMCAwIDAgMSAwIDAgMCAwLjMgMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiZmVCbGVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbjI6IFwic2hhcGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJzb2Z0LWxpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJlZmZlY3QyX2lubmVyU2hhZG93XzI5NV8xOTMwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImxpbmVhckdyYWRpZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBcIi0xOS4wMDRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBcIjI3My40MTZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBcIjQ2Ny4wMTVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBcIjE0Mi4yNzhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50VW5pdHM6IFwidXNlclNwYWNlT25Vc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJzdG9wXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG9mZnNldDogXCIwLjQ0NFwiLCBcInN0b3AtY29sb3JcIjogXCIjNEYxQzM2XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC44OFwiLCBcInN0b3AtY29sb3JcIjogXCIjNzQyMzRFXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJsaW5lYXJHcmFkaWVudFwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImlwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi04XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB4MTogXCI4Ni44NTlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBcIjEzMy40MzhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBcIjQxMC4wNzFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBcIjMxNC42MTZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50VW5pdHM6IFwidXNlclNwYWNlT25Vc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJzdG9wXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG9mZnNldDogXCIwLjA1MlwiLCBcInN0b3AtY29sb3JcIjogXCIjREY3ODM4XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC41OTlcIiwgXCJzdG9wLWNvbG9yXCI6IFwiI0YwOTk2RlwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwibGluZWFyR3JhZGllbnRcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotN1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDE6IFwiMjU1LjY2OVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDI6IFwiMzcwLjdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBcIjI1OS43MzFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBcIjczLjE5MlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInN0b3BcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb2Zmc2V0OiBcIjAuMDUyXCIsIFwic3RvcC1jb2xvclwiOiBcIiNERjc4MzhcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJzdG9wXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG9mZnNldDogXCIwLjQ1NVwiLCBcInN0b3AtY29sb3JcIjogXCIjRjA5OTZGXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC42N1wiLCBcInN0b3AtY29sb3JcIjogXCIjRjM5RTc4XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC44XCIsIFwic3RvcC1jb2xvclwiOiBcIiNGRkIyODZcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImxpbmVhckdyYWRpZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBcIjI4MC4zNjhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBcIjIwOC45NTNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBcIjI3LjY3OVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTI6IFwiMTQ3LjI0N1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInN0b3BcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb2Zmc2V0OiBcIjAuNjgyXCIsIFwic3RvcC1jb2xvclwiOiBcIiM1OTU5NTlcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJzdG9wXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG9mZnNldDogXCIwLjk0OFwiLCBcInN0b3AtY29sb3JcIjogXCIjMkQyRDJEXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJsaW5lYXJHcmFkaWVudFwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImlwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi01XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB4MTogXCItOTIuMDk0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB4MjogXCIxOTguODY2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5MTogXCI1MTguMzY0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5MjogXCItMjAuMDY3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudFVuaXRzOiBcInVzZXJTcGFjZU9uVXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC4wODlcIiwgXCJzdG9wLWNvbG9yXCI6IFwiIzRGMUMzNlwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInN0b3BcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb2Zmc2V0OiBcIjAuNTA1XCIsIFwic3RvcC1jb2xvclwiOiBcIiM3NDIzNEVcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImxpbmVhckdyYWRpZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBcIjI4My42NTNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBcIjI4My42NTNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBcIjI0My44MDFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBcIjM3OC44ODJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50VW5pdHM6IFwidXNlclNwYWNlT25Vc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJzdG9wXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG9mZnNldDogXCIwLjM3XCIsIFwic3RvcC1jb2xvclwiOiBcIiM0RjFDMzZcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJzdG9wXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG9mZnNldDogXCIwLjg4XCIsIFwic3RvcC1jb2xvclwiOiBcIiM3NDIzNEVcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImxpbmVhckdyYWRpZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBcIjM4Ny4yODdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBcIjQzNy4wOTRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBcIjMyNC4xMzFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBcIjgyLjg3MlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInN0b3BcIiwgeyBhdHRyczogeyBcInN0b3AtY29sb3JcIjogXCIjREY3ODM4XCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC40M1wiLCBcInN0b3AtY29sb3JcIjogXCIjRjM5RTc4XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC43MzNcIiwgXCJzdG9wLWNvbG9yXCI6IFwiI0Y4QTY3RFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInN0b3BcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb2Zmc2V0OiBcIjAuODU2XCIsIFwic3RvcC1jb2xvclwiOiBcIiNGRkIyODZcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImxpbmVhckdyYWRpZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBcIjM4Ny4yODdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBcIjQzNy4wOTRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBcIjMyNC4xMzFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBcIjgyLjg3MlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInN0b3BcIiwgeyBhdHRyczogeyBcInN0b3AtY29sb3JcIjogXCIjREY3ODM4XCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC40M1wiLCBcInN0b3AtY29sb3JcIjogXCIjRjM5RTc4XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMC43MzNcIiwgXCJzdG9wLWNvbG9yXCI6IFwiI0Y4QTY3RFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInN0b3BcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb2Zmc2V0OiBcIjAuODU2XCIsIFwic3RvcC1jb2xvclwiOiBcIiNGRkIyODZcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImxpbmVhckdyYWRpZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBcIjQyNS4wNDFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBcIjM5Mi42NDFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBcIjIwNy42MlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTI6IFwiMTg5LjU3NVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRVbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInN0b3BcIiwgeyBhdHRyczogeyBcInN0b3AtY29sb3JcIjogXCIjZmZmXCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwic3RvcFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvZmZzZXQ6IFwiMVwiLCBcInN0b3AtY29sb3JcIjogXCIjQjRCMkIxXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlwUGF0aFwiLFxuICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiBcImlwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0wXCIgfSB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkOiBcIm00OTQuMDY0Ljk3MiA5MC4xMDcgMzc3LjkxSC4xMjhsNzguNjQ3LTIzNS4yNDggMTIwLjM2Mi00MS4zNDctMy4zNTMtNi4xMThjLTIuMjg5LTExLjQ0IDEwLjgyMy0yNi43NTEgMjAuNjQ0LTMzLjA3M2wtNS44OTMtMi43NjJjMi43MzctNy40ODcgMTYuMzEtMjQuMjQ2IDIzLjg5NS0yNi42NTZsMzAuNDI0LTkuNjkzYTI5LjkwMiAyOS45MDIgMCAwIDEgMjcuNDg1IDkuNDYzbDcuNzIxIDcuNzE2YzQuNTc4IDUuMTA0IDMuOTY5IDEzLjAxLTEuMzU1IDE3LjMyOWwtMS4xMjcuMzA4YTQ4LjMyMSA0OC4zMjEgMCAwIDEgNy41NjYgNy4wN0w0OTQuMDY0Ljk3elwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJnXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlwLXBhdGhcIjogXCJ1cmwoI2lwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0wKVwiLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IFwidXJsKCNpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotMjEpXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBcIiM3QkMwQUVcIixcbiAgICAgICAgICAgICAgICAgICAgICBkOiBcIk0uMTI4IDM3OC44ODJINTg0LjE3TDQ5NC4wNjQuOTcyIDc4Ljc3NSAxNDMuNjM0LjEyOCAzNzguODgyelwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmlsdGVyOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTIwKVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCJ1cmwoI2lwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi05KVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkOiBcIk0xOTEuNDkgMTkwLjI4NmMxLjc0OC05LjcyLTcuODAyLTE3LjYxMy0xNy4wMTMtMTQuMDY2LTkuMDIyIDMuNDc5LTE4LjU4NSA2Ljk5OS0yMy40MjEgOC4yNTgtMTAuNjc0IDIuNzg5LTI2LjY5OSAyNS42NjgtMzEuMjc4IDM3LjEwOC00LjU3OCAxMS40MzktMjguOTA2IDUyLjE2MS0yOC45MDYgNTIuMTYxcy0xMS41MTQgMTEuODczLTE5LjkgMjMuMzEyYy0xLjQyMiAxLjk1LTIuNDc4IDQuMzMyLTMuMjM3IDYuOTQ1LTYuNzQ1IDIzLjEyMyAxMS42NzcgNDYuNDc2IDM1LjczNCA0NS4wNDEuNjEtLjA0MSAxLjIxOS0uMDgxIDEuODI5LS4xNDkgMjIuMTItMi4yODggNjcuMTItNTIuNjA4IDY3LjEyLTUyLjYwOGwxOS4wNzItMTA2LjAwMnpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmlsdGVyOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTE5KVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCJ1cmwoI2lwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi04KVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkOiBcIm05OC44MzggMzIwLjk2Ni0uNDM0LS4yNDRjLTEwLjM0OS01LjkwMy0yMy41MTUtMi41MTgtMjkuNzMzIDcuNjQ5YTI1LjU0MyAyNS41NDMgMCAwIDAtMy4yNjQgOC4zMjZsLTguNDY3IDQyLjA0OGg1OS40OTRsLTE3LjU5Ni01Ny43Nzl6XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImdcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZpbHRlcjogXCJ1cmwoI2lwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0xOClcIiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwidXJsKCNpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotNylcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZDogXCJtMzI4LjE1NCAxMTYuMjYtNy4wODUtNy4zMWMtMS42NjYtMS42MTEtNC40NTYtNS43ODEtNS40OTktNy44MzkgMCAwIC4xMzUtMy4zODQuNDYtNS43NTMuNDc1LTMuNDkzLjEyMi03LjA0LTEuMDI5LTEwLjM3bC0zLjE4My05LjE2Ni0uNjkxLTEuMjcyYTQ4LjM5OSA0OC4zOTkgMCAwIDAtMjAuOTQyLTIwLjMyaC0zOS4wOEwyMTIuNTQgNjcuOTU3bC0xMC4xNTkgMjQuOTEgMjcuNzAxIDUzLjMzOS0yMC42MyAyMi43OThjLTkuMzc0IDIuMDMtMTguMDU3IDEuMTkxLTI4LjcwNCA0LjMzMiAxMS42NjMgMjQuMDU3IDU5LjI3NyAxNi4zNTQgNzYuMDQ2IDcuNzE2IDEuODQzLS45NDcgMy42MDQtMS41NyA1LjI3LTEuOTM2bDIxLjY3MyAxMC44MzEgMTAuNTUyLTIyLjYwOWE5LjY5MyA5LjY5MyAwIDAgMSA3Ljg1Ny01LjUzNmw2LjQzNC0uNjFhMTUuOTM0IDE1LjkzNCAwIDAgMCAyLjM4NC0uMjNoLjA0MWMuNDA2LS4wNjguODI2LS4xMzUgMS4yNzMtLjIzbDMuODItLjk0OGMuODI2LS4xNjIgMi4xMTMtMS43NzMgMy4xODMtMy4zNDRhOS45NSA5Ljk1IDAgMCAwIDEuNjgtNi4zNzZsLS4zNzktNC43NTIgMi40OTItMy4wMzJjLjY1LS44OC43NzItMi40NS40Mi0zLjc1LS4yNTctLjk3NS0xLjIzMi0xLjU3MS0yLjIzNS0xLjQ4OWwtMS44OTYuMTYyYTMuOTYgMy45NiAwIDAgMS0xLjg5Ny0uMzExbC00LjgwOC0yLjA4NXM1Ljc3LjE3NiA3LjE1Mi0uNDg3YzEuMTI0LS41NDIgNC43NTQtMi40MzcgNC43NTQtNC4wODlsLS44NC00LjQ4MXMzLjUwOS0xLjM1NCA1Ljc4NS0zLjU2Yy43MzEtLjczMS0uNTI5LTUuMTMxLTEuMzU1LTUuOTN6XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjNTk1OTU5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJNMzE0Ljk4OCA5My4xNWgtMy42MTZhOS4xNyA5LjE3IDAgMCAwLTkuMDQ5IDcuNzU4bC0uMzM5IDIuMTI2IDIuNTc0LTIuNzc2YzEuMjczLTEuMzY3IDYuNjY1LTMuMzQ0IDYuNjY1LTMuMzQ0IDIuNjY4LjIwNCAzLjc2NS0zLjc2MyAzLjc2NS0zLjc2M3pcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjNTUzRDFDXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJtMzA0LjUzIDEwMy41MDUgNC41NTItLjk2MWMuMTg2LS4wNDEuMzcxLS4wOTEuNTUyLS4xNWE5Ljc3NSA5Ljc3NSAwIDAgMC0uMzAzIDEuMjg2Yy0uMjkyIDEuNzQtLjEwNSAzLjIyMi40MTkgMy4zMS41MjQuMDg4IDEuMTg2LTEuMjUxIDEuNDc4LTIuOTkxLjE2My0uOTcxLjE3Ny0xLjg2Mi4wNjYtMi40NzUuMDYzLS4wNDYuMTI0LS4wOTUuMTg1LS4xNDRsMi4xLTEuNzItMS45MjQuNjFhNS4zMDkgNS4zMDkgMCAwIDEtMS45NS4yNDQgMy4wNjEgMy4wNjEgMCAwIDAtMi4wMTkuNjIybC0zLjE1NiAyLjM2OXptMTYuNTQgMjAuMjgxIDUuMzM2LTEuNjI1Yy0yLjA2NyAyLjY5MS00Ljk3NSAxLjc0Mi01LjMwNiAxLjYzNGEuMjM3LjIzNyAwIDAgMC0uMDMtLjAwOXptMCAwYy0uMDAxIDAgMC0uMDAxIDAgMHpcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjREY3ODM4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJtMjg2Ljg5NCAxMjguODM1LTE3LjUwMSAxMC4xMTMgNi40NzQtMzcuODM5IDguOSAxMi44MzQgMi4xMjcgMTQuODkyelwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmlsdGVyOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTE3KVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCJ1cmwoI2lwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi02KVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkOiBcIk0yODIuNzM1IDExOC4yMDhzLTE1LjM0OCAzNy4wOTQtNDAuMDgyIDMxLjAwMmMtNi42MzgtMS42MzgtOS45My45NjEtMTYuNDk5IDIuODE2bC0xLjcwNy40ODctMTUuOTU3LTMwLjM1MmMtMi44NTgtNC4zNDUtNS4wOC04LjgyNi02LjA5Ni0xMy45M2wtNi42MS0xMi4wNjJjLTIuMjg5LTExLjQ0IDEwLjgyMy0yNi43NTEgMjAuNjQ0LTMzLjA3M2wtNS44OTMtMi43NjJjMi43MzctNy40ODcgMTYuMzEtMjQuMjQ2IDIzLjg5NS0yNi42NTZsMzAuNDI0LTkuNjkzYTI5LjkwMiAyOS45MDIgMCAwIDEgMjcuNDg1IDkuNDYzbDcuNzIxIDcuNzE2YzQuNTc4IDUuMTA0IDMuOTY5IDEzLjAxLTEuMzU1IDE3LjMyOWwtMTIuMTY0IDMuMzNjLTEuNzQ3LjQ3NC0yLjY0MSAyLjQyMy0xLjg2OSA0LjA0OGE0NS40OSA0NS40OSAwIDAgMSAzLjQ5NSAyOC40M2wtMi41MDYgMTIuNDY4LTIuOTI2IDExLjQzOXpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBcIiNGMzlFNzhcIixcbiAgICAgICAgICAgICAgICAgICAgICBkOiBcIk0yODguMDU4IDEyNC4zOTZjLTYuODgxIDIuODAyLTE1LjM0Ny0xNy4wOTgtMTUuMTA0LTI1LjAzMi4zMjUtMTAuNTczIDkuNzI2LTkuOTc3IDE0LjI1MSAxLjEyNCAzLjc5MiA5LjM0MSA0LjEzMSAyMi41NjguODUzIDIzLjkwOHpcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJtMzIzLjI2NCAxMzAuNzg3LTIuMTk1IDUuMDQ5aC00LjM4OGwtMy45OTYtMS4wNTYgNS4yODItLjk0NyA1LjI5Ny0zLjA0NnpcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjNzQyMzRFXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJNMzE2Ljk5MyAxMzMuMzE3YTcuOTYgNy45NiAwIDAgMCAzLjY4NC0yLjYxM2MuMjU4LS4zMjUuNTk2LS41ODIuOTc2LS43NDRsMi42NjgtMS4xMjQuMjU4IDEuMzY3YzAgMS42NTItMy42MzEgMy41NDctNC43NTUgNC4wODktMS4zNDMuNjQ1LTYuODM2LjQ5Ni03LjEzOS40ODdsNC44MDggMi4wODVhMy45NjIgMy45NjIgMCAwIDAgMS44OTcuMzEybDEuODk2LS4xNjNjLjk4OS0uMDk1IDEuOTY0LjUxNCAyLjIyMiAxLjQ3Ni4zNTIgMS4yOTkuMjMgMi44Ny0uNDIgMy43NWwtLjcwNS44NjZhMTUuMjEgMTUuMjEgMCAwIDEtNy4yNi01LjE1OGwtMi40MzgtMy4xNjhoLS4wMTNsNC4zMjEtMS40NjJ6XCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJnXCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmaWx0ZXI6IFwidXJsKCNpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotMTYpXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTUpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQ6IFwibTkwLjgwNCAzNzguNzMzIDQuMjY3LjE0OWgxOTguMDRjMTIuODAxLTIyLjEyMSA5LjAyMi04Mi40MTkgMTEuNDE5LTkzLjE1NSAyLjcyMy0xMi4xOTcgMTguNzM0LTI3LjQ0MSAxOC43MzQtMjcuNDQxbC0xNC4yMDktMzIuMDE3LTIxLjU3OS00NC4yOTYtMy43MTIgNy45Ni0yMS42NzMtMTAuODNjLTEuNjguMzc5LTMuNDI3Ljk4OC01LjI2OSAxLjkzNi0xNi43ODMgOC42MzctNjQuMzg0IDE2LjM0LTc2LjA0Ny03LjcwMy02LjI0NCAxLjg0MS0xMy4xNjYgNS4wNS0yMS4yOTQgMTEuMDA2LTM0LjMyNSAyNS4xNTQtMzguOTAzIDk5Ljg2OS00Ni41MyAxMTUuMTEzLTcuNjI2IDE1LjI0My0zNC4zMjUgNDYuNTAyLTM2LjYxNCA1NC44ODItMi4yOSA4LjM4IDE0LjQ2NyAyNC4zOTYgMTQuNDY3IDI0LjM5NnpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTQpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJNMjYyLjkwNCAzNzguODgyaDMwLjIwOGMxMi44MDEtMjIuMTIxIDkuMDIxLTgyLjQxOSAxMS40MTktOTMuMTU0IDEuMTkyLTUuMzM0IDQuOTE3LTExLjIzNyA4LjczNy0xNi4yMDVsLTIzLjA0Mi0yNS43MjItMTIuMDgyIDExLjgzMnMxMi45MzYgNTAuMzQ3IDkuOTE1IDY4LjQzNGMtMy4wMjEgMTguMDg3LTU0LjE0MyA0NS44MjYtMjUuMTU1IDU0LjgxNXpcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjREY3ODM4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJtNDA5LjEwNCAxNTIuMDQyLTExLjkzNC00LjQ1NGMtMS40NDktLjU0MS0yLjg3Mi44OC0yLjM0MyAyLjM1NmExMy4wMzUgMTMuMDM1IDAgMCAwIDUuNTQgNi44MDlsNy45MzQgNC43OC0xMS44NzYgNC4yNDljLTEuMTExLjM5My0xLjUwNCAxLjgwMS0uNzQ1IDIuNzM1bC4wNTQuMDY3YTcuNjIzIDcuNjIzIDAgMCAwIDYuNzczIDIuODAzbC0yLjE5MyAxLjMzOGExLjU4NiAxLjU4NiAwIDAgMC0uMTc2IDIuNTcybC4wNTQuMDU0YTYuOTE1IDYuOTE1IDAgMCAwIDcuMTI1IDEuMDE2bDguMzQ0LTQuMTMtLjk4OS04LjI3MS0xLjI1NS43NjYuNDE0LTUuMTc3LTIuMjA0Ljc4OC0yLjUyMy04LjMwMXpcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImdcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZpbHRlcjogXCJ1cmwoI2lwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0xNSlcIiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwidXJsKCNpcGwtaWxsdXN0cmF0aW9ucy1oZXJvLTpyYzotMylcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZDogXCJtNDA3LjYxNSAyMTAuMjE0LTMuMDc1IDY0Ljc2NWE1Ni4zNzMgNTYuMzczIDAgMCAxLTYuMjk4IDE5LjM0NmwtNi42NzkgMTUuMTc2Yy03LjYxMiAxNC4wNTItMTQuMTI4IDguOTM1LTI5LjU1NyAxMi40NTVsLTkuMjExIDIuMDk4LTcuNzIxLTUuOTdzLTEyLjc3NC05LjQ1LTE0LjE5Ni0xMi42NDVjLTEuNDIyLTMuMTk1LTkuOTU2LTQzLjE0NS05Ljk1Ni00My4xNDVsMjYuOTAyLTMuNzkgMjAuMDYxLTM0LjAwOGMzLjk1Ni03LjkzMyA3LjkxMS05LjgyOCAxMS4wNjctMjMuMTYzbC42MjMtOC4zOTMgMjguMDQgMTcuMjc0elwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTIpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQ6IFwibTQxNy45NjQgMjA1LjEyMyA5LjE1Ny05LjAwM2MzLjQ1NC0zLjM4NCA1LjUxMy04LjA0MiA1LjMxLTEyLjg3NS0uMDU1LTEuMjA0LS4yNDQtMi4yNi0uNjkxLTIuOTEgMCAwLS44NTQtNi4wOTItMS4zMTQtOC4xMDlsLTQuMDEtMTcuNjgxYTQuODc4IDQuODc4IDAgMCAwLTQuMDA5LTIuOTc4IDMuNjA3IDMuNjA3IDAgMCAxLTIuODU5LTEuOTc3IDQuOTA1IDQuOTA1IDAgMCAwLTIuMDcyLTIuMTI1bC0xNy41ODMtNC4wNjEtNC40OTctMi4wNDVjLTEuMTc4LS41MDEtMy4yNzggMS4xNzgtMy4wNjEgMi40NTEgMCAwIC42NjQgNC4yMjMgNC43OTUgNy40MThsMTIuMzU0IDYuNzY5cy4xOSAyLjQ3OCAxLjExMSA3LjU5NWMxLjM5NSA3LjczLTYuMjg2IDE0LjAyNS0xMy4zNTcgMTAuNzc2LS4xMzUtLjA1NC0uMjU3LS4xMjItLjM5Mi0uMTg5bC00LjEwNS0xMS43NzggMS40NS03LjcwM2MuNTQxLTIuODctLjc4Ni01Ljc4MS0zLjI5Mi03LjIzYTIuMzkyIDIuMzkyIDAgMCAwLTMuMzU5IDEuMDAybC0zLjAyMSA1Ljk4NGEzLjgzMiAzLjgzMiAwIDAgMS0uNDc0LjczMWwtMy4xODMgMy45NjdhMTAuNzcyIDEwLjc3MiAwIDAgMC0yLjMzIDcuNDQ1bDEuMzU0IDIwLjAzNy0xLjY5MyAyMi45NDYgNi4wNTUgMTYuMDI5IDE2Ljc4My41NjkgMTYuOTMzLTIzLjA1NXpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjogXCJ1cmwoI2lwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0xNClcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwiIzczNTMyNFwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZDogXCJNMjg3LjI3MyAxODIuNjExYy0uNDA3LS4xMjItNDEuMjYxLTEyLjY1OC01NS44MjMtMTYuNDc2LTE0LjI2NC0zLjczNi0yNS4yNzYgMy4zMy0yNS4zODUgMy40MTJsLS43NDUtMS4xMzhjLjQ2MS0uMzExIDExLjYwOS03LjQ4NiAyNi40NjktMy41ODcgMTQuNTg5IDMuODE4IDU1LjQ1NiAxNi4zNTQgNTUuODc2IDE2LjQ4OWwtLjM5MiAxLjN6XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQ6IFwibTIyNi40MjQgMTYzLjExNyAxLjMxNC0uNjA5YTIuMjY1IDIuMjY1IDAgMCAxIDEuMjMzLS4xOWw1LjI2OS43MThjLjkyMS4xMjEgMS43MDcuNjkgMi4xMjcgMS41MjlhMi44MDIgMi44MDIgMCAwIDEtMS4zMjggMy43OTFsLS40NzQuMjE3YTIuNzg4IDIuNzg4IDAgMCAxLTEuODY5LjE3NmwtNS44NzktMS40OWEyLjE1NCAyLjE1NCAwIDAgMS0xLjI0Ni0uODM5IDIuMjE0IDIuMjE0IDAgMCAxIC44NTMtMy4zMDN6bTIxLjIxMyA1LjAwOCAxLjUxNy0uNzA0YTIuNTc4IDIuNTc4IDAgMCAxIDEuNDIyLS4yMTdsNi4wNDIuODI2YTMuMjE5IDMuMjE5IDAgMCAxIDIuNDM4IDEuNzQ3IDMuMjA2IDMuMjA2IDAgMCAxLTEuNTE3IDQuMzQ1bC0uNTQyLjI1OGEzLjI4NCAzLjI4NCAwIDAgMS0yLjE1NC4yMDNsLTYuNzU5LTEuNzA2YTIuNTc2IDIuNTc2IDAgMCAxLTEuNDM2LS45NzUgMi41MjYgMi41MjYgMCAwIDEgLjk4OS0zLjc3N3ptLTMzLjIwMS00LjYzMWEyLjMzNiAyLjMzNiAwIDAgMC0uODEyLS4wMjhsLTYuMDQyLjgyNmEzLjIxOSAzLjIxOSAwIDAgMC0yLjQzOCAxLjc0N2MtLjYyMyAxLjI0NS0uMzUyIDIuNjguNTQyIDMuNjQxYTY0LjY5NSA2NC42OTUgMCAwIDAgMy43NzktLjY3N2w0Ljk3MS01LjUwOXpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmlsdGVyOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTEzKVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjNzQyMzRFXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQ6IFwiTTI3My43MjUgMTc1LjI2MWMxNS4zODIuNjc2IDI5LjczNyA3LjUzNiAzOS40NzQgMTguODQ3bDMzLjkxMyA0Mi4zMjJhNDIuNTQ0IDQyLjU0NCAwIDAgMCA3LjUxMyA3LjI5M2wyMC4wMDEgMTUuMDk5YzUuMjQ2IDMuOTY0IDkuMjIzIDkuMjI4IDExLjUwNCAxNS4yMDhsMy44NjMgMTAuMTc0YzIuNTIzIDYuNjMgMi4xMSAxMy45NS0xLjExMiAyMC4yODJsLTEuODY3IDMuNjUzcy02LjkxNCAyNS4wNDQtMTkuOTAxIDI3LjU0N2MtMTMuOTU2IDIuNjkyLTM4Ljc4OS02LjYwMy01NS44NjctMjEuNTEzLTE3LjA3OS0xNC45MS0zOS4yNi0yOC4yMzctNDQuMDkzLTQ3LjA3MS0yLjA4MS04LjEwNC04LjU2OC0yMS41NjYtMTUuMjk2LTM0LjI1OC04LjEyNi0xNS4zNDMtNy4xOTktMzMuMjQzIDEuNzI1LTQ3LjQ2MyA0LjE5MS02LjY1NyAxMS45ODktMTAuNDg2IDIwLjE0My0xMC4xMnpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmlsdGVyOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTEyKVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQ6IFwibTM5Ny40MjkgMTUxLjQwMy0uMzEyLS4xNjNjLTQuMTE4LTMuMTk1LTQuNzk1LTcuNDE5LTQuNzk1LTcuNDE5LS4wOTUtLjU5NS4zMTEtMS4yNzIuODgtMS43ODdsLTMuNjE2LTguMDQxYTQuMzk5IDQuMzk5IDAgMCAwLS45MDgtMi4wMTdsLS4wNDEtLjA5NS0uMDI3LjAxNGE1LjE2NiA1LjE2NiAwIDAgMC0zLjA4OC0xLjc0N2MtMi42NTUtLjQ0Ny01LjEyMSAxLjE1MS01LjUyNyAzLjU2MS0uMTM1Ljc5OCAwIDEuNTcuMjk4IDIuMjg4bC0uMDEzLjAxMyA2Ljc4NiAxNS4zNzkuNDMzLS44NjZhMi40MjIgMi40MjIgMCAwIDEgMy4zNzMtMS4wMjljMi41MDYgMS40NDggMy44MzQgNC4zNDUgMy4yOTIgNy4yMjlsLTEuNDIyIDcuNTQxIDExLjg3OSAyNi45MjYgOS4zNjEtMy40MjUtMTYuNTUzLTM2LjM2MnpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTEpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJNNDEwLjI4MSAxOTEuOTA0YzIuNTcyLS45ODEgNC4yNDktMi44NDcgMy43NDQtNC4xNjctLjUwNC0xLjMyLTIuOTk4LTEuNTk1LTUuNTctLjYxNHMtNC4yNDkgMi44NDctMy43NDQgNC4xNjdjLjUwNCAxLjMyMSAyLjk5OCAxLjU5NSA1LjU3LjYxNHpcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjNzQyMzRFXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZDogXCJNMzg0LjUzMiAxNTYuNDgxczEuOTUxLS45MjEgNC43NTUtLjI1N2wyLjI3Ni00Ljk4MnMtMi4xNDEtMS45MzYtNC4wMjQtLjczMWwtMy4wMDcgNS45N3pcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImdcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZpbHRlcjogXCJ1cmwoI2lwbC1pbGx1c3RyYXRpb25zLWhlcm8tOnJjOi0xMSlcIiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwiIzczNTMyNFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkOiBcIk0yODcuNTc2IDEyNi4wMzhhNS41ODUgNS41ODUgMCAwIDAgLjQ4Mi0yLjMwN2MwLTIuNDUyLTEuNDg1LTQuNDQtMy4zMTgtNC40NHMtMy4zMTkgMS45ODgtMy4zMTkgNC40NGMwIDEuOTIyLjkxMiAzLjU1OCAyLjE4OCA0LjE3N2wtMS45ODYgMTQuMTE1cy4yMy4zMTEuNjkxLjcwNGMyLjc1IDIuNDM2IDcuMDAzIDIuMDE3IDkuMzg3LS43NTlsLjQ0Ny0uNTE0LTQuNTcyLTE1LjQxNnpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmlsdGVyOiBcInVybCgjaXBsLWlsbHVzdHJhdGlvbnMtaGVyby06cmM6LTEwKVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCIjNzM1MzI0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQ6IFwiTTM5Ny45NzEgMjE5Ljg2M2MuNjEgMS41NDMgMi4xMzkgMi45ODMgNC4yMDEgMy43NTMgMy4yMzEgMS4yMDUgNi41NS4zMDggNy40MTMtMi4wMDMuODY0LTIuMzEyLTEuMDU1LTUuMTYyLTQuMjg2LTYuMzY4LTIuMDI5LS43NTctNC4wOTItLjY4NS01LjU2LjA0Ni01LjUxNi0xLjYxLTE0LjE0Ni00LjU3My0yMi43OTgtOS4zMTZoLTEuMTY5Yy0uOTYyLS4xNTUtNS4xNzkuMzczLTMuODQzIDMuNTQ0LS4zNjcuODQyLjI5NiAyLjQxOCAxLjE3IDIuODM4IDMuODQ3IDEuODg1IDEwLjg4MiAzLjcyOSAxOS44ODcgNi4wMDQgMi4yNDEuNTY3IDMuODI4IDEuMDYzIDQuOTg1IDEuNTAyelwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwiIzQwOUVDOFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGQ6IFwiTTQwNy43OTUgMjIwLjk0NWMuNTk5LTEuNjA0LS43MzMtMy41ODMtMi45NzYtNC40MTktMi4yNDMtLjgzNy00LjU0Ni0uMjE1LTUuMTQ1IDEuMzg5LS41OTkgMS42MDQuNzMzIDMuNTgzIDIuOTc2IDQuNDE5IDIuMjQyLjgzNyA0LjU0Ni4yMTUgNS4xNDUtMS4zODl6XCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGQ6IFwiTTM0OS41NDQgMTI5LjQ1NmMuMzc5LjE2My43NTguMjQ0IDEuMTY1LjI0NCAyLjIwOCAwIDQuODM1LTIuNTk5IDkuMjExLTguODk1IDguODk5LTEyLjgwNiAxNC4wMDYtMjEuODUgMTYuODY0LTI3LjYwM2wxLjczNCAyMy4xNjMgMy4yOTItNi45MDRjMTMuOTExLTI5LjIwMSAyNi4wNDgtNDcuNjI3IDI5LjU0My00OC4zNDQuMjMxLjM2Ni44NjcgMS44NjguNjM3IDYuODUtLjY2NCAxNC4wOCAxLjQ3NiAyMi4xMDggNi41NDMgMjQuNTQ0IDUuMjE3IDIuNTI3IDEwLjkwMS0yLjMxIDExLjI0OS0yLjYwN2wuMDA3LS4wMDVjMTIuODAxLTExLjU2MiAyMy4xOTEtMTguOTggMjYuNjU4LTIwLjEwNGwtLjA1Ni4xOTdjLS4wMzkuMTQtLjA4NC4zLS4xNDcuNDgtMi41MTkgNy41NC0yLjY5NSAxMS4zMDQtLjYwOSAxMi45NTUgMS4yNDYuOTg5IDIuOTI2Ljc1OCA0LjAyMy4wODJsLTIuMTI3LTMuNDY2Yy4yNTgtLjA1NC43MzIuMTc2Ljg0LjQzMy0uMDI3LS4wNjgtLjYzNy0xLjYxIDEuNzM0LTguNzMyLjkyMS0yLjc0OC42MDktNC42NTctLjkwOC01LjY0NS0xLjgwMS0xLjE2NC00Ljg3Ni0xLjUwMy0xOC42OTMgOS40MjItNi44OTUgNS40NTYtMTMuMzcgMTEuMjktMTMuNDEgMTEuMzMyLTEuMDAzLjg5My00LjQxNiAzLjE0LTYuNzg3IDIuMDAzLTEuNTMxLS43NDQtNS4wMjUtNC4yNS00LjI1My0yMC43LjIxNi00LjY1NiAwLTEwLjExMi0zLjYzMS0xMS4wMi0zLjIxLS43ODQtNy45OTIgMS42OC0yMS4wNSAyNS4wMTktMy44NiA2Ljg5LTcuNDY0IDEzLjkwMy05LjkyOSAxOC44MzFsLTIuMDMyLTI3LjE5OC0zLjE1NiAxMC40NTJjLS4wMjcuMTA4LTMuMzU5IDEwLjc5LTE5LjY2OSAzNC4yNS0yLjY0MSAzLjgxOC00LjIzOSA1LjYwNS01LjEzMyA2LjQ0NS0uMDY3LTMuMDkyIDEuMzg4LTEwLjM2NCAyLjQxNi0xNS41bC4wMzUtLjE3N2MxLjE1Mi01LjcxMyAyLjMzLTExLjY0MyAyLjU2MS0xNS42MzcuMjAzLTMuNi0uNzMyLTUuODYxLTIuODA0LTYuNzI4LTQuODUtMi4wNDQtMTMuMzMgNi40NDQtMTYuNzQzIDEwLjE4bDMuMDA3IDIuNzM1YzUuMjY5LTUuNzY3IDEwLjg2NC05LjY4IDEyLjEzNy05LjE5Mi4wMTQgMCAuNDc0LjUuMzUyIDIuNzYyLS4yMTYgMy43MS0xLjM2OCA5LjQ3Ni0yLjQ5MiAxNS4wNjctMi44OTkgMTQuNDU5LTMuNjE3IDE5LjYzLS4zNzkgMjEuMDExem0tMTAuNTEyIDM5LjQxOSAzLjM3MyAyLjI2MSAxNC41MzUtMjEuNzAxYy43NDUgMy4xOTUgMi40OTIgNi43OTYgNi41MTUgOC41OTYgMS40MzYuNjUgMi45NjcuNTk2IDQuNDAzLS4xMzUgNS45MTktMy4wMTkgOS4zNzMtMTguMjkgMTAuMDEtMjEuMzIybC0zLjk4Mi0uODI2Yy0xLjQwOSA2Ljc1NS00Ljc4MiAxNi45NjMtNy44NzEgMTguNTQ3LS4zNzkuMTg5LS42MjMuMTYyLS44OTMuMDQxLTUuMzM4LTIuMzgzLTQuNTkzLTEwLjYwMS00LjU3OS0xMC42ODJsLjg1My04LjE1LTIyLjM2NCAzMy4zNzF6XCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdXG4gICAgICAgICAgKSxcbiAgICAgICAgXVxuICAgICAgKSxcbiAgICBdKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iXSwibmFtZXMiOlsicmVuZGVyIiwiX3ZtIiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwiYXR0cnMiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwieG1sbnMiLCJmaWxsIiwidmlld0JveCIsImlkIiwieCIsInkiLCJiYXNlRnJlcXVlbmN5IiwibnVtT2N0YXZlcyIsInJlc3VsdCIsInNlZWQiLCJfdiIsInNsb3BlIiwidHlwZSIsImluMiIsIm1vZGUiLCJmaWx0ZXJVbml0cyIsInZhbHVlcyIsImR4IiwiZHkiLCJzdGREZXZpYXRpb24iLCJrMiIsImszIiwib3BlcmF0b3IiLCJ4MSIsIngyIiwieTEiLCJ5MiIsImdyYWRpZW50VW5pdHMiLCJvZmZzZXQiLCJkIiwiZmlsdGVyIiwic3RhdGljUmVuZGVyRm5zIiwiX3dpdGhTdHJpcHBlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/description-1.vue?vue&type=template&id=da96e660&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/infos-base-1.vue?vue&type=template&id=3c2daefd&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/infos-base-1.vue?vue&type=template&id=3c2daefd& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", [_c(\"section\", [_c(\"div\", [_c(\"svg\", {\n    style: {\n      width: _vm.width,\n      height: _vm.height\n    },\n    attrs: {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"none\",\n      viewBox: \"0 0 648 365\",\n      \"aria-hidden\": \"true\",\n      \"data-testid\": \"ipl-illustration-hero\"\n    }\n  }, [_c(\"defs\", [_c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-25\",\n      x: \"0%\",\n      y: \"0%\"\n    }\n  }, [_c(\"feTurbulence\", {\n    attrs: {\n      baseFrequency: \"2.5\",\n      numOctaves: \"4\",\n      result: \"noise\",\n      seed: \"14\"\n    }\n  }), _vm._v(\" \"), _c(\"feComponentTransfer\", {\n    attrs: {\n      \"in\": \"noise\",\n      result: \"opacity\"\n    }\n  }, [_c(\"feFuncA\", {\n    attrs: {\n      slope: \"0.6\",\n      type: \"linear\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"opacity\",\n      in2: \"SourceGraphic\",\n      mode: \"overlay\",\n      result: \"blend\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-24\",\n      width: \"24.749\",\n      height: \"61.456\",\n      x: \"274.998\",\n      y: \"13.124\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-23\",\n      width: \"75.834\",\n      height: \"59.126\",\n      x: \"187.164\",\n      y: \"97.031\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-22\",\n      width: \"38.347\",\n      height: \"117.194\",\n      x: \"266.272\",\n      y: \"156.819\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-21\",\n      width: \"97.287\",\n      height: \"129.733\",\n      x: \"194.24\",\n      y: \"176.84\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-20\",\n      width: \"130.605\",\n      height: \"51.181\",\n      x: \"67.304\",\n      y: \"319.782\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-19\",\n      width: \"46.984\",\n      height: \"56.867\",\n      x: \"281.183\",\n      y: \"118.646\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-18\",\n      width: \"93.189\",\n      height: \"172.66\",\n      x: \"241.442\",\n      y: \"122.592\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-17\",\n      width: \"176.283\",\n      height: \"221.766\",\n      x: \"65.655\",\n      y: \"126.242\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-16\",\n      width: \"53.843\",\n      height: \"117.933\",\n      x: \"410.479\",\n      y: \"181.541\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-15\",\n      width: \"131.685\",\n      height: \"10.45\",\n      x: \"288.587\",\n      y: \"291.946\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-14\",\n      width: \"135.696\",\n      height: \"159.036\",\n      x: \"149.854\",\n      y: \"146.359\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-13\",\n      width: \"110.384\",\n      height: \"128.212\",\n      x: \"186.494\",\n      y: \"35.12\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-12\",\n      width: \"149.718\",\n      height: \"150.512\",\n      x: \"147.282\",\n      y: \"0.658\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-11\",\n      width: \"16.979\",\n      height: \"41.815\",\n      x: \"322.717\",\n      y: \"122.074\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow_295_2226\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow_295_2226\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow_295_2226\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-10\",\n      x1: \"485.844\",\n      x2: \"485.844\",\n      y1: \"122.469\",\n      y2: \"0.938\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#4CA38F\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#7BC0AE\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-9\",\n      x1: \"200.24\",\n      x2: \"291.527\",\n      y1: \"238.713\",\n      y2: \"238.713\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#4CA38F\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#2B6256\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-8\",\n      x1: \"73.304\",\n      x2: \"197.909\",\n      y1: \"342.373\",\n      y2: \"342.373\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#767676\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#595959\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-7\",\n      x1: \"246.442\",\n      x2: \"333.634\",\n      y1: \"206.925\",\n      y2: \"206.925\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      offset: \"0.02\",\n      \"stop-color\": \"#89471E\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#B4602B\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-6\",\n      x1: \"287843\",\n      x2: \"287843\",\n      y1: \"566419\",\n      y2: \"291440\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#234840\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#7BC0AE\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-5\",\n      x1: \"412.479\",\n      x2: \"464.321\",\n      y1: \"239.507\",\n      y2: \"239.507\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#767676\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#949494\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-4\",\n      x1: \"321937\",\n      x2: \"421270\",\n      y1: \"20181.6\",\n      y2: \"20181.6\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#767676\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#949494\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-3\",\n      x1: \"154.854\",\n      x2: \"284.55\",\n      y1: \"223.878\",\n      y2: \"223.878\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#7BC0AE\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#4CA38F\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-2\",\n      x1: \"191.494\",\n      x2: \"295.878\",\n      y1: \"97.227\",\n      y2: \"97.227\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#89471E\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#B4602B\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-1\",\n      x1: \"40006\",\n      x2: \"42171.1\",\n      y1: \"31042.5\",\n      y2: \"31042.5\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#89471E\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#B4602B\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"clipPath\", {\n    attrs: {\n      id: \"ipl-illustrations-hero-:r0:-0\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"#fff\",\n      d: \"m421.317 96.108 13.256 26.361h-53.417V31.747c-26.825-3.124-55.164.135-81.445 9.463-.738-15.172-12.515-23.176-18.787-26.38C269.553 6.243 252.455.477 232.082 1.865c-36.767 2.5-44.143 35.198-50.817 64.786-1.312 5.82-2.598 11.52-4.075 16.845-4.758 17.169-14.469 31.572-24.892 45.805-9.079 4.172-18.864 13.332-27.412 31.688l-.003.001c-29.152 15.097-54.495 37.35-73.164 61.053C19.668 262.718-2.441 312.402.367 364.962H647.68c-4.859-37.078-18.181-107.885-85.303-135.273-4.883-1.993-9.924-3.244-15.093-3.891l19.523-65.632-43.098-37.697h-17.135l13.254-26.357h-.005l.002-.004h-25.712a261.015 261.015 0 0 1 3.858-3.814c4.227-4.092 8.274-7.742 12.142-10.948l1.077.704c9.618 6.294 15.962 10.446 27.443 4.598 12.221-6.227 27.178-22.207 27.855-34.986-10.737-6.962-32.455-4.263-44.678 1.964-11.473 5.843-11.846 13.405-12.413 24.878l-.039.78c-4.097 3.364-8.379 7.21-12.845 11.536a264.646 264.646 0 0 0-5.31 5.288h-4.743a226.59 226.59 0 0 0 1.63-4.377c1.679-4.653 3.059-8.95 4.142-12.894l.259-.14c6.568-3.538 10.895-5.87 11.116-14.226.235-8.904-4.251-22.385-11.33-26.733-7.303 3.97-12.488 17.196-12.721 26.098-.221 8.357 3.977 10.913 10.349 14.792l.195.119c-1.045 3.773-2.363 7.86-3.953 12.263a228.435 228.435 0 0 1-1.908 5.098h-6.606a124.752 124.752 0 0 0-3.109-7.953l.079-.186c2.125-5.044 3.531-8.38-.194-13.258-3.965-5.195-12.735-10.832-18.781-10.057-2.35 5.63.776 15.574 4.741 20.769 3.722 4.875 7.298 4.401 12.722 3.683l.167-.021a119.947 119.947 0 0 1 2.753 7.022h-30.724c.11-5.62.379-12.394.97-19.483.486-5.85 1.135-11.274 1.937-16.235l.717-.1.578-.082c11.377-1.593 18.874-2.642 23.667-14.595C478.261 32.881 479 11.01 471.104.938c-12.665 1.826-27.241 18.15-32.347 30.883-4.791 11.949-.098 17.886 7.024 26.896l.486.616c-.866 5.216-1.569 10.944-2.077 17.14-.593 7.123-.863 13.929-.974 19.58a264.114 264.114 0 0 0-4.77-13.351c-1.798-4.609-3.587-8.753-5.367-12.434l.116-.312c2.601-6.966 4.318-11.564-1.007-17.99-5.682-6.856-17.933-14.055-26.123-12.67-2.884 7.791 1.914 21.164 7.596 28.023 5.337 6.434 10.174 5.597 17.518 4.326l.235-.041c1.696 3.53 3.393 7.475 5.093 11.834a258.85 258.85 0 0 1 4.544 12.67h-19.734z\"\n    }\n  })])], 1), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      \"clip-path\": \"url(#ipl-illustrations-hero-:r0:-0)\",\n      filter: \"url(#ipl-illustrations-hero-:r0:-25)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-10)\",\n      d: \"m434.575 122.469-13.256-26.362h19.732a258.85 258.85 0 0 0-4.544-12.669c-1.7-4.359-3.397-8.303-5.093-11.834-7.476 1.293-12.359 2.218-17.753-4.285-5.682-6.859-10.48-20.232-7.596-28.023 8.19-1.385 20.441 5.814 26.123 12.67 5.404 6.522 3.555 11.16.891 18.302 1.78 3.68 3.569 7.825 5.367 12.434a264.114 264.114 0 0 1 4.77 13.351c.111-5.651.381-12.457.974-19.58.508-6.196 1.211-11.924 2.077-17.14-7.391-9.36-12.41-15.293-7.51-27.512 5.106-12.733 19.682-29.057 32.347-30.883 7.896 10.07 7.157 31.943 2.052 44.674-4.972 12.4-12.855 13.066-24.962 14.777-.802 4.96-1.451 10.385-1.937 16.235-.591 7.089-.86 13.862-.97 19.483h30.724a119.947 119.947 0 0 0-2.753-7.022c-5.518.73-9.129 1.263-12.889-3.662-3.965-5.195-7.091-15.14-4.741-20.769 6.046-.775 14.816 4.862 18.781 10.057 3.77 4.938 2.284 8.296.115 13.444a124.196 124.196 0 0 1 3.11 7.957h6.603a233.03 233.03 0 0 0 1.91-5.102c1.59-4.402 2.908-8.49 3.953-12.263-6.481-3.947-10.768-6.47-10.544-14.91.233-8.903 5.417-22.129 12.721-26.099 7.079 4.348 11.565 17.83 11.33 26.733-.223 8.465-4.663 10.748-11.375 14.366-1.083 3.943-2.463 8.241-4.142 12.894a226.791 226.791 0 0 1-1.632 4.381h4.741a262.428 262.428 0 0 1 5.314-5.292c4.466-4.326 8.748-8.172 12.845-11.536.595-11.913.721-19.684 12.453-25.658 12.222-6.227 33.94-8.926 44.677-1.964-.677 12.779-15.633 28.76-27.855 34.986-11.904 6.063-18.285 1.377-28.52-5.302-3.868 3.206-7.915 6.856-12.142 10.948a256.76 256.76 0 0 0-3.862 3.818h25.719l-13.256 26.362-71.997-.005z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#E0A961\",\n      d: \"M421.317 96.107h98.508l-13.257 26.363h-71.994l-13.257-26.363z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#F5CB9D\",\n      d: \"M381.156 31.747C295.15 21.731 193.579 77.33 194.18 188.209l249.396 106.466c40.606 17.333 87.076-5.817 97.698-48.671l25.533-85.837-43.098-37.697H381.156V31.747z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#E0A961\",\n      d: \"M562.377 229.689c-36.758-15.002-82.514 12.044-123.682 22.371a146.203 146.203 0 0 1-10.635 2.277 100.996 100.996 0 0 1-11.251 1.343c-43.9 2.606-66.705-20.655-82.911-35.953-8.485-8.015-19.387-19.206-32.223-30.622-6.287-5.587-13.037-11.238-20.193-16.592-.524-.394-1.051-.785-1.581-1.173-6.566-4.83-13.47-9.396-20.666-13.436-9.633-5.418-19.791-9.887-30.374-12.793a107.684 107.684 0 0 0-6.869-1.647 98.366 98.366 0 0 0-2.192-.421 95.753 95.753 0 0 0-13.284-1.494 132.164 132.164 0 0 0-7.832-.106h-.124c-25.967.379-50.977 7.788-73.677 19.547-29.152 15.097-54.495 37.35-73.164 61.053C19.668 262.718-2.441 312.402.367 364.962H647.68c-4.859-37.078-18.181-107.885-85.303-135.273z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-24)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#2D2D2D\",\n      d: \"M277.062 13.124s36.253 12.305 17.1 50.034c-19.154 37.729-17.1-50.034-17.1-50.034z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-23)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#2D2D2D\",\n      d: \"M262.998 97.409s-12.678 44.357-4.109 52.748c-21.7-1.272-51.58-18.041-64.361-37.484-12.781-19.443 68.47-15.264 68.47-15.264z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#2D2D2D\",\n      d: \"M258.017 83.127s-.862 55.15 1.114 63.536c1.163-12.879 2.613-63.603 2.613-63.603l-3.727.067z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#623721\",\n      d: \"M327.755 151.963c5.942-9.24 1.49-22.675-9.955-30.034l9.955 30.034z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-22)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#623721\",\n      d: \"M291.526 258.251s11.497-78.007 13.026-89.106c1.529-11.1-23.476-12.326-23.476-12.326l-8.804 108.872s16.883 8.652 19.254-7.44z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-21)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-9)\",\n      d: \"m229.663 176.84 45.172 74.255s8.516 18.393 16.692 7.153c-2.504 13.965-4.089 42.325-9.197 42.325h-21.735L200.24 201.7l29.423-24.86z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-20)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-8)\",\n      d: \"M197.2 364.963H73.304c3.028-12.541 6.17-24.052 8.204-31.257 1.355-4.808 2.216-7.7 2.216-7.7s75.455-14.931 111.443 1.459c.135.641.264 1.279.387 1.912 2.818 14.379 2.75 26.364 1.646 35.586z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-19)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#2B6256\",\n      d: \"m316.794 171.816-8.973 1.524c-7.217 1.224-14.292-4.126-16.226-12.268l-8.412-35.447 41.14-6.979 3.749 36.231c.848 8.33-4.067 15.715-11.278 16.939z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-18)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-7)\",\n      d: \"m320.232 133.581-9.918-1.455 2.116-1.984 12.471 2.79a3.215 3.215 0 0 0 3.655-1.871l.733-1.713-19.835-5.756-15.273 5.951-42.45 34.453-5.289 70.188s14.945 79.432 26.432 49.208c11.487-30.224 4.331-109.224 4.331-109.224l34.226-13.223 10.707 2.631a3.757 3.757 0 0 0 3.44-.884l1.441-1.324-10.609-7.478 11.344-1.928.399 4.844 5.479-4.844-1.862-12.598-11.538-5.783z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-17)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-6)\",\n      d: \"M183.128 130.713s-52.731-33.486-73.538 82.824c-1.827 10.219-6.319 19.776-10.368 29.335l-4.651 10.977a36.8 36.8 0 0 0-2.919 14.366S54.47 308.394 81.51 333.706c25.314-6.902 44.087-5.66 59.045.095 14.958 5.755 60.805 31.556 70.906-52.929 25.527-15.534 38.98-44.3 24.598-101.257 0 0 3.45-48.902-52.93-48.902z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-16)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-5)\",\n      d: \"m463.454 184.338-7.216-2.797-43.759 113.045 7.215 2.796a1.363 1.363 0 0 0 1.471-.327c.123-.129.219-.281.283-.447l42.782-110.516a1.363 1.363 0 0 0-.024-1.038 1.356 1.356 0 0 0-.752-.716z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-15)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-4)\",\n      d: \"M419.462 300.396H290.587v-8.449h124.895c1.27 0 2.488.504 3.387 1.402a4.792 4.792 0 0 1 1.402 3.387v2.856a.8.8 0 0 1-.809.804z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-14)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-3)\",\n      d: \"M183.927 147.359s-45.426.784-22.712 79.102c40.333 38.378 75.378 73.935 87.812 73.935h18.7s15.273-12.063 16.448-15.979c1.174-3.916-.17-16.744-7.318-16.744-6.081-7.671-30.413-33.488-30.413-33.488l-3.09 4.402s-38.368-91.228-59.427-91.228z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-13)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-2)\",\n      d: \"M274.187 107.869s7.035 2.042 6.902-5.893c5.29.264 10.959.65 12.431-3.894 1.471-4.544-5.951-16.744-5.687-19.131.264-2.388 4.761-8.992 4.761-8.992s6.701-21.187.958-30.389l-85.957-3.45-16.101 99.684 28.208 22.528 26.181-37.777 15.107 5.756s10.71 5.025 9.256-7.669c5.025-2.116 5.659-7.229 5.659-7.229l-1.718-3.544z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-12)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#2D2D2D\",\n      d: \"M295.972 40.967s-10.086 14.192-25.181 10.657c-9.704-2.273-16.109 15.425-27.427 14.56-17.983-1.669-23.178 53.993-18.911 72.361-21.017 24.841-32.948-19.894-72.171-9.222 10.429-14.24 20.147-28.65 24.908-45.827 8.985-32.402 10.893-78.64 54.892-81.632 38.211-2.603 64.906 19.961 63.89 39.103z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#623721\",\n      d: \"m234.525 136.946 11.359-16.391s-8.24-1.909-8.35-16.358l-3.009 32.749z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#C08A38\",\n      d: \"M233.972 78.137v1.896c-4.129 0-7.619 7.529-7.619 16.441 0 8.912 3.49 16.443 7.619 16.443v1.896c-5.335 0-9.513-8.056-9.513-18.339 0-10.284 4.178-18.337 9.513-18.337z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"url(#ipl-illustrations-hero-:r0:-1)\",\n      d: \"M232.07 84.31c5.287 0 9.573-6.854 9.573-15.31 0-8.455-4.286-15.31-9.573-15.31-5.286 0-9.572 6.855-9.572 15.31 0 8.456 4.286 15.31 9.572 15.31z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#2D2D2D\",\n      d: \"m292.482 65.828-.093-.036-.169-.06a6.737 6.737 0 0 0-.339-.103c-.221-.062-.44-.115-.657-.169a13.413 13.413 0 0 0-3.851-.244c-1.698.134-3.361.55-4.922 1.233-.794.343-1.561.746-2.294 1.207-.376.218-.733.488-1.095.73-.352.274-.713.521-1.053.817a26.159 26.159 0 0 0-3.803 3.921 22.041 22.041 0 0 1 4.173-2.923c.358-.203.732-.356 1.092-.535.373-.146.735-.319 1.111-.437.73-.264 1.48-.467 2.243-.606a13.08 13.08 0 0 1 4.482-.063c.734.118 1.456.301 2.158.545.349.127.694.264 1.028.42.169.08.33.17.488.247l.228.13.677.424.808-1.387.43-2.847c-.058-.02-.608-.25-.642-.264z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#89471E\",\n      d: \"M278.497 96.477c-2.494 1.776-1.654 4.08 1.879 5.153l-1.879-5.153z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#462615\",\n      d: \"m281.708 75.973-8.692 1.933c3.315-5.558 10.524-8.165 16.111-5.83h.817c-.335.501-.481.918-.601 1.262-.212.605-.347.988-1.288 1.224l-4.865 1.082c.968.395 1.253 2.13.631 3.924a5.774 5.774 0 0 1-.799 1.544l-3.166-.45c-.086-.685.005-1.518.299-2.364.356-1.03.935-1.859 1.553-2.325zm6.633 25.19c-1.832-2.385-4.779-2.397-6.591-.027l6.591.027zM265.336 101.629s4.246 9.686 10.023 11.717c1.898-2.013.496-5.328-2.342-6.303-2.837-.975-7.681-5.414-7.681-5.414z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#462615\",\n      d: \"M280.699 104.956s-13.507-.677-15.363-3.327c1.712 3.845 8.851 6.239 8.851 6.239s5.762 2.016 6.512-2.912z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#2D2D2D\",\n      d: \"M241.6 54.947v25.29l7.545-25.29H241.6z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#C08A38\",\n      d: \"M233.971 78.137v1.896c4.129 0 7.618 7.529 7.618 16.441 0 8.912-3.487 16.443-7.618 16.443v1.896c5.333 0 9.513-8.056 9.513-18.339 0-10.284-4.18-18.337-9.513-18.337z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      filter: \"url(#ipl-illustrations-hero-:r0:-11)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#2B6256\",\n      d: \"m327.607 161.889-.241-3.308c2.572-.187 4.924-1.995 6.622-5.091 1.827-3.33 2.651-7.675 2.321-12.232-.33-4.558-1.774-8.736-4.063-11.767-2.128-2.821-4.717-4.268-7.289-4.084l-.24-3.308c3.724-.269 7.346 1.644 10.175 5.393 2.67 3.535 4.346 8.339 4.723 13.525.378 5.186-.59 10.184-2.72 14.068-2.257 4.117-5.555 6.533-9.288 6.804z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#fff\",\n      d: \"M575.459 364.962h-19.856l-12.64-44.146h20.938l11.558 44.146zM298.734 320.816l-12.64 44.146h-19.856l11.557-44.146h20.939z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"#fff\",\n      d: \"M580.714 300.396H249.025v20.422h331.689v-20.422z\"\n    }\n  })])])])])]);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/infos-base-1.vue?vue&type=template&id=3c2daefd&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/medias-1.vue?vue&type=template&id=54607d73&scoped=true&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/medias-1.vue?vue&type=template&id=54607d73&scoped=true& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", [_c(\"div\", {\n    staticClass: \"css-r8tze2 eu4oa1w0\"\n  }, [_c(\"div\", {\n    staticClass: \"css-j2f1bi eu4oa1w0\"\n  }, [_c(\"svg\", {\n    style: {\n      width: _vm.width,\n      height: _vm.height\n    },\n    attrs: {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 819 450\",\n      \"aria-hidden\": \"true\"\n    }\n  }, [_c(\"defs\", [_c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint0_linear\",\n      x1: \"500.705\",\n      x2: \"500.705\",\n      y1: \"283.75\",\n      y2: \"124.011\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#2B6256\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#358271\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint1_linear\",\n      x1: \"519.534\",\n      x2: \"519.534\",\n      y1: \"408.916\",\n      y2: \"154.606\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#2B6256\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#358271\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint2_linear\",\n      x1: \"606.344\",\n      x2: \"606.344\",\n      y1: \"317.348\",\n      y2: \"202.854\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#2B6256\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#358271\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint3_linear\",\n      x1: \"592.236\",\n      x2: \"592.236\",\n      y1: \"407.141\",\n      y2: \"224.782\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#2B6256\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#358271\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint4_linear\",\n      x1: \"361.151\",\n      x2: \"557.906\",\n      y1: \"418.268\",\n      y2: \"418.268\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#623721\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#89471E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint5_linear\",\n      x1: \"467.859\",\n      x2: \"467.859\",\n      y1: \"448.266\",\n      y2: \"333.732\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#623721\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#89471E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint6_linear\",\n      x1: \"422.6\",\n      x2: \"422.6\",\n      y1: \"338.275\",\n      y2: \"253.701\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#462615\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#623721\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint7_linear\",\n      x1: \"351.791\",\n      x2: \"351.791\",\n      y1: \"271.367\",\n      y2: \"208.086\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#B4602B\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#DF7838\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint8_linear\",\n      x1: \"347.174\",\n      x2: \"347.174\",\n      y1: \"449.957\",\n      y2: \"175.556\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#DF7838\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#F39E78\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint9_linear\",\n      x1: \"257.457\",\n      x2: \"315.583\",\n      y1: \"228.118\",\n      y2: \"228.118\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#B4602B\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#DF7838\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint10_linear\",\n      x1: \"441.62\",\n      x2: \"467.857\",\n      y1: \"311.833\",\n      y2: \"311.833\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#462615\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#623721\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint11_linear\",\n      x1: \"370.188\",\n      x2: \"370.188\",\n      y1: \"353.878\",\n      y2: \"217.038\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#623721\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#89471E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint12_linear\",\n      x1: \"280.865\",\n      x2: \"351.796\",\n      y1: \"180.122\",\n      y2: \"180.122\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#89471E\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#89471E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint13_linear\",\n      x1: \"310.191\",\n      x2: \"393.863\",\n      y1: \"140.574\",\n      y2: \"140.574\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#89471E\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#89471E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint14_linear\",\n      x1: \"310.193\",\n      x2: \"392.686\",\n      y1: \"111.389\",\n      y2: \"111.389\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#2D2D2D\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#424242\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint15_linear\",\n      x1: \"315.176\",\n      x2: \"336.433\",\n      y1: \"139.099\",\n      y2: \"139.099\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#623721\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#89471E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint16_linear\",\n      x1: \"286.473\",\n      x2: \"286.473\",\n      y1: \"237.913\",\n      y2: \"178.266\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#DF7838\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#F39E78\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint17_linear\",\n      x1: \"505.48\",\n      x2: \"505.48\",\n      y1: \"336.227\",\n      y2: \"285.141\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#623721\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#89471E\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint18_linear\",\n      x1: \"143.169\",\n      x2: \"156.883\",\n      y1: \"314.926\",\n      y2: \"314.926\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#2D2D2D\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#424242\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint19_linear\",\n      x1: \"270.282\",\n      x2: \"270.282\",\n      y1: \"449.964\",\n      y2: \"377.593\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#2D2D2D\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#424242\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint20_linear\",\n      x1: \"270.282\",\n      x2: \"270.282\",\n      y1: \"449.964\",\n      y2: \"377.593\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#2D2D2D\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#424242\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"linearGradient\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__paint21_linear\",\n      x1: \"229.416\",\n      x2: \"229.416\",\n      y1: \"449.973\",\n      y2: \"263.645\",\n      gradientUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"stop\", {\n    attrs: {\n      \"stop-color\": \"#595959\"\n    }\n  }), _vm._v(\" \"), _c(\"stop\", {\n    attrs: {\n      offset: \"1\",\n      \"stop-color\": \"#424242\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter0_di\",\n      width: \"128.377\",\n      height: \"165.728\",\n      x: \"438.764\",\n      y: \"124.016\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter1_di\",\n      width: \"101.045\",\n      height: \"256.293\",\n      x: \"469.259\",\n      y: \"154.615\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter2_di\",\n      width: \"94.146\",\n      height: \"120.487\",\n      x: \"561.519\",\n      y: \"202.858\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"3\",\n      dy: \"3\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter3_di\",\n      width: \"74.7\",\n      height: \"184.346\",\n      x: \"555.134\",\n      y: \"224.789\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"1\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter4_di\",\n      width: \"203.255\",\n      height: \"69.388\",\n      x: \"359.647\",\n      y: \"385.576\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter5_di\",\n      width: \"161.868\",\n      height: \"120.539\",\n      x: \"388.676\",\n      y: \"332.723\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter6_di\",\n      width: \"146.205\",\n      height: \"90.559\",\n      x: \"351.25\",\n      y: \"252.701\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter7_di\",\n      width: \"42.724\",\n      height: \"69.279\",\n      x: \"332.18\",\n      y: \"207.083\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter8_di\",\n      width: \"211.665\",\n      height: \"280.421\",\n      x: \"243.106\",\n      y: \"174.525\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter9_di\",\n      width: \"64.625\",\n      height: \"32.213\",\n      x: \"255.96\",\n      y: \"214.013\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter10_di\",\n      width: \"207.652\",\n      height: \"142.834\",\n      x: \"268.108\",\n      y: \"216.021\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter11_di\",\n      width: \"77.429\",\n      height: \"91.102\",\n      x: \"279.362\",\n      y: \"136.583\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter12_di\",\n      width: \"90.191\",\n      height: \"119.221\",\n      x: \"308.692\",\n      y: \"82.979\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter13_di\",\n      width: \"64.719\",\n      height: \"65.638\",\n      x: \"255.866\",\n      y: \"177.266\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter14_di\",\n      width: \"104.547\",\n      height: \"108.661\",\n      x: \"446.868\",\n      y: \"239.907\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter15_di\",\n      width: \"42.894\",\n      height: \"57.103\",\n      x: \"485.781\",\n      y: \"284.131\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter16_di\",\n      width: \"20.215\",\n      height: \"20.531\",\n      x: \"141.667\",\n      y: \"306.663\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter17_di\",\n      width: \"157.82\",\n      height: \"92.569\",\n      x: \"141.807\",\n      y: \"362.395\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"filter\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__filter18_di\",\n      width: \"212.159\",\n      height: \"192.324\",\n      x: \"125.055\",\n      y: \"262.676\",\n      \"color-interpolation-filters\": \"sRGB\",\n      filterUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"feFlood\", {\n    attrs: {\n      \"flood-opacity\": \"0\",\n      result: \"BackgroundImageFix\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"2\",\n      dy: \"2\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"1.5\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"BackgroundImageFix\",\n      result: \"effect1_dropShadow\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      \"in\": \"SourceGraphic\",\n      in2: \"effect1_dropShadow\",\n      result: \"shape\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      \"in\": \"SourceAlpha\",\n      result: \"hardAlpha\",\n      values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feOffset\", {\n    attrs: {\n      dx: \"-1.5\",\n      dy: \"1\"\n    }\n  }), _vm._v(\" \"), _c(\"feGaussianBlur\", {\n    attrs: {\n      stdDeviation: \"0.75\"\n    }\n  }), _vm._v(\" \"), _c(\"feComposite\", {\n    attrs: {\n      in2: \"hardAlpha\",\n      k2: \"-1\",\n      k3: \"1\",\n      operator: \"arithmetic\"\n    }\n  }), _vm._v(\" \"), _c(\"feColorMatrix\", {\n    attrs: {\n      values: \"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.3 0\"\n    }\n  }), _vm._v(\" \"), _c(\"feBlend\", {\n    attrs: {\n      in2: \"shape\",\n      mode: \"soft-light\",\n      result: \"effect2_innerShadow\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"clipPath\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__svgClip\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      id: \"hero-working-working-7_svg__hero-working-working-7__Mask\",\n      fill: \"#fff\",\n      d: \"M319.951 93.33c5.339-5.153 11.786-7.938 18.621-8.842 7.986-1.28 16.572-.128 24.497 3.262 105.989-10.962 222.863-1.475 277.81 76.474 28.733 40.731 34.071 91.016 26.002 143.401l.018.004a68.381 68.381 0 016.387 1.973c79.306 28.843 90.796 106.436 95.446 140.365H328.549l-.008.033h-11.272l-.001-.009-.003-.024H199.517c-1.501.02-3.075.033-4.637.033l-.013-.033H51.012c-5.88-54.467 19.216-106.111 56.345-148.056 26.653-30.111 65.591-57.869 109.994-71.187l-67.926-96.358s76.233-26.468 170.526-41.035z\"\n    }\n  })]), _vm._v(\" \"), _c(\"pattern\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__texture\",\n      width: \"38\",\n      height: \"32\",\n      x: \"0\",\n      y: \"0\",\n      patternTransform: \"scale(.5)\",\n      patternUnits: \"userSpaceOnUse\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      d: \"M10 0h1v1h-1V0zm8 0h1v1h-1V0zm15 0h1v1h-1V0zm10 1h1v1h-1V1zm27 0h1v1h-1V1zM6 1h1v1H6V1zm23 0h1v1h-1V1zm2 0h1v1h-1V1zm25 0h1v1h-1V1zm19 0h1v1h-1V1zM3 1h1v1H3V1zm4 1h1v1H7V2zm16 0h1v1h-1V2zm14 0h1v1h-1V2zm8 0h1v1h-1V2zm8 0h1v1h-1V2zm5 0h1v1h-1V2zm10 0h1v1h-1V2zM1 3h1v1H1V3zm3 0h1v1H4V3zm4 0h2v1H8V3zm6 0h1v1h-1V3zm2 0h1v1h-1V3zm9 0h1v1h-1V3zm2 0h2v1h-2V3zm9 0h2v1h-2V3zm6 1h1v1h-1V4zm8 0h1v1h-1V4zm11 0h1v1h-1V4zm4 0h1v1h-1V4zM21 4h1v1h-1V4zm9 0h1v1h-1V4zm7 0h1v1h-1V4zm9 0h1v1h-1V4zm13 1h1v1h-1V5zm11 0h1v1h-1V5zm4 0h1v1h-1V5zM4 5h1v1H4V5zm3 0h1v1H7V5zm5 0h1v1h-1V5zm28 0h1v1h-1V5zm15 1h2v1h-2V6zm10 0h1v1h-1V6zm10 0h1v1h-1V6zM1 6h1v1H1V6zm8 0h1v1H9V6zm16 0h1v1h-1V6zm8 0h1v1h-1V6zm12 0h1v1h-1V6zm2 1h1v1h-1V7zm3 0h1v1h-1V7zm2 0h1v2h-1V7zm3 0h1v1h-1V7zm4 0h1v1h-1V7zM6 7h1v1H6V7zm12 0h1v1h-1V7zm1 0h2v1h-2V7zm7 0h1v1h-1V7zm3 1h1v2h-1V8zm38 0h1v1h-1V8zm7 0h1v1h-1V8zM3 8h1v1H3V8zm4 0h1v1H7V8zm4 0h1v1h-1V8zm4 0h1v1h-1V8zm9 1h1v1h-1V9zm24 0h1v1h-1V9zm3 0h1v1h-1V9zm2 0h1v1h-1V9zm2 0h1v1h-1V9zm13 0h1v1h-1V9zm2 0h1v1h-1V9zm5 1h1v1h-1v-1zm-57 0h1v1h-1v-1zm9 0h1v1h-1v-1zm39 0h1v1h-1v-1zm5 0h2v1h-2v-1zm6 0h2v1h-2v-1zm-65 0h1v1h-1v-1zm4 1h1v1h-1v-1zm12 0h1v1h-1v-1zm3 0h1v1h-1v-1zm1 0h1v1h-1v-1zm9 0h1v1h-1v-1zm3 0h1v1h-1v-1zm2 0h1v1h-1v-1zm12 1h1v2h-1v-2zm5-1h1v1h-1v-1zM6 12h1v1H6v-1zm4 0h1v1h-1v-1zm4 0h1v1h-1v-1zm7 0h1v1h-1v-1zm2 0h1v1h-1v-1zm31 0h1v1h-1v-1zm12 0h1v1h-1v-1zm11 1h1v1h-1v-1zM1 13h1v1H1v-1zm12 0h1v1h-1v-1zm4 0h1v1h-1v-1zm7 0h1v1h-1v-1zm19 0h1v1h-1v-1zm19 0h1v1h-1v-1zm8 1h1v1h-1v-1zM2 14h1v1H2v-1zm20 0h1v1h-1v-1zm4 0h1v1h-1v-1zm5 0h2v1h-2v-1zm10 0h1v1h-1v-1zm-2-2h1v1h-1v-1zm7 2h1v1h-1v-1zm3 0h1v1h-1v-1zm1 1h2v1h-2v-1zm19 0h1v1h-1v-1zm-58 0h1v1h-1v-1zm3 0h1v1h-1v-1zm13 0h2v1h-2v-1zm9 0h1v1h-1v-1zm1-7h1v1h-1V8zm7 7h1v1h-1v-1zm10 1h1v2h-1v-2zm6 0h1v2h-1v-2zm5-1h2v1h-2v-1zm8 1h1v1h-1v-1zM5 16h1v2H5v-2zm8 0h1v1h-1v-1zm35 1h1v2h-1v-2zm4-1h1v1h-1v-1zm4 0h1v1h-1v-1zM2 16h1v1H2v-1zm17 1h1v1h-1v-1zm8 0h1v2h-1v-2zm6 0h1v1h-1v-1zm28 0h2v1h-2v-1zM3 17h1v1H3v-1zm11 0h1v1h-1v-1zm2 0h1v1h-1v-1zm8 1h1v1h-1v-1zm12 0h1v1h-1v-1zm13 0h1v1h-1v-1zm17 0h1v1h-1v-1zm2 0h2v1h-2v-1zm8 0h2v1h-2v-1zM5 18h1v1H5v-1zm6 1h1v1h-1v-1zm15 0h1v1h-1v-1zm32 0h1v1h-1v-1zm2 0h1v1h-1v-1zm13 0h1v1h-1v-1zm-56 0h1v1h-1v-1zm3 0h1v1h-1v-1zm9 1h1v1h-1v-1zm7 0h1v1h-1v-1zm6 0h1v1h-1v-1zm20 0h1v1h-1v-1zm3 0h1v1h-1v-1zm11 0h1v1h-1v-1zM6 20h2v1H6v-1zm6 0h1v1h-1v-1zm23 1h1v1h-1v-1zm11 0h1v1h-1v-1zm7 0h1v1h-1v-1zm11 0h1v1h-1v-1zm7 0h1v1h-1v-1zM5 21h1v1H5v-1zm10 0h1v1h-1v-1zm4 1h1v1h-1v-1zm17 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm34 0h1v1h-1v-1zM9 22h1v1H9v-1zm43 0h1v1h-1v-1zm8 0h1v1h-1v-1zm1 1h1v1h-1v-1zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zM2 24h1v2H2v-2zm27-1h1v1h-1v-1zm6 0h1v1h-1v-1zm5 0h2v1h-2v-1zm6 0h1v1h-1v-1zm11 0h1v1h-1v-1zm15 1h1v1h-1v-1zM4 24h1v1H4v-1zm15 0h1v1h-1v-1zm11 0h1v1h-1v-1zm9 0h1v1h-1v-1zm29 0h1v1h-1v-1zM7 25h1v1H7v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zm10 0h1v1h-1v-1zm11 0h1v1h-1v-1zm8 1h1v2h-1v-2zm18-1h2v1h-2v-1zm9 0h1v1h-1v-1zm5 0h1v1h-1v-1zm2 1h1v1h-1v-1zm-62 0h1v1h-1v-1zm5 0h1v1h-1v-1zm2 0h1v1h-1v-1zm24 0h1v1h-1v-1zm12 0h1v1h-1v-1zm3 0h1v1h-1v-1zm7 1h1v1h-1v-1zm3 0h1v1h-1v-1zM9 27h1v1H9v-1zm18 0h1v1h-1v-1zm9 0h1v1h-1v-1zm3 0h2v1h-2v-1zm10 0h1v1h-1v-1zm3 1h1v1h-1v-1zm5 0h1v1h-1v-1zm12 0h1v1h-1v-1zm7 0h2v1h-2v-1zM3 28h1v1H3v-1zm20 0h1v1h-1v-1zm3 0h1v1h-1v-1zm2 0h1v1h-1v-1zm19 1h1v1h-1v-1zm13 0h1v1h-1v-1zm1 0h1v1h-1v-1zm10 0h1v1h-1v-1zM8 29h1v1H8v-1zm8 0h2v1h-2v-1zm5 0h1v1h-1v-1zm4 1h1v1h-1v-1zm7 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm3 0h1v1h-1v-1zm4 1h1v2h-1v-2zm8 0h1v2h-1v-2zm2-1h1v1h-1v-1zm14 0h1v1h-1v-1zM1 30h1v1H1v-1zm10 1h1v1h-1v-1z\",\n      \"fill-rule\": \"evenodd\",\n      \"clip-rule\": \"evenodd\",\n      fill: \"#404040\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      d: \"M11 31h2v1h-2v-1zm7 0h1v1h-1v-1zm18 0h1v1h-1v-1zm6 0h1v1h-1v-1zm5 0h1v1h-1v-1zm12 1h1v1h-1v-1zm4 0h1v1h-1v-1z\",\n      \"fill-rule\": \"evenodd\",\n      \"clip-rule\": \"evenodd\",\n      fill: \"#404040\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      d: \"M63 32h2v1h-2v-1zm9 0h1v1h-1v-1zm5 0h1v1h-1v-1zM8 33h1v2H8v-2zm11-1h1v1h-1v-1zm23 0h1v1h-1v-1zm31 1h1v1h-1v-1zm-49 0h1v1h-1v-1zm6 0h1v1h-1v-1zm13 0h1v1h-1v-1zm6 0h1v1h-1v-1zm4 0h1v1h-1v-1zm18 0h1v1h-1v-1zm-46 1h1v2h-1v-2zm10 0h1v1h-1v-1zm15 0h1v1h-1v-1zm12 0h1v1h-1v-1zm-52 0h1v1h-1v-1zm4 1h1v2h-1v-2zm17-1h1v1h-1v-1zm8 0h1v1h-1v-1zm12 0h1v1h-1v-1zm6 1h1v2h-1v-2zm4-1h1v1h-1v-1zm8 1h1v2h-1v-2zm3 0h1v1h-1v-1zm4 0h1v1h-1v-1zm-64 0h1v1h-1v-1zm10 0h1v1h-1v-1zm2 0h1v1h-1v-1zm40 1h1v1h-1v-1zm-19 0h1v1h-1v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zm14 0h1v1h-1v-1zm8 0h1v1h-1v-1zM2 37h1v1H2v-1zm31 0h1v1h-1v-1zm2 0h1v1h-1v-1zm4 0h1v1h-1v-1zm25 0h1v1h-1v-1zm7 0h1v1h-1v-1zM5 37h1v1H5v-1zm6 0h1v1h-1v-1zm4 2h1v2h-1v-2zm30-1h1v1h-1v-1zm6 0h2v1h-2v-1zm12 0h1v1h-1v-1zm4 0h1v1h-1v-1zm5 0h1v1h-1v-1zm4 0h1v1h-1v-1zM7 38h1v1H7v-1zm6 1h1v1h-1v-1zm5 0h1v1h-1v-1zm4 0h1v1h-1v-1zm4 0h1v1h-1v-1zm5 0h1v1h-1v-1zm1 0h1v1h-1v-1zm18 1h1v2h-1v-2zm8-1h2v1h-2v-1zm-30 1h1v1h-1v-1zm10 0h1v1h-1v-1zm1 0h1v1h-1v-1zm3 0h1v1h-1v-1zm12 0h1v1h-1v-1zm2 0h1v1h-1v-1zm12 1h1v1h-1v-1zm-58 0h1v1h-1v-1zm15 0h1v1h-1v-1zm7 0h1v1h-1v-1zm2 0h1v1h-1v-1zm4 0h1v1h-1v-1zm15 0h1v1h-1v-1zm2 0h1v1h-1v-1zM2 42h1v1H2v-1zm11 0h1v1h-1v-1zm7 1h1v2h-1v-2zm2-1h1v1h-1v-1zm8 0h1v1h-1v-1zm3 0h1v1h-1v-1zm14 0h1v1h-1v-1zm9 0h1v1h-1v-1zm10 0h1v1h-1v-1zm5 1h1v1h-1v-1zm3 0h1v1h-1v-1zM4 43h1v1H4v-1zm19 0h1v1h-1v-1zm11 0h1v1h-1v-1zm4 0h1v1h-1v-1zm2 0h1v1h-1v-1zm18 1h1v1h-1v-1zm2 0h2v1h-2v-1zm7 0h1v1h-1v-1zm6 0h1v1h-1v-1zM8 44h1v1H8v-1zm4 0h3v1h-3v-1zm6 0h1v1h-1v-1zm10 1h1v1h-1v-1zm9 0h1v1h-1v-1zm10 0h1v2h-1v-2zm2 0h1v1h-1v-1zm6 0h1v1h-1v-1zm22 0h1v1h-1v-1zM1 45h1v1H1v-1z\",\n      \"fill-rule\": \"evenodd\",\n      \"clip-rule\": \"evenodd\",\n      fill: \"#404040\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      d: \"M28 45h1v1h-1v-1zm29 0h1v1h-1v-1zm2 1h1v1h-1v-1zm-43 0h2v1h-2v-1zm4 0h1v1h-1v-1zm3 0h1v1h-1v-1zm11 0h1v1h-1v-1zm7 1h1v2h-1v-2zm1 0h2v2h-1v-1h-1v-1zm20-1h1v1h-1v-1zm5 1h1v1h-1v-1zm6 0h2v2h-1v-1h-1v-1zM4 47h1v1H4v-1zm22 0h1v1h-1v-1zm11 0h2v1h-2v-1zm11 0h1v1h-1v-1zm3 0h1v1h-1v-1zm12 1h1v1h-1v-1zm3 0h1v1h-1v-1zM6 48h1v1H6v-1zm3 0h2v1H9v-1zm10 0h1v1h-1v-1zm11 0h1v1h-1v-1zm1 1h1v1h-1v-1zm6 0h1v1h-1v-1zm14 0h1v2h-1v-2zm4 0h1v1h-1v-1zM3 49h1v1H3v-1zm5 0h1v1H8v-1zm5 0h1v1h-1v-1zm4 0h1v1h-1v-1zm4 0h1v1h-1v-1zm23 1h1v1h-1v-1zm10 0h1v1h-1v-1zm13 0h1v1h-1v-1zm3 0h1v1h-1v-1zm-60 0h1v1h-1v-1zm19 1h1v2h-1v-2zm9-1h1v1h-1v-1zm14 0h1v1h-1v-1zm17 1h1v1h-1v-1zm-49 1h1v2h-1v-2zm8-1h1v1h-1v-1zm6 0h1v1h-1v-1zm7 0h1v1h-1v-1zm7 0h1v1h-1v-1zm9 1h1v2h-1v-2zm6-1h1v1h-1v-1zM8 52h1v1H8v-1zm15 0h1v1h-1v-1zm17 0h1v1h-1v-1zm4 0h1v1h-1v-1zm16 0h1v1h-1v-1zm13 0h1v1h-1v-1zm4 1h1v1h-1v-1zM2 53h1v1H2v-1zm3 0h1v1H5v-1zm4 0h1v1H9v-1zm6 0h1v1h-1v-1zm16 0h1v1h-1v-1zm8 0h1v1h-1v-1zm8 0h1v1h-1v-1zm11 1h1v1h-1v-1zm16 0h1v1h-1v-1zM6 54h1v1H6v-1zm10 0h1v1h-1v-1zm21 0h1v1h-1v-1zm8 0h1v1h-1v-1zm20 0h1v1h-1v-1zM8 55h1v1H8v-1zm3 2h1v1h-1v-1zm1-2h1v1h-1v-1zm9 0h1v1h-1v-1zm8 0h1v1h-1v-1zm3 0h1v2h-1v-2zm2 0h1v1h-1v-1zm20 0h1v2h-1v-2zM4 55h1v1H4v-1zm11 0h1v1h-1v-1zm29 0h1v1h-1v-1zm31 1h1v2h-1v-2zM3 56h1v1H3v-1zm-1 2h1v1H2v-1zm3-2h1v1H5v-1zm2 2h1v1H7v-1zm0-2h1v1H7v-1zm12 0h1v1h-1v-1zm2 0h1v1h-1v-1zm6 0h1v1h-1v-1zm3 1h1v1h-1v-1zm9 0h2v1h-2v-1zm4 0h1v1h-1v-1zm8 0h1v1h-1v-1zm3 0h1v1h-1v-1zm19 0h1v1h-1v-1zm-57 1h1v1h-1v-1zm6 0h1v1h-1v-1zm26 0h1v1h-1v-1zm15 0h1v1h-1v-1zm2 0h1v1h-1v-1zm-48 0h1v1h-1v-1zm17 0h1v1h-1v-1zm10 0h1v1h-1v-1zm6 1h1v1h-1v-1zm7 0h1v1h-1v-1zm2 0h1v1h-1v-1zm3 0h1v1h-1v-1zm5 0h1v1h-1v-1zm8 0h1v1h-1v-1z\",\n      \"fill-rule\": \"evenodd\",\n      \"clip-rule\": \"evenodd\",\n      fill: \"#404040\"\n    }\n  })])], 1), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Group\",\n      \"clip-path\": \"url(#hero-working-working-7_svg__hero-working-working-7__svgClip)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector\",\n      fill: \"#C7D2F6\",\n      d: \"M666.88 307.629c-5.283 34.272-16.284 69.432-30.235 103.433-5.971 14.585-13.733 27.559-22.835 38.905H372.345a162.647 162.647 0 01-6.46-8.541l-65.103-92.359-9.246-13.119-46.664-66.193-27.521-39.031-67.926-96.358s76.249-26.473 170.555-41.04l.145-.018c13.643-2.099 27.666-3.963 41.87-5.447l1.049-.108c105.995-10.966 222.883-1.484 277.835 76.471 28.734 40.732 34.071 91.019 26.001 143.405z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_2\",\n      fill: \"#9BB1F0\",\n      d: \"M768.732 449.967H51.012c-5.88-54.467 19.216-106.111 56.345-148.056 26.653-30.111 65.591-57.869 109.994-71.187a198.52 198.52 0 0133.89-7.075c2.063-.235 4.144-.453 6.206-.615a126.02 126.02 0 013.674-.272c2.967-.181 5.934-.307 8.938-.344 2.949-.036 5.899 0 8.848.109 4.886.181 9.753.669 14.584 1.448a131.59 131.59 0 0113.969 3.058c2.515.687 5.012 1.447 7.472 2.28 9.862 3.293 19.361 7.6 28.39 12.504a216.09 216.09 0 0111.11 6.46c4.56 2.804 8.975 5.754 13.245 8.74 21.568 15.127 39.481 31.865 52.364 42.705 4.506 3.781 9.481 8.07 15.163 12.322 1.755 1.303 3.564 2.624 5.464 3.909.579.398 1.158.778 1.755 1.176.724.489 1.466.959 2.226 1.43a115.354 115.354 0 008.124 4.668c.453.236.887.471 1.357.688a105.093 105.093 0 0023.342 8.487c3.673.868 7.4 1.538 11.146 2.008 1.049.145 2.117.254 3.202.362 1.629.163 0 0 0 0 1.683.163 3.42.308 5.193.416 2.877.163 5.845.236 8.903.199 1.954-.018 3.962-.072 6.007-.181 11.526-.615 23.631-3.13 35.989-6.478a319.917 319.917 0 006.134-1.719c6.966-2.008 14.005-4.216 21.08-6.442a2124.47 2124.47 0 015.735-1.791c4.777-1.484 9.554-2.968 14.313-4.361 9.282-2.714 18.51-5.121 27.593-6.804 15.362-2.823 30.254-3.529 44.132.018a68.381 68.381 0 016.387 1.973c79.306 28.843 90.796 106.436 95.446 140.365z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_3\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter0_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint0_linear)\",\n      d: \"M550.373 196.687c-18.926-33.115-65.284-72.49-100.857-72.671-17.895 30.744-7.509 90.694 11.418 123.79 18.926 33.096 52.997 55.878 69.119 10.495 33.71 5.357 39.228-28.5 20.32-61.614z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_4\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter1_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint1_linear)\",\n      d: \"M559.258 408.908l-.055-1.013-.072-1.05-.145-2.117a317.627 317.627 0 00-.344-4.234 332.069 332.069 0 00-.814-8.469 539.501 539.501 0 00-2.008-16.937 648.564 648.564 0 00-5.41-33.73 638.704 638.704 0 00-7.202-33.422 548.205 548.205 0 00-9.156-32.951 584.013 584.013 0 00-5.392-16.232 497.962 497.962 0 00-5.989-16.014 363.896 363.896 0 00-6.64-15.779 415.256 415.256 0 00-7.346-15.454 378.718 378.718 0 00-8.125-15.073 324.924 324.924 0 00-8.974-14.585 279.349 279.349 0 00-9.916-13.987 237.707 237.707 0 00-10.911-13.246 247.664 247.664 0 0111.345 12.902 274.994 274.994 0 0110.404 13.716 288.962 288.962 0 019.5 14.35 328.666 328.666 0 018.667 14.892 382.415 382.415 0 017.907 15.309 472.536 472.536 0 017.22 15.67 493.755 493.755 0 016.568 15.942 509.019 509.019 0 015.971 16.177 561.044 561.044 0 0110.332 32.934 647.055 647.055 0 018.395 33.494 650.88 650.88 0 016.586 33.911 670.423 670.423 0 012.606 17.1c.398 2.859.76 5.718 1.104 8.595.181 1.43.344 2.877.488 4.325l.235 2.171.109 1.086.109 1.122-9.047.597z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_5\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter2_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint2_linear)\",\n      d: \"M570.748 254.954c13.552-23.723 46.791-51.951 72.286-52.096 12.829 22.04 5.374 64.998-8.179 88.721-13.552 23.723-37.979 40.063-49.541 7.528-24.174 3.854-28.137-20.412-14.566-44.153z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_6\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter3_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint3_linear)\",\n      d: \"M556.634 406.538l.073-.814.09-.797.181-1.556c.127-1.031.253-2.063.38-3.112.253-2.063.543-4.126.832-6.171a402.277 402.277 0 011.955-12.286 462.52 462.52 0 014.885-24.339 471.866 471.866 0 016.17-24.012 397.902 397.902 0 017.563-23.596 390.867 390.867 0 014.361-11.599 286.386 286.386 0 014.795-11.419 317.734 317.734 0 015.247-11.201 254.07 254.07 0 015.754-10.965 242.193 242.193 0 016.297-10.64 239.814 239.814 0 016.894-10.26 205.904 205.904 0 017.527-9.79 171.41 171.41 0 018.197-9.192 178.83 178.83 0 00-7.763 9.554 185.208 185.208 0 00-7.038 10.079 187.75 187.75 0 00-6.369 10.495 246.738 246.738 0 00-5.754 10.821 228.08 228.08 0 00-5.193 11.093 361.014 361.014 0 00-4.687 11.309 292.021 292.021 0 00-4.216 11.491 378.24 378.24 0 00-3.781 11.635 391.504 391.504 0 00-6.388 23.614 473.614 473.614 0 00-5.012 23.941 473.983 473.983 0 00-3.709 24.139c-.507 4.035-.959 8.07-1.357 12.124-.199 2.026-.38 4.035-.543 6.061a85.392 85.392 0 00-.217 3.022l-.09 1.502-.037.742-.036.724-9.011-.597z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_7\",\n      fill: \"#fff\",\n      d: \"M608.908 376.934l-11.146 73.033h-60.887l-3.618-23.705-7.546-49.328h83.197z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_8\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter4_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint4_linear)\",\n      d: \"M557.902 449.964H361.147l88.625-63.388 95.772 45.546s8.938 6.46 12.358 17.842z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_9\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter5_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint5_linear)\",\n      d: \"M395.11 448.262s39.608-21.515 52.346-35.086c12.738-13.572 26.598-25.479 35.663-25.479 1.701 10.188 2.57 15.942 2.57 15.942l59.855 28.464s-15.742-53.182-20.265-63.931c-4.524-10.748-11.599-37.077-28.3-34.236-16.7 2.841-86.308 13.011-100.169 19.941-13.86 6.931-1.7 94.385-1.7 94.385z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_10\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter6_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint6_linear)\",\n      d: \"M369.903 262.875l25.024 33.839s10.223 13.716 27.159 14.404c22.853.941 70.368 8.016 70.368 8.016l-21.604 19.127-87.648-9.881-29.421-27.812-1.031-46.867 17.153 9.174z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_11\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter7_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint7_linear)\",\n      d: \"M333.68 208.083s22.636 16.303 36.225 54.792a1078.864 1078.864 0 00-18.113 8.487l-18.112-63.279z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_12\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter8_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint8_linear)\",\n      d: \"M449.771 331.983l-.778 3.818c-.036.235-.09.471-.144.724l-1.104 5.483c-1.321 6.568-3.51 17.407-7.129 35.358-5.845 27.758-13.697 45.908-22.889 57.688-5.465 6.985-11.381 11.726-17.642 14.892h-94.542c-7.834-3.619-13.299-10.097-19.523-21.334-4.198-7.582-8.758-17.335-14.62-29.857-1.357-2.877-2.769-5.918-4.288-9.102a200.996 200.996 0 01-5.212-12.07c-5.301-13.481-9.01-27.07-11.58-39.846-7.491-37.059-5.464-67.115-5.464-67.115.018-.308.036-.597.036-.905.977-18.855 3.257-33.983 6.369-46.107 3.854-15.073 8.957-25.496 14.403-32.68 3.166-4.18 6.441-7.238 9.626-9.5 12.123-8.541 23.197-5.302 23.197-5.302 17.479 6.17 29.62 19.633 38.739 34.87 7.31 12.214 12.648 25.568 17.226 37.222 1.103 2.786 2.153 5.483 3.166 8.052a248.318 248.318 0 002.75 6.659c.543 1.249 1.05 2.443 1.52 3.601 8.07 19.416 8.306 27.758-.343 41.348-1.52 2.407-3.33 4.958-5.411 7.781-.253.344-.506.706-.759 1.049-5.99 8.614-5.827 15.363-3.221 20.919 4.505 9.626 15.561 14.331 25.73 11.201 16.103-4.958 43.679-11.02 59.583-14.35 5.266-1.104 9.228-1.918 11.11-2.298l1.194-.199z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_13\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter9_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint9_linear)\",\n      d: \"M257.557 233.218s-5.066 14.277 58.028 4.705c-3.184-15.218-53.341-40.389-58.028-4.705z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_14\",\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint10_linear)\",\n      d: \"M441.629 318.809l5.935-12.323a2.903 2.903 0 012.787-1.628l10.639.669 6.876 4.759-5.03 6.695-3.076-4.306h-5.012l-1.068 5.103-12.051 1.031z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_15\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter10_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint11_linear)\",\n      d: \"M468.733 313.071l2.027-5.627-13.046-5.519c-1.049-.453-2.262-.217-3.094.579l-15.995 15.435c-5.085 4.687-17.334 15.815-19.632 16.232 0 0-34.488.144-91.574-31.197-3.583-2.207-4.307-7.889-5.049-17.516-.742-9.627-2.786-35.974-6.803-47.555-4.017-11.581-45.959-20.882-45.959-20.882s2.461 39.901 12.557 68.129c10.097 28.229 13.444 46.397 15.905 47.519 2.461 1.121 24.644 7.853 31.158 9.862 5.772 1.791 35.103 9.065 66.423 10.042 7.709.236 15.417.579 23.107 1.068 4.216.272 8.269.362 9.336-.199 2.461-1.267 21.659-21.479 21.659-21.479l.452-8.831s4.56-.181 4.56.815c0 .995 4.451.814 3.999-1.737-.453-2.552-3.547-6.37-3.547-6.37h-4.27l6.062-6.949 11.724 4.18z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_16\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter11_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint12_linear)\",\n      d: \"M351.791 171.819l-8.378 12.974-7.111 11.002a45.017 45.017 0 00-5.681 12.884 44.942 44.942 0 00-1.394 14.006l-48.365-34.11a125.823 125.823 0 0033.094-40.696l5.265-10.296 32.57 34.236z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_17\",\n      fill: \"#462615\",\n      d: \"M343.414 184.795l-7.111 11.002a45.011 45.011 0 00-5.681 12.883l-8.939-46.885 21.731 23z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_18\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter12_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint13_linear)\",\n      d: \"M370.446 91.694c-18.655-12.16-44.131-10.386-55.983 8.469-11.852 18.855 4.668 34.996 5.175 43.537l.669 10.333a51.448 51.448 0 0010.603 28.047c.055.073.127.145.2.236 3.22 3.673 6.875 7.075 10.621 10.223.47.399.85.724 1.194 1.014.217.217.434.434.688.651 4.197 3.746 10.078 4.017 13.136.597 1.285-1.429 1.864-3.293 1.791-5.247a5.163 5.163 0 011.864-1.357l7.997-9.772 4.108-.326s-1.285-1.049-.489-2.859l3.004.29c3.293.326 6.224-2.081 6.55-5.393.072-.796 0-1.61-.253-2.388l-.579-1.846c-.778-2.479-.616-5.139-.254-7.69.38-2.769 1.032-5.646 2.95-7.781 2.551-2.823 6.676-9.41 7.527-11.274 8.287-18.222-1.864-35.322-20.519-47.464z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_19\",\n      fill: \"#623721\",\n      d: \"M370.249 166.083l-.398 7.002s-4.831-4.107.398-7.002z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_20\",\n      fill: \"#462615\",\n      d: \"M368.566 171.115l5.736 1.213s-1.972-3.656-5.736-1.213z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Union\",\n      fill: \"#462615\",\n      d: \"M366.448 182.859c3.329.217 6.025-4.759 6.025-4.759-2.196-1.967-4.828-1.005-7.341-.087-1.069.391-2.116.774-3.099.92-2.273.337-3.236.01-3.614-.224l-.222-.193c.003.06.54 10.622 5.88 10.785 4.266.113 3.981-1.692 3.733-3.266a15 15 0 01-.078-.534c-.164-1.368-1.228-2.036-2.832-2.835.487.093 1.003.159 1.548.193z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Union_2\",\n      fill: \"#462615\",\n      d: \"M381.411 146.811l-.543.344c-1.777 1.139-3.711-.41-5.537-1.873-1.075-.861-2.112-1.692-3.057-1.927-2.8-.696-5.723-.372-8.604-.051-1.086.12-2.165.24-3.23.305 1.587-.405 3.162-.821 4.745-1.24l.991-.262a19.403 19.403 0 0116.447 3.166l-1.212 1.538zm-6.386 6.063a3.93 3.93 0 01-2.389.851c-.275 0-.827-.128-1.541-.335-.156.54-.563 1.23-1.15 1.888-1.018 1.141-2.194 1.753-2.626 1.367-.433-.386.042-1.624 1.06-2.764a6.452 6.452 0 011.106-.996c-3.229-1.069-7.633-2.78-7.633-2.78s5.084.218 7.057.851c1.972.633 6.116 1.918 6.116 1.918z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_21\",\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint14_linear)\",\n      d: \"M389.029 117.788c1.085.525 2.225.815 3.655.561-1.339-5.175-4.216-9.844-7.636-13.969-16.972-20.52-53.812-30.907-70.603-4.217-9.716 15.436-.38 29.08 3.601 38.2l8.54.271 10.929-5.736c3.239-1.701 5.754-4.614 6.622-8.161 1.412-5.754 10.64-9.428 15.489-10.984 5.482-1.755 11.381-2.244 17.045-1.14a32.433 32.433 0 018.25 2.805c1.538.742 2.769 1.737 4.108 2.37z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_22\",\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint15_linear)\",\n      d: \"M331.201 153.58c-10.024 4.071-17.66-13.427-15.724-21.135 2.569-10.26 15.362-11.563 19.343-1.756 3.347 8.252 1.158 20.955-3.619 22.891z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_23\",\n      fill: \"#fff\",\n      d: \"M329.634 157.279c1.983-2.222 2.242-5.226.58-6.71-1.663-1.484-4.618-.886-6.601 1.336-1.983 2.222-2.243 5.226-.581 6.71 1.663 1.484 4.619.886 6.602-1.336z\"\n    }\n  }), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_24\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter13_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint16_linear)\",\n      d: \"M257.557 233.217s-4.125-49.4 25.911-54.647c30.036-5.248 32.117 59.316 32.117 59.334-.036-.905-3.745-3.185-4.379-3.655-3.257-2.461-6.767-4.687-10.512-6.297-7.654-3.258-16.231-3.999-24.446-3.221-3.564.325-7.273.796-10.639 2.099-1.791.705-8.269 3.89-8.052 6.387z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_25\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter14_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"#fff\",\n      d: \"M477.491 343.527l-22.762-2.461c-5.482-.597-8.233-6.93-4.94-11.346l64.234-85.952a7.139 7.139 0 017.853-2.534l19.56 6.171c3.745 1.176 5.826 5.175 4.65 8.921a6.906 6.906 0 01-1.086 2.117l-61.049 82.225a7.053 7.053 0 01-6.46 2.859z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_26\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter15_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint17_linear)\",\n      d: \"M487.281 336.234s10.965-.181 15.126-2.967c0 0 2.606-2.461 3.999-3.04 1.393-.579 4.849-2.208 5.591-4.108 2.135 0 5.591-1.809 5.501-4.524 3.203-1.321 5.591-3.782 5.338-4.686-.254-.905-2.389-4.09-2.389-4.09s3.945-1.9 3.112-4.289c-.832-2.388-3.944-12.395-4.179-17.154-.236-4.759-.815-6.315-2.552-6.243-1.737.073-4.849 5.99-3.365 14.368-1.882-2.95-4.922-8.378-4.922-8.378s-6.079 2.624-2.388 10.423c2.207 5.428 3.782 10.024 3.782 10.024s-9.681-11.997-13.553-8.703c-3.872 3.293 1.556 6.84 1.556 6.84s-3.8-2.244-4.777-.851c-.977 1.394-2.678 4.614 5.519 11.961l-11.399 15.417z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_27\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter16_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint18_linear)\",\n      d: \"M143.167 322.193s2.552-5.247 2.353-8.921c-.199-3.673 1.99-5.609 1.99-5.609l9.373 14.512-13.716.018z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Union_3\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter17_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint19_linear)\",\n      d: \"M161.244 401.63s-7.672-19.289-10.748-38.235l32.623 34.49s-9.21 17.57-13.661 27.993c-4.451 10.423-11.272 24.085-11.272 24.085H143.33s-.868-9.391 8.016-6.84c4.777-9.301 5.627-12.468 5.627-12.468l4.271-29.025z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint20_linear)\",\n      d: \"M293.022 418.044s2.388-3.276 1.339-9.319c-.941-5.429-4.669-13.083-15.398-22.602-6.768-5.989-12.449-8.269-17.081-8.504-10.857-.543-15.941 10.115-15.941 10.115l27.865 27.36s5.663 6.406 0 13.553c-5.664 7.148-6.405 8.632-6.405 8.632l-3.203 4.687s-7.401 1.936-5.175 7.744c2.859.254 12.485.254 12.811.254l21.188-31.92z\"\n    }\n  })]), _vm._v(\" \"), _c(\"g\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_28\",\n      filter: \"url(#hero-working-working-7_svg__hero-working-working-7__filter18_di)\"\n    }\n  }, [_c(\"path\", {\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__paint21_linear)\",\n      d: \"M322.48 401.812c-4.958-.688-14.005-9.554-17.081-13.481 2.388-11.436-3.583-30.563-5.808-38.235 8.685-7.021 12.394-19.67 13.86-30.274a65.904 65.904 0 00.181-16.123c-.579-5.446-3.348-10.387-5.79-15.164-2.063-4.035-4.035-8.36-4.415-12.92-.308-3.601 2.117-9.047-1.104-11.888-7.853-.851-12.63 9.228-8.197 17.751 4.433 8.523 9.554 20.321 9.554 29.876 0 9.554-7.853 20.664-14.005 26.455-6.152 5.79-27.829.163-45.072-.344-17.244-.507-47.624 4.09-55.314 5.971-7.69 1.882-12.63-5.627-15.543-9.21-1.212-2.823-2.442-5.049-4.125-6.894 1.212-3.945 2.171-10.224.687-13.119-2.044-3.981-6.115-.561-7.744.959-1.067 1.013-3.89 3.474-5.718 5.066-9.897-3.04-19.197 3.113-23.232 6.316-.507 4.089-3.076 5.283-6.822 9.554-1.701 7.509 6.315 12.287 6.315 12.287l7.002 1.031s3.221 2.551 10.423 14.006c.615 3.746.886 5.79 1.284 7.781l3.583 13.336 1.502-4.723 2.605 11.961 2.479-5.085 1.303 10.659 3.782-5.085v9.355l5.084-5.085v5.447l4.288-4.289c.254.109.525.199.796.272v5.682l5.736-5.718c.055-.018.109-.019.163-.037 0 0 2.949-.217 7.039-.796 3.944 5.736 9.155 14.694 9.626 22.438.742 12.577 0 19.978 0 19.978s-7.636 3.438-4.922 10.477c6.912 0 14.059-.254 14.059-.254s5.121-6.532 5.628-53.344c16.718 2.261 38.612.669 52.074-.019 21.514 11.437 43.535 17.752 43.535 17.752s2.388.85 5.464 4.614c3.076 3.764 6.496 16.395 5.808 22.873-4.957 1.701-4.179 8.378-4.179 8.378h11.272l3.673-14.856c0-.037-8.196-29.568-9.734-33.332z\"\n    }\n  })]), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Union_4\",\n      fill: \"#DF7838\",\n      d: \"M133.614 326.554l.021-.017c-.295.015-.572.247-.782.614a3.903 3.903 0 00-.416 1.737v.253c0 .229.021.457.063.683.568-.922.949-1.944 1.114-3.27zm10.585 4.578a3.85 3.85 0 00.362-1.737c-.036-.868-.742-1.556-1.593-1.556h-.633a4.538 4.538 0 00-.271 1.556 3.836 3.836 0 00.362 1.737h1.773z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Union_5\",\n      fill: \"#2D2D2D\",\n      d: \"M132.499 329.824c.164-.266.313-.54.445-.827a21.5 21.5 0 00-.091-1.846 3.904 3.904 0 00-.416 1.738v.253c0 .228.021.456.062.682zm10.831 1.325c.109-.416.145-.832.145-1.266 0-.634-.29-1.122-.652-1.122h-.253a5.784 5.784 0 00-.109 1.122c0 .434.037.85.145 1.266h.724z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    attrs: {\n      id: \"hero-working-working-7_svg__hero-working-working-7__Vector_29\",\n      fill: \"#2D2D2D\",\n      d: \"M126.938 336.09l.524.597 2.19-.597-1.991 3.619-1.049-1.611.326-2.008z\"\n    }\n  }), _vm._v(\" \"), _c(\"path\", {\n    staticStyle: {\n      \"mix-blend-mode\": \"overlay\"\n    },\n    attrs: {\n      fill: \"url(#hero-working-working-7_svg__hero-working-working-7__texture)\",\n      d: \"M319.951 93.33c5.339-5.153 11.786-7.938 18.621-8.842 7.986-1.28 16.572-.128 24.497 3.262 105.989-10.962 222.863-1.475 277.81 76.474 28.733 40.731 34.071 91.016 26.002 143.401l.018.004a68.381 68.381 0 016.387 1.973c79.306 28.843 90.796 106.436 95.446 140.365H328.549l-.008.033h-11.272l-.001-.009-.003-.024H199.517c-1.501.02-3.075.033-4.637.033l-.013-.033H51.012c-5.88-54.467 19.216-106.111 56.345-148.056 26.653-30.111 65.591-57.869 109.994-71.187l-67.926-96.358s76.233-26.468 170.526-41.035z\",\n      opacity: \"0.45\"\n    }\n  })])])])])]);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/medias-1.vue?vue&type=template&id=54607d73&scoped=true&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true&":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render),\n/* harmony export */   \"staticRenderFns\": () => (/* binding */ staticRenderFns)\n/* harmony export */ });\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c(\"div\", {\n    staticClass: \"w-100\"\n  }, [_c(\"div\", {\n    staticClass: \"d-flex flex-column\"\n  }, [_c(\"v-row\", [_c(\"v-col\", {\n    attrs: {\n      cols: \"12\"\n    }\n  }, [_c(\"a-card\", [_c(\"div\", {\n    staticClass: \"d-flex flex-row justify-content-between\"\n  }, [_c(\"p\", {\n    staticClass: \"font-weight-black text-h1 text-center\",\n    staticStyle: {\n      color: \"black\",\n      opacity: \"1\",\n      \"vertical-align\": \"middle\"\n    }\n  }, [_c(\"b-field\", {\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_c(\"span\", {\n          staticClass: \"font-weight-black text-h4\",\n          staticStyle: {\n            \"font-size\": \"40px\"\n          }\n        }, [_vm._v(\"Ajouter une réalisation\")])];\n      },\n      proxy: true\n    }])\n  })], 1), _vm._v(\" \"), _c(\"add-realisation-1\", {\n    attrs: {\n      width: \"200px\",\n      height: \"100px\"\n    }\n  })], 1)])], 1), _vm._v(\" \"), _c(\"v-col\", {\n    attrs: {\n      cols: \"12\"\n    }\n  }, [_c(\"a-card\", {\n    staticClass: \"p-0\",\n    staticStyle: {\n      background: \"#f0f2f5\"\n    },\n    attrs: {\n      loading: _vm.isLoading\n    }\n  }, [_c(\"v-stepper\", {\n    staticClass: \"vert\",\n    staticStyle: {\n      background: \"#f0f2f5\"\n    },\n    attrs: {\n      \"non-linear\": false\n    },\n    model: {\n      value: _vm.e1,\n      callback: function callback($$v) {\n        _vm.e1 = $$v;\n      },\n      expression: \"e1\"\n    }\n  }, [_c(\"v-stepper-header\", [_c(\"v-stepper-step\", {\n    attrs: {\n      step: \"1\",\n      color: \"#24855a\"\n    }\n  }, [_c(\"b-field\", {\n    attrs: {\n      \"custom-class\": \"is-medium\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_vm._v(\" Informations de base \")];\n      },\n      proxy: true\n    }])\n  })], 1), _vm._v(\" \"), _c(\"v-divider\"), _vm._v(\" \"), _c(\"v-stepper-step\", {\n    attrs: {\n      step: \"2\",\n      color: \"#24855a\"\n    }\n  }, [_c(\"b-field\", {\n    attrs: {\n      \"custom-class\": \"is-medium\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_vm._v(\" Decription \")];\n      },\n      proxy: true\n    }])\n  })], 1), _vm._v(\" \"), _c(\"v-divider\"), _vm._v(\" \"), _c(\"v-stepper-step\", {\n    attrs: {\n      step: \"3\",\n      color: \"#24855a\"\n    }\n  }, [_c(\"b-field\", {\n    attrs: {\n      \"custom-class\": \"is-medium\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_vm._v(\" Médias \")];\n      },\n      proxy: true\n    }])\n  })], 1)], 1), _vm._v(\" \"), _c(\"v-stepper-items\", [_c(\"v-stepper-content\", {\n    attrs: {\n      step: \"1\"\n    }\n  }, [_c(\"a-row\", [_c(\"a-col\", {\n    attrs: {\n      sm: {\n        span: 24\n      },\n      md: {\n        span: 22,\n        offset: 2\n      },\n      lg: _defineProperty({\n        offset: 3,\n        span: 18\n      }, \"offset\", 3),\n      xl: _defineProperty({\n        offset: 3,\n        span: 18\n      }, \"offset\", 3),\n      xs: {\n        span: 24\n      }\n    }\n  }, [_c(\"div\", [_c(\"a-card\", {\n    staticClass: \"mx-2 my-5 elevation_0 my-card_1\",\n    staticStyle: {\n      \"border-radius\": \"12px\"\n    }\n  }, [_c(\"div\", {\n    staticClass: \"d-flex flex-row justify-content-between\"\n  }, [_c(\"p\", {\n    staticClass: \"font-weight-black text-h1 text-center\",\n    staticStyle: {\n      color: \"black\",\n      opacity: \"1\",\n      \"vertical-align\": \"middle\"\n    }\n  }, [_c(\"b-field\", {\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_c(\"span\", {\n          staticClass: \"font-weight-black text-h4\",\n          staticStyle: {\n            \"font-size\": \"40px\"\n          }\n        }, [_vm._v(\"Informations de base\")])];\n      },\n      proxy: true\n    }])\n  })], 1), _vm._v(\" \"), _c(\"infos-base-1\", {\n    attrs: {\n      width: \"200px\",\n      height: \"100px\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"a-card\", {\n    staticClass: \"mx-2 my-5 elevation_0 my-card_1\",\n    staticStyle: {\n      \"border-radius\": \"12px\"\n    }\n  }, [_c(\"b-field\", {\n    attrs: {\n      \"custom-class\": \"is-medium\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_c(\"span\", {\n          staticStyle: {\n            color: \"red\"\n          }\n        }, [_vm._v(\"* \")]), _c(\"span\", {\n          staticStyle: {\n            \"font-size\": \"16px\"\n          }\n        }, [_vm._v(\"Titre de la réalisation\")]), _vm._v(\" \"), _c(\"b-tooltip\", {\n          attrs: {\n            position: \"is-right\",\n            type: \"is-success\",\n            label: \"Il s'agit du titre de votre réalisation/projet\"\n          }\n        }, [_c(\"v-icon\", {\n          attrs: {\n            small: \"\",\n            color: \"#24855a\"\n          }\n        }, [_vm._v(\"mdi-information \")])], 1)];\n      },\n      proxy: true\n    }])\n  }, [_vm._v(\" \"), _c(\"b-input\", {\n    attrs: {\n      value: _vm.title,\n      type: \"text\",\n      size: \"is-medium\"\n    },\n    on: {\n      input: _vm.valideTitle\n    }\n  })], 1), _vm._v(\" \"), _vm.viewInfoTilte == true ? _c(\"b-message\", {\n    attrs: {\n      type: \"is-info\",\n      closable: \"true\",\n      duration: 7\n    }\n  }, [_vm._v(\"\\n                          Il s'agit du titre de votre réalisation/projet\\n                        \")]) : _vm._e(), _vm._v(\" \"), _c(\"b-field\", {\n    attrs: {\n      \"custom-class\": \"is-medium\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_c(\"span\", {\n          staticStyle: {\n            color: \"red\"\n          }\n        }, [_vm._v(\"* \")]), _c(\"span\", {\n          staticStyle: {\n            \"font-size\": \"16px\"\n          }\n        }, [_vm._v(\"Tags\")]), _vm._v(\" \"), _c(\"b-tooltip\", {\n          attrs: {\n            position: \"is-right\",\n            label: \"Choisissez un ou plusieurs mots clés liés à votre réalisation/projet. S'il le\\n                          mot clé que vous voulez n'existe pas, vous pouvez l'ajouter.\",\n            size: \"is-medium\",\n            type: \"is-success\",\n            multilined: \"\"\n          }\n        }, [_c(\"v-icon\", {\n          attrs: {\n            small: \"\",\n            color: \"#24855a\"\n          }\n        }, [_vm._v(\"mdi-information \")])], 1)];\n      },\n      proxy: true\n    }])\n  }, [_vm._v(\" \"), _c(\"v-autocomplete\", {\n    attrs: {\n      color: \"#24855a\",\n      value: _vm.name,\n      items: _vm.tags,\n      dense: \"\",\n      chips: \"\",\n      \"small-chips\": \"\",\n      label: \"Tags\",\n      \"item-text\": \"name\",\n      \"item-value\": \"id\",\n      multiple: \"\",\n      solo: \"\"\n    },\n    on: {\n      \"update:search-input\": function updateSearchInput(event) {\n        return _vm.name = event;\n      }\n    },\n    scopedSlots: _vm._u([{\n      key: \"selection\",\n      fn: function fn(data) {\n        return [_c(\"v-chip\", _vm._b({\n          staticStyle: {\n            \"border-style\": \"solid\",\n            \"border-color\": \"#24855a\"\n          },\n          attrs: {\n            color: \"#24855a\",\n            \"text-color\": \"white\",\n            \"input-value\": data.selected,\n            close: \"\"\n          },\n          on: {\n            click: data.select,\n            \"click:close\": function clickClose($event) {\n              return _vm.remove(data.item);\n            }\n          }\n        }, \"v-chip\", data.attrs, false), [_vm._v(\"\\n                                \" + _vm._s(data.item.name) + \"\\n                              \")])];\n      }\n    }]),\n    model: {\n      value: _vm.values,\n      callback: function callback($$v) {\n        _vm.values = $$v;\n      },\n      expression: \"values\"\n    }\n  }, [_vm._v(\" \"), _c(\"template\", {\n    slot: \"prepend-item\"\n  }, [_c(\"b-button\", {\n    attrs: {\n      type: \"is-susscess\",\n      outlined: \"\"\n    },\n    on: {\n      click: _vm.showAddTag\n    }\n  }, [_vm._v(\"\\n                                Ajouter un tag\\n                              \")])], 1)], 2)], 1)], 1), _vm._v(\" \"), _c(\"a-card\", {\n    staticClass: \"mx-2 my-5 elevation_0 my-card_1\",\n    staticStyle: {\n      \"border-radius\": \"12px\"\n    }\n  }, [_c(\"b-button\", {\n    attrs: {\n      type: \"is-bleue\"\n    },\n    on: {\n      click: function click($event) {\n        _vm.e1 = 2;\n      }\n    }\n  }, [_vm._v(\" Continuer\")])], 1)], 1)]), _vm._v(\" \"), _c(\"a-col\", {\n    attrs: {\n      sm: {\n        span: 24\n      },\n      md: {\n        span: 22,\n        offset: 2\n      },\n      lg: _defineProperty({\n        offset: 3,\n        span: 18\n      }, \"offset\", 3),\n      xl: _defineProperty({\n        offset: 3,\n        span: 18\n      }, \"offset\", 3),\n      xs: {\n        span: 24\n      }\n    }\n  })], 1)], 1), _vm._v(\" \"), _c(\"v-stepper-content\", {\n    attrs: {\n      step: \"2\"\n    }\n  }, [_c(\"a-row\", [_c(\"a-col\", {\n    attrs: {\n      sm: {\n        span: 24\n      },\n      md: {\n        span: 22,\n        offset: 2\n      },\n      lg: _defineProperty({\n        offset: 2,\n        span: 20\n      }, \"offset\", 2),\n      xl: _defineProperty({\n        offset: 2,\n        span: 20\n      }, \"offset\", 2),\n      xs: {\n        span: 24\n      }\n    }\n  }, [_c(\"a-card\", {\n    staticClass: \"my-2\",\n    staticStyle: {\n      \"border-radius\": \"8px 8px\"\n    }\n  }, [_c(\"div\", {\n    staticClass: \"d-flex flex-row justify-content-between\"\n  }, [_c(\"p\", {\n    staticClass: \"font-weight-black text-h1 text-center\",\n    staticStyle: {\n      color: \"black\",\n      opacity: \"1\",\n      \"vertical-align\": \"middle\"\n    }\n  }, [_c(\"b-field\", {\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_c(\"span\", {\n          staticClass: \"font-weight-black text-h4\",\n          staticStyle: {\n            \"font-size\": \"40px\"\n          }\n        }, [_vm._v(\"Description\")])];\n      },\n      proxy: true\n    }])\n  })], 1), _vm._v(\" \"), _c(\"description-1\", {\n    attrs: {\n      width: \"200px\",\n      height: \"100px\"\n    }\n  })], 1)])], 1), _vm._v(\" \"), _c(\"a-col\", {\n    attrs: {\n      sm: {\n        span: 24\n      },\n      md: {\n        span: 22,\n        offset: 2\n      },\n      lg: _defineProperty({\n        offset: 2,\n        span: 20\n      }, \"offset\", 2),\n      xl: _defineProperty({\n        offset: 2,\n        span: 20\n      }, \"offset\", 2),\n      xs: {\n        span: 24\n      }\n    }\n  }, [_c(\"a-card\", {\n    staticClass: \"elevation_1 mon-card_1 my-2\",\n    staticStyle: {\n      \"border-radius\": \"8px 8px\"\n    }\n  }, [_c(\"template\", {\n    slot: \"title\"\n  }), _vm._v(\" \"), _c(\"vue-editor\", {\n    ref: \"editor\",\n    attrs: {\n      placeholder: \"Décrivez votre projet/réalisation\",\n      useCustomImageHandler: \"\",\n      editorToolbar: _vm.customToolbar,\n      editorOptions: _vm.editorSettings\n    },\n    on: {\n      \"image-added\": _vm.handleImageAdded,\n      \"image-removed\": _vm.handleImageRemoved\n    },\n    model: {\n      value: _vm.description,\n      callback: function callback($$v) {\n        _vm.description = $$v;\n      },\n      expression: \"description\"\n    }\n  })], 2)], 1), _vm._v(\" \"), _c(\"a-col\", {\n    attrs: {\n      sm: {\n        span: 24\n      },\n      md: {\n        span: 22,\n        offset: 2\n      },\n      lg: _defineProperty({\n        offset: 2,\n        span: 20\n      }, \"offset\", 2),\n      xl: _defineProperty({\n        offset: 2,\n        span: 20\n      }, \"offset\", 2),\n      xs: {\n        span: 24\n      }\n    }\n  }, [_c(\"a-card\", {\n    staticClass: \"elevation_1 mon-card_1 my-2\",\n    staticStyle: {\n      \"border-radius\": \"8px 8px\"\n    }\n  }, [_c(\"v-btn\", {\n    staticStyle: {\n      color: \"white\"\n    },\n    attrs: {\n      color: \"#24855a\"\n    },\n    on: {\n      click: function click($event) {\n        _vm.e1 = 3;\n      }\n    }\n  }, [_vm._v(\"\\n                        Continuer\")]), _vm._v(\" \"), _c(\"v-btn\", {\n    attrs: {\n      text: \"\"\n    },\n    on: {\n      click: function click($event) {\n        _vm.e1 = 1;\n      }\n    }\n  }, [_vm._v(\" Réculer\")])], 1)], 1)], 1)], 1), _vm._v(\" \"), _c(\"v-stepper-content\", {\n    attrs: {\n      step: \"3\"\n    }\n  }, [_c(\"a-col\", {\n    attrs: {\n      sm: {\n        span: 24\n      },\n      md: {\n        span: 22,\n        offset: 2\n      },\n      lg: _defineProperty({\n        offset: 3,\n        span: 18\n      }, \"offset\", 3),\n      xl: _defineProperty({\n        offset: 3,\n        span: 18\n      }, \"offset\", 3),\n      xs: {\n        span: 24\n      }\n    }\n  }, [_c(\"a-card\", {\n    staticClass: \"my-2\",\n    staticStyle: {\n      \"border-radius\": \"8px 8px\"\n    }\n  }, [_c(\"div\", {\n    staticClass: \"d-flex flex-row justify-content-between\"\n  }, [_c(\"p\", {\n    staticClass: \"font-weight-black text-h1 text-center\",\n    staticStyle: {\n      color: \"black\",\n      opacity: \"1\",\n      \"vertical-align\": \"middle\"\n    }\n  }, [_c(\"b-field\", {\n    scopedSlots: _vm._u([{\n      key: \"label\",\n      fn: function fn() {\n        return [_c(\"span\", {\n          staticClass: \"font-weight-black text-h4\",\n          staticStyle: {\n            \"font-size\": \"40px\"\n          }\n        }, [_vm._v(\"Médias\")])];\n      },\n      proxy: true\n    }])\n  })], 1), _vm._v(\" \"), _c(\"medias-1\", {\n    attrs: {\n      width: \"200px\",\n      height: \"100px\"\n    }\n  })], 1)]), _vm._v(\" \"), _c(\"a-card\", {\n    staticClass: \"elevation_1 mon-card_1 my-2\",\n    staticStyle: {\n      \"border-radius\": \"8px 8px\"\n    }\n  }, [_c(\"a-form-model-item\", [_c(\"vs-collapse\", [_c(\"vs-collapse-item\", {\n    staticClass: \"overflow-auto\"\n  }, [_c(\"div\", {\n    staticClass: \"card-header pointer\",\n    attrs: {\n      slot: \"header\"\n    },\n    slot: \"header\"\n  }, [_c(\"b-field\", {\n    attrs: {\n      label: \"Ajouter un poster pour la réalisation\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"VueFileAgent\", {\n    ref: \"poster\",\n    attrs: {\n      multiple: false,\n      deletable: true,\n      meta: true,\n      accept: \"image/*\",\n      maxSize: \"10MB\",\n      helpText: \"Choisir l'image du poster\",\n      errorText: {\n        type: \"Le type de l'image est invalide\",\n        size: \"La taille du fichier ne doit pas dépasser 10Mo\"\n      }\n    },\n    on: {\n      select: function select($event) {\n        return _vm.filesSelected($event, \"poster\");\n      },\n      beforedelete: function beforedelete($event) {\n        return _vm.onBeforeDelete($event, \"poster\");\n      },\n      \"delete\": function _delete($event) {\n        return _vm.fileDeleted($event, \"poster\", \"image\");\n      },\n      upload: function upload($event) {\n        return _vm.retourUpload($event, \"poster\");\n      },\n      \"upload:error\": function uploadError($event) {\n        return _vm.retourError($event, \"poster\");\n      }\n    },\n    model: {\n      value: _vm.records[\"poster\"],\n      callback: function callback($$v) {\n        _vm.$set(_vm.records, \"poster\", $$v);\n      },\n      expression: \"records['poster']\"\n    }\n  }), _vm._v(\" \"), _c(\"v-btn\", {\n    staticClass: \"ma-2 white--text\",\n    staticStyle: {\n      color: \"white\"\n    },\n    attrs: {\n      loading: _vm.loading[\"poster\"],\n      disabled: _vm.loading[\"poster\"],\n      color: \"#24855a\"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.uploadFiles(\"poster\", \"image\", \"ressources/posters\");\n      }\n    }\n  }, [_vm._v(\"\\n                            Importer \" + _vm._s(_vm.recordsForUpload[\"poster\"].length) + \" files\\n                            \"), _c(\"v-icon\", {\n    attrs: {\n      right: \"\",\n      dark: \"\"\n    }\n  }, [_vm._v(\" mdi-cloud-upload \")])], 1)], 1)], 1)], 1), _vm._v(\" \"), _c(\"a-form-model-item\", [_c(\"vs-collapse\", [_c(\"vs-collapse-item\", {\n    staticClass: \"overflow-auto\"\n  }, [_c(\"div\", {\n    staticClass: \"card-header pointer\",\n    attrs: {\n      slot: \"header\"\n    },\n    slot: \"header\"\n  }, [_c(\"b-field\", {\n    attrs: {\n      label: \"Ajouter une vidéo\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"VueFileAgent\", {\n    ref: \"video\",\n    attrs: {\n      multiple: false,\n      deletable: true,\n      meta: true,\n      accept: \"video/*,.avi\",\n      maxSize: \"100MB\",\n      helpText: \"Choisir la vidéo à ajouter\",\n      errorText: {\n        type: \"Le fichier que vous avez choisir n'a pas un format vidéo\",\n        size: \"La taille d' une vidéo ne doit pas dépasser 100Mo\"\n      }\n    },\n    on: {\n      select: function select($event) {\n        return _vm.filesSelected($event, \"video\");\n      },\n      beforedelete: function beforedelete($event) {\n        return _vm.onBeforeDelete($event, \"video\");\n      },\n      \"delete\": function _delete($event) {\n        return _vm.fileDeleted($event, \"video\", \"video\");\n      },\n      upload: function upload($event) {\n        return _vm.retourUpload($event, \"video\");\n      },\n      \"upload:error\": function uploadError($event) {\n        return _vm.retourError($event, \"video\");\n      }\n    },\n    model: {\n      value: _vm.records[\"video\"],\n      callback: function callback($$v) {\n        _vm.$set(_vm.records, \"video\", $$v);\n      },\n      expression: \"records['video']\"\n    }\n  }), _vm._v(\" \"), _c(\"v-btn\", {\n    staticClass: \"ma-2 white--text\",\n    staticStyle: {\n      color: \"white\"\n    },\n    attrs: {\n      loading: _vm.loading[\"video\"],\n      disabled: _vm.loading[\"video\"],\n      color: \"#24855a\"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.uploadFiles(\"video\", \"video\", \"ressources/videos\");\n      }\n    }\n  }, [_vm._v(\"\\n                            Importer \" + _vm._s(_vm.recordsForUpload[\"video\"].length) + \" files\\n                            \"), _c(\"v-icon\", {\n    attrs: {\n      right: \"\",\n      dark: \"\"\n    }\n  }, [_vm._v(\" mdi-cloud-upload \")])], 1)], 1)], 1)], 1), _vm._v(\" \"), _c(\"a-form-model-item\", [_c(\"vs-collapse\", [_c(\"vs-collapse-item\", {\n    staticClass: \"overflow-auto\"\n  }, [_c(\"div\", {\n    staticClass: \"card-header pointer\",\n    attrs: {\n      slot: \"header\"\n    },\n    slot: \"header\"\n  }, [_c(\"b-field\", {\n    attrs: {\n      label: \"Ajouter des documents\"\n    }\n  })], 1), _vm._v(\" \"), _c(\"VueFileAgent\", {\n    ref: \"docs\",\n    attrs: {\n      multiple: true,\n      deletable: true,\n      meta: true,\n      accept: \".pdf,.docx,.doc,.odt,.txt,.ods,.zip\",\n      maxSize: \"100MB\",\n      helpText: \"Choisir le document à ajouter\",\n      errorText: {\n        type: \"Le fichier que vous avez choisir n'a pas un des formats autorisés\",\n        size: \"La taille d' une vidéo ne doit pas dépasser 100Mo\"\n      }\n    },\n    on: {\n      select: function select($event) {\n        return _vm.filesSelected($event, \"docs\");\n      },\n      beforedelete: function beforedelete($event) {\n        return _vm.onBeforeDelete($event, \"docs\");\n      },\n      \"delete\": function _delete($event) {\n        return _vm.fileDeleted($event, \"docs\", \"image\");\n      },\n      upload: function upload($event) {\n        return _vm.retourUpload($event, \"docs\");\n      },\n      \"upload:error\": function uploadError($event) {\n        return _vm.retourError($event, \"docs\");\n      }\n    },\n    model: {\n      value: _vm.records[\"docs\"],\n      callback: function callback($$v) {\n        _vm.$set(_vm.records, \"docs\", $$v);\n      },\n      expression: \"records['docs']\"\n    }\n  }), _vm._v(\" \"), _c(\"v-btn\", {\n    staticClass: \"ma-2 white--text\",\n    staticStyle: {\n      color: \"white\"\n    },\n    attrs: {\n      loading: _vm.loading[\"docs\"],\n      disabled: _vm.loading[\"docs\"],\n      color: \"#24855a\"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.uploadFiles(\"docs\", \"image\", \"ressources/docs\");\n      }\n    }\n  }, [_vm._v(\"\\n                            Importer \" + _vm._s(_vm.recordsForUpload[\"docs\"].length) + \" files\\n                            \"), _c(\"v-icon\", {\n    attrs: {\n      right: \"\",\n      dark: \"\"\n    }\n  }, [_vm._v(\" mdi-cloud-upload \")])], 1)], 1)], 1)], 1)], 1), _vm._v(\" \"), _c(\"a-card\", {\n    staticClass: \"elevation_1 mon-card_1 my-2\",\n    staticStyle: {\n      \"border-radius\": \"8px 8px\"\n    }\n  }, [_vm.importation ? _c(\"v-alert\", {\n    attrs: {\n      text: \"\",\n      prominent: \"\",\n      type: \"error\"\n    }\n  }, [_vm._v(\"\\n                      Il y a des médias que vous n'avez pas importé ou qui sont en cours\\n                      d'importation.\\n                    \")]) : _vm._e(), _vm._v(\" \"), _vm.vide ? _c(\"v-alert\", {\n    attrs: {\n      text: \"\",\n      prominent: \"\",\n      type: \"error\"\n    }\n  }, [_vm._v(\"\\n                      Il y a des champs vides\\n                    \")]) : _vm._e(), _vm._v(\" \"), _c(\"v-btn\", {\n    staticStyle: {\n      color: \"white\"\n    },\n    attrs: {\n      color: \"#24855a\"\n    },\n    on: {\n      click: _vm.submitForm\n    }\n  }, [_vm._v(\"\\n                      Soumettre\")]), _vm._v(\" \"), _c(\"v-btn\", {\n    attrs: {\n      text: \"\"\n    },\n    on: {\n      click: function click($event) {\n        _vm.e1 = 2;\n      }\n    }\n  }, [_vm._v(\" Réculer\")])], 1)], 1)], 1)], 1)], 1)], 1)], 1)], 1)], 1)]);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true&\n");

/***/ }),

/***/ "./resources/js/mixin/uplodFile.js":
/*!*****************************************!*\
  !*** ./resources/js/mixin/uplodFile.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar sha1 = __webpack_require__(/*! js-sha1 */ \"./node_modules/js-sha1/src/sha1.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data: function data() {\n    return {\n      records: {\n        cv: []\n      },\n      toStore: {\n        cv: []\n      },\n      recordsForUpload: {\n        cv: []\n      },\n      loading: {\n        cv: false\n      },\n      uploadHeaders: {}\n    };\n  },\n  created: function created() {\n    console.log('c est moi !!!!!!!!!!!!!!!!!');\n  },\n  methods: {\n    retourError: function retourError(res, type) {\n      this.loading[type] = false;\n      console.log(this.recordsForUpload[type]);\n    },\n    retourUpload: function retourUpload(res, type) {\n      this.toStore[type] = this.toStore[type].concat(res);\n      this.recordsForUpload[type] = [];\n      this.loading[type] = false;\n      console.log(this.toStore[type]);\n    },\n    uploadFiles: function uploadFiles(type, format, folder) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var CLOUDINARY_UPLOAD_PRESET;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                CLOUDINARY_UPLOAD_PRESET = \"ml_default\";\n                _this.loading[type] = true;\n                console.log(_this.recordsForUpload[type]);\n                _context.next = 5;\n                return _this.$refs[type].upload(\"https://api.cloudinary.com/v1_1/\" + _this.cloudName + \"/\" + format + \"/upload\", _this.uploadHeaders, _this.recordsForUpload[type], function (fileRecord) {\n                  var formData = new FormData();\n                  formData.append(\"upload_preset\", \"ml_default\");\n                  formData.append(\"folder\", folder);\n                  formData.append(\"file\", fileRecord.file);\n                  return formData;\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    formDataDeleted: function formDataDeleted(public_id) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var timestamp, api_key, string1, signature, formData;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                timestamp = new Date().getTime();\n                api_key = \"721474231639524\";\n                string1 = \"public_id=\" + public_id + \"&timestamp=\" + timestamp + \"tKW-g80_eRQbtSHSjwQHbfNzwDc\";\n                _context2.next = 5;\n                return sha1(string1);\n\n              case 5:\n                signature = _context2.sent;\n                formData = new FormData();\n                formData.append(\"public_id\", public_id);\n                formData.append(\"signature\", signature);\n                formData.append(\"timestamp\", timestamp);\n                formData.append(\"api_key\", api_key);\n                return _context2.abrupt(\"return\", formData);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    deleteUploadedFile: function deleteUploadedFile(fileRecord, type, format) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var ele1, k, public_id, donnee;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ele1 = _this2.toStore[type].find(function (row) {\n                  console.log(row.fileRecord);\n\n                  if (row.fileRecord == fileRecord) {\n                    return row;\n                  }\n                });\n                console.log(\"ele1\");\n                console.log(ele1);\n\n                if (!(ele1 != null)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                k = _this2.toStore[type].indexOf(ele1);\n                if (k !== -1) _this2.toStore[type].splice(k, 1);\n                public_id = ele1.data.public_id;\n                _context3.next = 9;\n                return _this2.formDataDeleted(public_id);\n\n              case 9:\n                donnee = _context3.sent;\n                console.log(\"donnee\");\n                console.log(donnee);\n                axios.post(\"https://api.cloudinary.com/v1_1/\" + _this2.cloudName + \"/\" + format + \"/destroy\", donnee).then(function (res) {\n                  console.log(\"nathe\");\n                  console.log(res.data);\n                })[\"catch\"](function (_ref) {\n                  var data = _ref.response.data;\n                  console.log(data.message);\n                });\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    filesSelected: function filesSelected(fileRecordsNewlySelected, type) {\n      console.log(\"selected\");\n      console.log(fileRecordsNewlySelected);\n      var validFileRecords = fileRecordsNewlySelected.filter(function (fileRecord) {\n        return !fileRecord.error;\n      });\n      this.recordsForUpload[type] = this.recordsForUpload[type].concat(validFileRecords);\n    },\n    onBeforeDelete: function onBeforeDelete(fileRecord, type) {\n      var i = this.recordsForUpload[type].indexOf(fileRecord);\n\n      if (i !== -1) {\n        // queued file, not yet uploaded. Just remove from the arrays\n        this.recordsForUpload[type].splice(i, 1);\n        var k = this.records[type].indexOf(fileRecord);\n        if (k !== -1) this.records[type].splice(k, 1);\n      } else {\n        if (confirm(\"Voulez-vous supprimer celà ?\")) {\n          this.$refs[type].deleteFileRecord(fileRecord, type); // will trigger 'delete' event\n        }\n      }\n    },\n    fileDeleted: function fileDeleted(fileRecord, type, format) {\n      var i = this.recordsForUpload[type].indexOf(fileRecord);\n\n      if (i !== -1) {\n        this.recordsForUpload[type].splice(i, 1);\n      } else {\n        this.deleteUploadedFile(fileRecord, type, format);\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/mixin/uplodFile.js\n");

/***/ }),

/***/ "./node_modules/js-sha1/src/sha1.js":
/*!******************************************!*\
  !*** ./node_modules/js-sha1/src/sha1.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* provided dependency */ var process = __webpack_require__(/*! process/browser.js */ \"./node_modules/process/browser.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n(function() {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.JS_SHA1_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = __webpack_require__.g;\n  }\n  var COMMON_JS = !root.JS_SHA1_NO_COMMON_JS && \"object\" === 'object' && module.exports;\n  var AMD =  true && __webpack_require__.amdO;\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Sha1(true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Sha1();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('sha1').update(message, 'utf8').digest('hex');\n      } else if (message.constructor === ArrayBuffer) {\n        message = new Uint8Array(message);\n      } else if (message.length === undefined) {\n        return method(message);\n      }\n      return crypto.createHash('sha1').update(new Buffer(message)).digest('hex');\n    };\n    return nodeMethod;\n  };\n\n  function Sha1(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    this.h0 = 0x67452301;\n    this.h1 = 0xEFCDAB89;\n    this.h2 = 0x98BADCFE;\n    this.h3 = 0x10325476;\n    this.h4 = 0xC3D2E1F0;\n\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  Sha1.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString = typeof(message) !== 'string';\n    if (notString && message.constructor === root.ArrayBuffer) {\n      message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if(notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Sha1.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha1.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n\n    for(j = 16; j < 80; ++j) {\n      t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n      blocks[j] =  (t << 1) | (t >>> 31);\n    }\n\n    for(j = 0; j < 20; j += 5) {\n      f = (b & c) | ((~b) & d);\n      t = (a << 5) | (a >>> 27);\n      e = t + f + e + 1518500249 + blocks[j] << 0;\n      b = (b << 30) | (b >>> 2);\n\n      f = (a & b) | ((~a) & c);\n      t = (e << 5) | (e >>> 27);\n      d = t + f + d + 1518500249 + blocks[j + 1] << 0;\n      a = (a << 30) | (a >>> 2);\n\n      f = (e & a) | ((~e) & b);\n      t = (d << 5) | (d >>> 27);\n      c = t + f + c + 1518500249 + blocks[j + 2] << 0;\n      e = (e << 30) | (e >>> 2);\n\n      f = (d & e) | ((~d) & a);\n      t = (c << 5) | (c >>> 27);\n      b = t + f + b + 1518500249 + blocks[j + 3] << 0;\n      d = (d << 30) | (d >>> 2);\n\n      f = (c & d) | ((~c) & e);\n      t = (b << 5) | (b >>> 27);\n      a = t + f + a + 1518500249 + blocks[j + 4] << 0;\n      c = (c << 30) | (c >>> 2);\n    }\n\n    for(; j < 40; j += 5) {\n      f = b ^ c ^ d;\n      t = (a << 5) | (a >>> 27);\n      e = t + f + e + 1859775393 + blocks[j] << 0;\n      b = (b << 30) | (b >>> 2);\n\n      f = a ^ b ^ c;\n      t = (e << 5) | (e >>> 27);\n      d = t + f + d + 1859775393 + blocks[j + 1] << 0;\n      a = (a << 30) | (a >>> 2);\n\n      f = e ^ a ^ b;\n      t = (d << 5) | (d >>> 27);\n      c = t + f + c + 1859775393 + blocks[j + 2] << 0;\n      e = (e << 30) | (e >>> 2);\n\n      f = d ^ e ^ a;\n      t = (c << 5) | (c >>> 27);\n      b = t + f + b + 1859775393 + blocks[j + 3] << 0;\n      d = (d << 30) | (d >>> 2);\n\n      f = c ^ d ^ e;\n      t = (b << 5) | (b >>> 27);\n      a = t + f + a + 1859775393 + blocks[j + 4] << 0;\n      c = (c << 30) | (c >>> 2);\n    }\n\n    for(; j < 60; j += 5) {\n      f = (b & c) | (b & d) | (c & d);\n      t = (a << 5) | (a >>> 27);\n      e = t + f + e - 1894007588 + blocks[j] << 0;\n      b = (b << 30) | (b >>> 2);\n\n      f = (a & b) | (a & c) | (b & c);\n      t = (e << 5) | (e >>> 27);\n      d = t + f + d - 1894007588 + blocks[j + 1] << 0;\n      a = (a << 30) | (a >>> 2);\n\n      f = (e & a) | (e & b) | (a & b);\n      t = (d << 5) | (d >>> 27);\n      c = t + f + c - 1894007588 + blocks[j + 2] << 0;\n      e = (e << 30) | (e >>> 2);\n\n      f = (d & e) | (d & a) | (e & a);\n      t = (c << 5) | (c >>> 27);\n      b = t + f + b - 1894007588 + blocks[j + 3] << 0;\n      d = (d << 30) | (d >>> 2);\n\n      f = (c & d) | (c & e) | (d & e);\n      t = (b << 5) | (b >>> 27);\n      a = t + f + a - 1894007588 + blocks[j + 4] << 0;\n      c = (c << 30) | (c >>> 2);\n    }\n\n    for(; j < 80; j += 5) {\n      f = b ^ c ^ d;\n      t = (a << 5) | (a >>> 27);\n      e = t + f + e - 899497514 + blocks[j] << 0;\n      b = (b << 30) | (b >>> 2);\n\n      f = a ^ b ^ c;\n      t = (e << 5) | (e >>> 27);\n      d = t + f + d - 899497514 + blocks[j + 1] << 0;\n      a = (a << 30) | (a >>> 2);\n\n      f = e ^ a ^ b;\n      t = (d << 5) | (d >>> 27);\n      c = t + f + c - 899497514 + blocks[j + 2] << 0;\n      e = (e << 30) | (e >>> 2);\n\n      f = d ^ e ^ a;\n      t = (c << 5) | (c >>> 27);\n      b = t + f + b - 899497514 + blocks[j + 3] << 0;\n      d = (d << 30) | (d >>> 2);\n\n      f = c ^ d ^ e;\n      t = (b << 5) | (b >>> 27);\n      a = t + f + a - 899497514 + blocks[j + 4] << 0;\n      c = (c << 30) | (c >>> 2);\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n  };\n\n  Sha1.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n\n    return HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n           HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n           HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n           HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n           HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n           HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n           HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n           HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n           HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n           HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n           HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n           HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n           HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\n           HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n           HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n           HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n           HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\n           HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\n           HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\n           HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F];\n  };\n\n  Sha1.prototype.toString = Sha1.prototype.hex;\n\n  Sha1.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n\n    return [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF\n    ];\n  };\n\n  Sha1.prototype.array = Sha1.prototype.digest;\n\n  Sha1.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha1 = exports;\n    if (AMD) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return exports;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n  }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/js-sha1/src/sha1.js\n");

/***/ }),

/***/ "./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css&":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/laravel-mix/node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ \"./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/cssWithMappingToString.js\");\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_laravel_mix_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/laravel-mix/node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_laravel_mix_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_laravel_mix_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\r\\n/* tile uploaded pictures */\\n.pointer[data-v-3531c3f7] {\\r\\n  cursor: pointer;\\n}\\r\\n/*.upload-list-inline :deep(.ant-upload-list-item) {\\r\\n  float: left;\\r\\n  width: 200px;\\r\\n  margin-right: 8px;\\r\\n}\\r\\n.upload-list-inline [class*=\\\"-upload-list-rtl\\\"] :deep(.ant-upload-list-item) {\\r\\n  float: right;\\r\\n}\\r\\n.editor {\\r\\n  margin-left: 0px !important;\\r\\n  padding: 0px !important;\\r\\n}\\r\\n.cdx-settings-button {\\r\\n  color: red;\\r\\n  background: greenyellow;\\r\\n}*/\\r\\n/*.ce-block__content,\\r\\n.ce-toolbar__content {\\r\\n  max-width: unset;\\r\\n  background: green !important;\\r\\n}*/\\r\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/components/Realisations/RealisationsAd.vue\"],\"names\":[],\"mappings\":\";AA64BA,2BAAA;AACA;EACA,eAAA;AACA;AACA;;;;;;;;;;;;;;;EAeA;AACA;;;;EAIA\",\"sourcesContent\":[\"<template>\\r\\n  <div class=\\\"w-100\\\">\\r\\n    <div class=\\\"d-flex flex-column\\\">\\r\\n      <v-row>\\r\\n        <v-col cols=\\\"12\\\">\\r\\n          <a-card>\\r\\n            <div class=\\\"d-flex flex-row justify-content-between\\\">\\r\\n              <p\\r\\n                class=\\\"font-weight-black text-h1 text-center\\\"\\r\\n                style=\\\"color: black; opacity: 1; vertical-align: middle\\\"\\r\\n              >\\r\\n                <b-field>\\r\\n                  <template #label>\\r\\n                    <span style=\\\"font-size: 40px\\\" class=\\\"font-weight-black text-h4\\\"\\r\\n                      >Ajouter une réalisation</span\\r\\n                    >\\r\\n                  </template>\\r\\n                </b-field>\\r\\n              </p>\\r\\n              <add-realisation-1 width=\\\"200px\\\" height=\\\"100px\\\"></add-realisation-1>\\r\\n            </div>\\r\\n          </a-card>\\r\\n        </v-col>\\r\\n        <v-col cols=\\\"12\\\">\\r\\n          <a-card :loading=\\\"isLoading\\\" class=\\\"p-0\\\" style=\\\"background: #f0f2f5\\\">\\r\\n            <v-stepper\\r\\n              v-model=\\\"e1\\\"\\r\\n              :non-linear=\\\"false\\\"\\r\\n              class=\\\"vert\\\"\\r\\n              style=\\\"background: #f0f2f5\\\"\\r\\n            >\\r\\n              <v-stepper-header>\\r\\n                <v-stepper-step step=\\\"1\\\" color=\\\"#24855a\\\">\\r\\n                  <b-field custom-class=\\\"is-medium\\\">\\r\\n                    <template #label> Informations de base </template>\\r\\n                  </b-field></v-stepper-step\\r\\n                >\\r\\n\\r\\n                <v-divider></v-divider>\\r\\n\\r\\n                <v-stepper-step step=\\\"2\\\" color=\\\"#24855a\\\">\\r\\n                  <b-field custom-class=\\\"is-medium\\\">\\r\\n                    <template #label> Decription </template>\\r\\n                  </b-field></v-stepper-step\\r\\n                >\\r\\n\\r\\n                <v-divider></v-divider>\\r\\n\\r\\n                <v-stepper-step step=\\\"3\\\" color=\\\"#24855a\\\">\\r\\n                  <b-field custom-class=\\\"is-medium\\\">\\r\\n                    <template #label> Médias </template>\\r\\n                  </b-field>\\r\\n                </v-stepper-step>\\r\\n              </v-stepper-header>\\r\\n\\r\\n              <v-stepper-items>\\r\\n                <v-stepper-content step=\\\"1\\\">\\r\\n                  <a-row>\\r\\n                    <a-col\\r\\n                      :sm=\\\"{ span: 24 }\\\"\\r\\n                      :md=\\\"{ span: 22, offset: 2 }\\\"\\r\\n                      :lg=\\\"{ offset: 3, span: 18, offset: 3 }\\\"\\r\\n                      :xl=\\\"{ offset: 3, span: 18, offset: 3 }\\\"\\r\\n                      :xs=\\\"{ span: 24 }\\\"\\r\\n                    >\\r\\n                      <div>\\r\\n                        <a-card\\r\\n                          class=\\\"mx-2 my-5 elevation_0 my-card_1\\\"\\r\\n                          style=\\\"border-radius: 12px\\\"\\r\\n                        >\\r\\n                          <div class=\\\"d-flex flex-row justify-content-between\\\">\\r\\n                            <p\\r\\n                              class=\\\"font-weight-black text-h1 text-center\\\"\\r\\n                              style=\\\"color: black; opacity: 1; vertical-align: middle\\\"\\r\\n                            >\\r\\n                              <b-field>\\r\\n                                <template #label>\\r\\n                                  <span\\r\\n                                    style=\\\"font-size: 40px\\\"\\r\\n                                    class=\\\"font-weight-black text-h4\\\"\\r\\n                                    >Informations de base</span\\r\\n                                  >\\r\\n                                </template>\\r\\n                              </b-field>\\r\\n                            </p>\\r\\n                            <infos-base-1 width=\\\"200px\\\" height=\\\"100px\\\"></infos-base-1>\\r\\n                          </div>\\r\\n                        </a-card>\\r\\n                        <a-card\\r\\n                          class=\\\"mx-2 my-5 elevation_0 my-card_1\\\"\\r\\n                          style=\\\"border-radius: 12px\\\"\\r\\n                        >\\r\\n                          <b-field custom-class=\\\"is-medium\\\">\\r\\n                            <template #label>\\r\\n                              <span style=\\\"color: red\\\">* </span\\r\\n                              ><span style=\\\"font-size: 16px\\\"\\r\\n                                >Titre de la réalisation</span\\r\\n                              >\\r\\n                              <b-tooltip\\r\\n                                position=\\\"is-right\\\"\\r\\n                                type=\\\"is-success\\\"\\r\\n                                label=\\\"Il s'agit du titre de votre réalisation/projet\\\"\\r\\n                              >\\r\\n                                <v-icon small color=\\\"#24855a\\\">mdi-information </v-icon>\\r\\n                              </b-tooltip>\\r\\n                            </template>\\r\\n                            <b-input\\r\\n                              :value=\\\"title\\\"\\r\\n                              @input=\\\"valideTitle\\\"\\r\\n                              type=\\\"text\\\"\\r\\n                              size=\\\"is-medium\\\"\\r\\n                            >\\r\\n                            </b-input>\\r\\n                          </b-field>\\r\\n\\r\\n                          <b-message\\r\\n                            type=\\\"is-info\\\"\\r\\n                            v-if=\\\"viewInfoTilte == true\\\"\\r\\n                            closable=\\\"true\\\"\\r\\n                            :duration=\\\"7\\\"\\r\\n                          >\\r\\n                            Il s'agit du titre de votre réalisation/projet\\r\\n                          </b-message>\\r\\n                          <b-field custom-class=\\\"is-medium\\\">\\r\\n                            <template #label>\\r\\n                              <span style=\\\"color: red\\\">* </span\\r\\n                              ><span style=\\\"font-size: 16px\\\">Tags</span>\\r\\n                              <b-tooltip\\r\\n                                position=\\\"is-right\\\"\\r\\n                                label=\\\"Choisissez un ou plusieurs mots clés liés à votre réalisation/projet. S'il le\\r\\n                            mot clé que vous voulez n'existe pas, vous pouvez l'ajouter.\\\"\\r\\n                                size=\\\"is-medium\\\"\\r\\n                                type=\\\"is-success\\\"\\r\\n                                multilined\\r\\n                              >\\r\\n                                <v-icon small color=\\\"#24855a\\\">mdi-information </v-icon>\\r\\n                              </b-tooltip>\\r\\n                            </template>\\r\\n                            <v-autocomplete\\r\\n                              color=\\\"#24855a\\\"\\r\\n                              v-model=\\\"values\\\"\\r\\n                              :value=\\\"name\\\"\\r\\n                              @update:search-input=\\\"(event) => (name = event)\\\"\\r\\n                              :items=\\\"tags\\\"\\r\\n                              dense\\r\\n                              chips\\r\\n                              small-chips\\r\\n                              label=\\\"Tags\\\"\\r\\n                              item-text=\\\"name\\\"\\r\\n                              item-value=\\\"id\\\"\\r\\n                              multiple\\r\\n                              solo\\r\\n                            >\\r\\n                              <template v-slot:selection=\\\"data\\\">\\r\\n                                <v-chip\\r\\n                                  style=\\\"border-style: solid; border-color: #24855a\\\"\\r\\n                                  color=\\\"#24855a\\\"\\r\\n                                  text-color=\\\"white\\\"\\r\\n                                  v-bind=\\\"data.attrs\\\"\\r\\n                                  :input-value=\\\"data.selected\\\"\\r\\n                                  close\\r\\n                                  @click=\\\"data.select\\\"\\r\\n                                  @click:close=\\\"remove(data.item)\\\"\\r\\n                                >\\r\\n                                  {{ data.item.name }}\\r\\n                                </v-chip>\\r\\n                              </template>\\r\\n\\r\\n                              <template slot=\\\"prepend-item\\\">\\r\\n                                <b-button type=\\\"is-susscess\\\" outlined @click=\\\"showAddTag\\\">\\r\\n                                  Ajouter un tag\\r\\n                                </b-button>\\r\\n                              </template>\\r\\n                            </v-autocomplete>\\r\\n                          </b-field>\\r\\n                        </a-card>\\r\\n                        <a-card\\r\\n                          class=\\\"mx-2 my-5 elevation_0 my-card_1\\\"\\r\\n                          style=\\\"border-radius: 12px\\\"\\r\\n                        >\\r\\n                          <b-button type=\\\"is-bleue\\\" @click=\\\"e1 = 2\\\"> Continuer</b-button>\\r\\n                        </a-card>\\r\\n                      </div>\\r\\n                    </a-col>\\r\\n                    <a-col\\r\\n                      :sm=\\\"{ span: 24 }\\\"\\r\\n                      :md=\\\"{ span: 22, offset: 2 }\\\"\\r\\n                      :lg=\\\"{ offset: 3, span: 18, offset: 3 }\\\"\\r\\n                      :xl=\\\"{ offset: 3, span: 18, offset: 3 }\\\"\\r\\n                      :xs=\\\"{ span: 24 }\\\"\\r\\n                    >\\r\\n                    </a-col>\\r\\n                  </a-row>\\r\\n                </v-stepper-content>\\r\\n\\r\\n                <v-stepper-content step=\\\"2\\\">\\r\\n                  <a-row>\\r\\n                    <a-col\\r\\n                      :sm=\\\"{ span: 24 }\\\"\\r\\n                      :md=\\\"{ span: 22, offset: 2 }\\\"\\r\\n                      :lg=\\\"{ offset: 2, span: 20, offset: 2 }\\\"\\r\\n                      :xl=\\\"{ offset: 2, span: 20, offset: 2 }\\\"\\r\\n                      :xs=\\\"{ span: 24 }\\\"\\r\\n                    >\\r\\n                      <a-card class=\\\"my-2\\\" style=\\\"border-radius: 8px 8px\\\">\\r\\n                        <div class=\\\"d-flex flex-row justify-content-between\\\">\\r\\n                          <p\\r\\n                            class=\\\"font-weight-black text-h1 text-center\\\"\\r\\n                            style=\\\"\\r\\n                              color: black;\\r\\n                              opacity: 1;\\r\\n\\r\\n                              vertical-align: middle;\\r\\n                            \\\"\\r\\n                          >\\r\\n                            <b-field>\\r\\n                              <template #label>\\r\\n                                <span\\r\\n                                  style=\\\"font-size: 40px\\\"\\r\\n                                  class=\\\"font-weight-black text-h4\\\"\\r\\n                                  >Description</span\\r\\n                                >\\r\\n                              </template>\\r\\n                            </b-field>\\r\\n                          </p>\\r\\n                          <description-1 width=\\\"200px\\\" height=\\\"100px\\\"></description-1>\\r\\n                        </div>\\r\\n                      </a-card>\\r\\n                    </a-col>\\r\\n                    <a-col\\r\\n                      :sm=\\\"{ span: 24 }\\\"\\r\\n                      :md=\\\"{ span: 22, offset: 2 }\\\"\\r\\n                      :lg=\\\"{ offset: 2, span: 20, offset: 2 }\\\"\\r\\n                      :xl=\\\"{ offset: 2, span: 20, offset: 2 }\\\"\\r\\n                      :xs=\\\"{ span: 24 }\\\"\\r\\n                    >\\r\\n                      <a-card\\r\\n                        class=\\\"elevation_1 mon-card_1 my-2\\\"\\r\\n                        style=\\\"border-radius: 8px 8px\\\"\\r\\n                      >\\r\\n                        <template slot=\\\"title\\\"> </template>\\r\\n                        <vue-editor\\r\\n                          v-model=\\\"description\\\"\\r\\n                          ref=\\\"editor\\\"\\r\\n                          placeholder=\\\"Décrivez votre projet/réalisation\\\"\\r\\n                          useCustomImageHandler\\r\\n                          @image-added=\\\"handleImageAdded\\\"\\r\\n                          @image-removed=\\\"handleImageRemoved\\\"\\r\\n                          :editorToolbar=\\\"customToolbar\\\"\\r\\n                          :editorOptions=\\\"editorSettings\\\"\\r\\n                        />\\r\\n                      </a-card>\\r\\n                    </a-col>\\r\\n                    <a-col\\r\\n                      :sm=\\\"{ span: 24 }\\\"\\r\\n                      :md=\\\"{ span: 22, offset: 2 }\\\"\\r\\n                      :lg=\\\"{ offset: 2, span: 20, offset: 2 }\\\"\\r\\n                      :xl=\\\"{ offset: 2, span: 20, offset: 2 }\\\"\\r\\n                      :xs=\\\"{ span: 24 }\\\"\\r\\n                    >\\r\\n                      <a-card\\r\\n                        class=\\\"elevation_1 mon-card_1 my-2\\\"\\r\\n                        style=\\\"border-radius: 8px 8px\\\"\\r\\n                      >\\r\\n                        <v-btn color=\\\"#24855a\\\" style=\\\"color: white\\\" @click=\\\"e1 = 3\\\">\\r\\n                          Continuer</v-btn\\r\\n                        >\\r\\n                        <v-btn text @click=\\\"e1 = 1\\\"> Réculer</v-btn></a-card\\r\\n                      ></a-col\\r\\n                    >\\r\\n                  </a-row>\\r\\n                </v-stepper-content>\\r\\n\\r\\n                <v-stepper-content step=\\\"3\\\">\\r\\n                  <a-col\\r\\n                    :sm=\\\"{ span: 24 }\\\"\\r\\n                    :md=\\\"{ span: 22, offset: 2 }\\\"\\r\\n                    :lg=\\\"{ offset: 3, span: 18, offset: 3 }\\\"\\r\\n                    :xl=\\\"{ offset: 3, span: 18, offset: 3 }\\\"\\r\\n                    :xs=\\\"{ span: 24 }\\\"\\r\\n                  >\\r\\n                    <a-card class=\\\"my-2\\\" style=\\\"border-radius: 8px 8px\\\">\\r\\n                      <div class=\\\"d-flex flex-row justify-content-between\\\">\\r\\n                        <p\\r\\n                          class=\\\"font-weight-black text-h1 text-center\\\"\\r\\n                          style=\\\"\\r\\n                            color: black;\\r\\n                            opacity: 1;\\r\\n\\r\\n                            vertical-align: middle;\\r\\n                          \\\"\\r\\n                        >\\r\\n                          <b-field>\\r\\n                            <template #label>\\r\\n                              <span\\r\\n                                style=\\\"font-size: 40px\\\"\\r\\n                                class=\\\"font-weight-black text-h4\\\"\\r\\n                                >Médias</span\\r\\n                              >\\r\\n                            </template>\\r\\n                          </b-field>\\r\\n                        </p>\\r\\n\\r\\n                        <medias-1 width=\\\"200px\\\" height=\\\"100px\\\"></medias-1>\\r\\n                      </div>\\r\\n                    </a-card>\\r\\n                    <a-card\\r\\n                      class=\\\"elevation_1 mon-card_1 my-2\\\"\\r\\n                      style=\\\"border-radius: 8px 8px\\\"\\r\\n                    >\\r\\n                      <a-form-model-item>\\r\\n                        <vs-collapse>\\r\\n                          <vs-collapse-item class=\\\"overflow-auto\\\">\\r\\n                            <div slot=\\\"header\\\" class=\\\"card-header pointer\\\">\\r\\n                              <b-field\\r\\n                                label=\\\"Ajouter un poster pour la réalisation\\\"\\r\\n                              ></b-field>\\r\\n                            </div>\\r\\n                            <VueFileAgent\\r\\n                              ref=\\\"poster\\\"\\r\\n                              :multiple=\\\"false\\\"\\r\\n                              :deletable=\\\"true\\\"\\r\\n                              :meta=\\\"true\\\"\\r\\n                              :accept=\\\"'image/*'\\\"\\r\\n                              :maxSize=\\\"'10MB'\\\"\\r\\n                              :helpText=\\\"'Choisir l\\\\'image du poster'\\\"\\r\\n                              :errorText=\\\"{\\r\\n                                type: 'Le type de l\\\\'image est invalide',\\r\\n                                size: 'La taille du fichier ne doit pas dépasser 10Mo',\\r\\n                              }\\\"\\r\\n                              @select=\\\"filesSelected($event, 'poster')\\\"\\r\\n                              @beforedelete=\\\"onBeforeDelete($event, 'poster')\\\"\\r\\n                              @delete=\\\"fileDeleted($event, 'poster', 'image')\\\"\\r\\n                              @upload=\\\"retourUpload($event, 'poster')\\\"\\r\\n                              @upload:error=\\\"retourError($event, 'poster')\\\"\\r\\n                              v-model=\\\"records['poster']\\\"\\r\\n                            >\\r\\n                              <!--<template v-slot:before-inner>\\r\\n                                <h1>Here might be a page title</h1>\\r\\n                              </template>-->\\r\\n                              <!--<template v-slot:file-preview>\\r\\n                                <button class=\\\"btn\\\">Ajouter</button>\\r\\n                              </template>\\r\\n                              <template v-slot:file-preview-new>\\r\\n                                <button class=\\\"btn\\\">Ajouter</button>\\r\\n                              </template>-->\\r\\n                            </VueFileAgent>\\r\\n                            <v-btn\\r\\n                              :loading=\\\"loading['poster']\\\"\\r\\n                              :disabled=\\\"loading['poster']\\\"\\r\\n                              color=\\\"#24855a\\\"\\r\\n                              style=\\\"color: white\\\"\\r\\n                              class=\\\"ma-2 white--text\\\"\\r\\n                              @click=\\\"\\r\\n                                uploadFiles('poster', 'image', 'ressources/posters')\\r\\n                              \\\"\\r\\n                            >\\r\\n                              Importer {{ recordsForUpload[\\\"poster\\\"].length }} files\\r\\n                              <v-icon right dark> mdi-cloud-upload </v-icon>\\r\\n                            </v-btn>\\r\\n                          </vs-collapse-item>\\r\\n                        </vs-collapse>\\r\\n                      </a-form-model-item>\\r\\n                      <a-form-model-item>\\r\\n                        <vs-collapse>\\r\\n                          <vs-collapse-item class=\\\"overflow-auto\\\">\\r\\n                            <div slot=\\\"header\\\" class=\\\"card-header pointer\\\">\\r\\n                              <b-field label=\\\"Ajouter une vidéo\\\"></b-field>\\r\\n                            </div>\\r\\n                            <VueFileAgent\\r\\n                              ref=\\\"video\\\"\\r\\n                              :multiple=\\\"false\\\"\\r\\n                              :deletable=\\\"true\\\"\\r\\n                              :meta=\\\"true\\\"\\r\\n                              :accept=\\\"'video/*,.avi'\\\"\\r\\n                              :maxSize=\\\"'100MB'\\\"\\r\\n                              :helpText=\\\"'Choisir la vidéo à ajouter'\\\"\\r\\n                              :errorText=\\\"{\\r\\n                                type:\\r\\n                                  'Le fichier que vous avez choisir n\\\\'a pas un format vidéo',\\r\\n                                size:\\r\\n                                  'La taille d\\\\' une vidéo ne doit pas dépasser 100Mo',\\r\\n                              }\\\"\\r\\n                              @select=\\\"filesSelected($event, 'video')\\\"\\r\\n                              @beforedelete=\\\"onBeforeDelete($event, 'video')\\\"\\r\\n                              @delete=\\\"fileDeleted($event, 'video', 'video')\\\"\\r\\n                              @upload=\\\"retourUpload($event, 'video')\\\"\\r\\n                              @upload:error=\\\"retourError($event, 'video')\\\"\\r\\n                              v-model=\\\"records['video']\\\"\\r\\n                            ></VueFileAgent>\\r\\n                            <v-btn\\r\\n                              :loading=\\\"loading['video']\\\"\\r\\n                              :disabled=\\\"loading['video']\\\"\\r\\n                              color=\\\"#24855a\\\"\\r\\n                              style=\\\"color: white\\\"\\r\\n                              class=\\\"ma-2 white--text\\\"\\r\\n                              @click=\\\"uploadFiles('video', 'video', 'ressources/videos')\\\"\\r\\n                            >\\r\\n                              Importer {{ recordsForUpload[\\\"video\\\"].length }} files\\r\\n                              <v-icon right dark> mdi-cloud-upload </v-icon>\\r\\n                            </v-btn>\\r\\n                          </vs-collapse-item>\\r\\n                        </vs-collapse>\\r\\n                      </a-form-model-item>\\r\\n                      <a-form-model-item>\\r\\n                        <vs-collapse>\\r\\n                          <vs-collapse-item class=\\\"overflow-auto\\\">\\r\\n                            <div slot=\\\"header\\\" class=\\\"card-header pointer\\\">\\r\\n                              <b-field label=\\\"Ajouter des documents\\\"></b-field>\\r\\n                            </div>\\r\\n                            <VueFileAgent\\r\\n                              ref=\\\"docs\\\"\\r\\n                              :multiple=\\\"true\\\"\\r\\n                              :deletable=\\\"true\\\"\\r\\n                              :meta=\\\"true\\\"\\r\\n                              :accept=\\\"'.pdf,.docx,.doc,.odt,.txt,.ods,.zip'\\\"\\r\\n                              :maxSize=\\\"'100MB'\\\"\\r\\n                              :helpText=\\\"'Choisir le document à ajouter'\\\"\\r\\n                              :errorText=\\\"{\\r\\n                                type:\\r\\n                                  'Le fichier que vous avez choisir n\\\\'a pas un des formats autorisés',\\r\\n                                size:\\r\\n                                  'La taille d\\\\' une vidéo ne doit pas dépasser 100Mo',\\r\\n                              }\\\"\\r\\n                              @select=\\\"filesSelected($event, 'docs')\\\"\\r\\n                              @beforedelete=\\\"onBeforeDelete($event, 'docs')\\\"\\r\\n                              @delete=\\\"fileDeleted($event, 'docs', 'image')\\\"\\r\\n                              @upload=\\\"retourUpload($event, 'docs')\\\"\\r\\n                              @upload:error=\\\"retourError($event, 'docs')\\\"\\r\\n                              v-model=\\\"records['docs']\\\"\\r\\n                            ></VueFileAgent>\\r\\n                            <v-btn\\r\\n                              :loading=\\\"loading['docs']\\\"\\r\\n                              :disabled=\\\"loading['docs']\\\"\\r\\n                              color=\\\"#24855a\\\"\\r\\n                              style=\\\"color: white\\\"\\r\\n                              class=\\\"ma-2 white--text\\\"\\r\\n                              @click=\\\"uploadFiles('docs', 'image', 'ressources/docs')\\\"\\r\\n                            >\\r\\n                              Importer {{ recordsForUpload[\\\"docs\\\"].length }} files\\r\\n                              <v-icon right dark> mdi-cloud-upload </v-icon>\\r\\n                            </v-btn>\\r\\n                          </vs-collapse-item>\\r\\n                        </vs-collapse>\\r\\n                      </a-form-model-item>\\r\\n                    </a-card>\\r\\n                    <a-card\\r\\n                      class=\\\"elevation_1 mon-card_1 my-2\\\"\\r\\n                      style=\\\"border-radius: 8px 8px\\\"\\r\\n                    >\\r\\n                      <v-alert text prominent type=\\\"error\\\" v-if=\\\"importation\\\">\\r\\n                        Il y a des médias que vous n'avez pas importé ou qui sont en cours\\r\\n                        d'importation.\\r\\n                      </v-alert>\\r\\n                      <v-alert text prominent type=\\\"error\\\" v-if=\\\"vide\\\">\\r\\n                        Il y a des champs vides\\r\\n                      </v-alert>\\r\\n                      <v-btn color=\\\"#24855a\\\" style=\\\"color: white\\\" @click=\\\"submitForm\\\">\\r\\n                        Soumettre</v-btn\\r\\n                      >\\r\\n                      <v-btn text @click=\\\"e1 = 2\\\"> Réculer</v-btn></a-card\\r\\n                    >\\r\\n                  </a-col>\\r\\n                </v-stepper-content>\\r\\n              </v-stepper-items>\\r\\n            </v-stepper>\\r\\n          </a-card>\\r\\n        </v-col>\\r\\n      </v-row>\\r\\n    </div>\\r\\n  </div>\\r\\n</template>\\r\\n<script>\\r\\nimport axios from \\\"axios\\\";\\r\\nimport { mapGetters, mapActions } from \\\"vuex\\\";\\r\\nimport _ from \\\"lodash\\\";\\r\\nimport { defineComponent, ref } from \\\"vue\\\";\\r\\nimport { VueEditor, Quill } from \\\"vue2-editor\\\";\\r\\n//import { ImageDrop } from \\\"quill-image-drop-module\\\";\\r\\nlet sha1 = require(\\\"js-sha1\\\");\\r\\n//import ImageResize from \\\"quill-image-resize-vue\\\";\\r\\nimport { ImageDrop } from \\\"quill-image-drop-module\\\";\\r\\nimport ImageResize from \\\"quill-image-resize-vue\\\";\\r\\nimport infosBase1 from \\\"../Icons/infos-base-1.vue\\\";\\r\\nimport description1 from \\\"../Icons/description-1.vue\\\";\\r\\nimport medias1 from \\\"../Icons/medias-1.vue\\\";\\r\\nimport addRealisation1 from \\\"../Icons/add-realisation-1.vue\\\";\\r\\nQuill.register(\\\"modules/imageDrop\\\", ImageDrop);\\r\\nQuill.register(\\\"modules/imageResize\\\", ImageResize);\\r\\nimport uplodFile from \\\"../../mixin/uplodFile\\\";\\r\\nexport default {\\r\\n  components: { infosBase1, medias1, description1, addRealisation1 },\\r\\n  name: \\\"App\\\",\\r\\n  mixins: [uplodFile],\\r\\n  data() {\\r\\n    return {\\r\\n      radio: \\\"\\\",\\r\\n      value: null,\\r\\n\\r\\n      viewInfoTilte: false,\\r\\n      images: [],\\r\\n\\r\\n      index: null,\\r\\n      selecteds: [],\\r\\n      data: null,\\r\\n      editor: null,\\r\\n      labelCol: { span: 4 },\\r\\n      wrapperCol: { span: 14 },\\r\\n      title: \\\"\\\",\\r\\n      formData1: new FormData(),\\r\\n\\r\\n      entities: [],\\r\\n\\r\\n      subcategory_id: null,\\r\\n      tags: [],\\r\\n      success: \\\"\\\",\\r\\n      corne: ref(4),\\r\\n\\r\\n      cloudName: \\\"ddt7qfshl\\\",\\r\\n      uploadHeaders: {},\\r\\n      importation: false,\\r\\n      isError: false,\\r\\n      errorText: null,\\r\\n      isLoading: false,\\r\\n      records: {\\r\\n        poster: [],\\r\\n        images: [],\\r\\n        docs: [],\\r\\n        video: [],\\r\\n      },\\r\\n      toStore: {\\r\\n        poster: [],\\r\\n        images: [],\\r\\n        docs: [],\\r\\n        video: [],\\r\\n      },\\r\\n      recordsForUpload: {\\r\\n        poster: [],\\r\\n        images: [],\\r\\n        docs: [],\\r\\n        video: [],\\r\\n      },\\r\\n      loading: {\\r\\n        poster: false,\\r\\n        images: false,\\r\\n        docs: false,\\r\\n        video: false,\\r\\n      },\\r\\n      name: \\\"\\\",\\r\\n      selectedEntity: null,\\r\\n      selectedFiliere: null,\\r\\n      selectable: false,\\r\\n\\r\\n      values: [],\\r\\n      e1: 1,\\r\\n      steps: 2,\\r\\n      description: \\\"\\\",\\r\\n\\r\\n      typeTitle: \\\"\\\",\\r\\n      messageTitle: \\\"\\\",\\r\\n      vide: false,\\r\\n\\r\\n      disabledFiliere: true,\\r\\n      filieres: [],\\r\\n\\r\\n      customToolbar: [\\r\\n        [{ font: [] }],\\r\\n\\r\\n        [{ header: [false, 1, 2, 3, 4, 5, 6] }],\\r\\n\\r\\n        [{ size: [\\\"small\\\", false, \\\"large\\\", \\\"huge\\\"] }],\\r\\n\\r\\n        [\\\"bold\\\", \\\"italic\\\", \\\"underline\\\", \\\"strike\\\"],\\r\\n\\r\\n        [{ align: \\\"\\\" }, { align: \\\"center\\\" }, { align: \\\"right\\\" }, { align: \\\"justify\\\" }],\\r\\n\\r\\n        [{ header: 1 }, { header: 2 }],\\r\\n\\r\\n        [\\\"blockquote\\\", \\\"code-block\\\"],\\r\\n\\r\\n        [{ list: \\\"ordered\\\" }, { list: \\\"bullet\\\" }, { list: \\\"check\\\" }],\\r\\n\\r\\n        [{ script: \\\"sub\\\" }, { script: \\\"super\\\" }],\\r\\n\\r\\n        [{ indent: \\\"-1\\\" }, { indent: \\\"+1\\\" }],\\r\\n\\r\\n        [{ color: [] }, { background: [] }],\\r\\n\\r\\n        [\\\"link\\\", \\\"image\\\", \\\"formula\\\"],\\r\\n\\r\\n        [{ direction: \\\"rtl\\\" }],\\r\\n        [\\\"clean\\\"],\\r\\n      ],\\r\\n\\r\\n      editorSettings: {\\r\\n        modules: {\\r\\n          imageDrop: true,\\r\\n          imageResize: {},\\r\\n        },\\r\\n      },\\r\\n    };\\r\\n  },\\r\\n  watch: {\\r\\n    selectedEntity(val) {\\r\\n      var index = val;\\r\\n      var entity = this.entities.find((entity) => {\\r\\n        return entity.id == val;\\r\\n      });\\r\\n      console.log(\\\"entity\\\");\\r\\n      console.log(entity);\\r\\n      this.filieres = entity.filieres;\\r\\n      console.log(this.filieres);\\r\\n      this.disabledFiliere = false;\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    ...mapGetters({\\r\\n      user: \\\"auth/getUser\\\",\\r\\n    }),\\r\\n    filteredDataArray() {\\r\\n      return this.tags.filter((option) => {\\r\\n        return option.name.toString().toLowerCase().indexOf(this.name.toLowerCase()) >= 0;\\r\\n      });\\r\\n    },\\r\\n    filterTag(item, queryText, itemText) {\\r\\n      return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) >= 0;\\r\\n    },\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    valideTitle(value = \\\"\\\") {\\r\\n      console.log(value);\\r\\n      this.title = value;\\r\\n      if (this.title.length == 0) {\\r\\n        this.typeTitle = \\\"is-danger\\\";\\r\\n        this.messageTitle = \\\"Le titre est requis\\\";\\r\\n      } else {\\r\\n        this.typeTitle = \\\"is-success\\\";\\r\\n        this.messageTitle = \\\"\\\";\\r\\n      }\\r\\n    },\\r\\n    remove(item) {\\r\\n      console.log(item);\\r\\n      console.log(this.values);\\r\\n      const index = this.values.indexOf(item.id);\\r\\n      if (index >= 0) this.values.splice(index, 1);\\r\\n    },\\r\\n    showAddTag() {\\r\\n      this.$buefy.dialog.prompt({\\r\\n        type: \\\"is-info\\\",\\r\\n        message: `Tag`,\\r\\n        inputAttrs: {\\r\\n          placeholder: \\\"e.g. Web\\\",\\r\\n          maxlength: 20,\\r\\n          value: this.name,\\r\\n        },\\r\\n        confirmText: \\\"Ajouter\\\",\\r\\n        onConfirm: (value) => {\\r\\n          this.createTag(value);\\r\\n          this.getAllTags();\\r\\n        },\\r\\n      });\\r\\n    },\\r\\n    async createTag(value) {\\r\\n      await axios\\r\\n        .post(\\\"/api/v1/tags\\\", { name: value })\\r\\n        .then((response) => {\\r\\n          console.log(response.data.tag);\\r\\n          this.$vs.notify({\\r\\n            title: \\\"Success\\\",\\r\\n            text: \\\"Vous venez d'ajouter un tag avec succès\\\",\\r\\n            color: \\\"success\\\",\\r\\n          });\\r\\n        })\\r\\n        .catch(({ response: { data } }) => {\\r\\n          console.log(data.message);\\r\\n        });\\r\\n    },\\r\\n    init() {\\r\\n      /* this.posterRecords = [];\\r\\n      this.posterRecordsForUpload = [];\\r\\n      this.posterToStore = [];\\r\\n      this.imagesRecords = [];\\r\\n      this.imagesRecordsForUpload = [];\\r\\n      this.imagesToStore = [];\\r\\n      this.docsRecords = [];\\r\\n      this.docsRecordsForUpload = [];\\r\\n      this.docsToStore = [];\\r\\n      this.videoRecords = [];\\r\\n      this.videoRecordsForUpload = [];\\r\\n      this.videoToStore = [];\\r\\n      this.formData1 = new FormData();\\r\\n      this.title = \\\"\\\";\\r\\n      this.description = \\\"\\\";\\r\\n      this.values = [];*/\\r\\n    },\\r\\n    async getAllEntities() {\\r\\n      await axios\\r\\n        .get(\\\"/api/v1/entities\\\")\\r\\n        .then((response) => {\\r\\n          console.log(\\\"entites\\\");\\r\\n          console.log(response.data.data);\\r\\n          const entities = response.data.data;\\r\\n          this.entities = [...entities];\\r\\n        })\\r\\n        .catch((error) => {\\r\\n          console.log(error);\\r\\n        });\\r\\n      // .finally(() => (this.activeLoading = false));\\r\\n    },\\r\\n    formDataForRealisation(type, index, fileToStore) {\\r\\n      this.formData1.append(type, JSON.stringify(fileToStore));\\r\\n    },\\r\\n    async submitForm() {\\r\\n      this.valideTitle(this.title);\\r\\n      if (this.messageTitle.length == 0) {\\r\\n        if (\\r\\n          //this.imagesRecordsForUpload.length == 0 &&\\r\\n          this.recordsForUpload[\\\"images\\\"].length == 0 &&\\r\\n          this.recordsForUpload[\\\"video\\\"].length == 0 &&\\r\\n          this.recordsForUpload[\\\"docs\\\"].length == 0\\r\\n        ) {\\r\\n          console.log(\\\"description\\\");\\r\\n          console.log(this.description);\\r\\n          this.formData1.append(\\\"title\\\", this.title);\\r\\n          this.formData1.append(\\\"description\\\", this.description);\\r\\n          this.formData1.append(\\\"tags\\\", JSON.stringify(this.values));\\r\\n          this.formData1.append(\\\"entity_id\\\", this.selectedEntity);\\r\\n          this.formData1.append(\\\"filiere_id\\\", this.selectedFiliere);\\r\\n          //this.formData1.append(\\\"tags\\\",this.values);\\r\\n          /*_.each(this.values, (value, key) => {\\r\\n          this.formData1.append(\\\"tags[]\\\", value);\\r\\n        });*/\\r\\n          if (this.posterToStore.length != 0)\\r\\n            this.formDataForRealisation(\\\"poster\\\", 0, this.posterToStore);\\r\\n          if (this.videoToStore.length != 0)\\r\\n            this.formDataForRealisation(\\\"video\\\", 0, this.videoToStore);\\r\\n          if (this.docsToStore.length != 0)\\r\\n            this.formDataForRealisation(\\\"docs\\\", 0, this.docsToStore);\\r\\n          console.log(\\\"mon sesult\\\");\\r\\n          console.log(this.formData1.get);\\r\\n\\r\\n          this.isLoading = true;\\r\\n\\r\\n          await axios\\r\\n            .post(\\\"/api/v1/users/\\\" + this.user.id + \\\"/realisations\\\", this.formData1)\\r\\n            .then((response) => {\\r\\n              console.log(response);\\r\\n              this.$vs.notify({\\r\\n                color: \\\"success\\\",\\r\\n                title: \\\"SUCCES\\\",\\r\\n                text: \\\"LA REALISATION/PROJET A ETE AJOUTE AVEC SUCCES\\\",\\r\\n              });\\r\\n              this.init();\\r\\n            })\\r\\n            .catch(({ response: { data } }) => {\\r\\n              console.log(data);\\r\\n              this.$vs.notify({\\r\\n                color: \\\"danger\\\",\\r\\n                title: \\\"Erreur\\\",\\r\\n                text: data,\\r\\n              });\\r\\n            })\\r\\n            .finally(() => {\\r\\n              this.isLoading = false;\\r\\n            });\\r\\n        } else {\\r\\n          this.importation = true;\\r\\n          setTimeout(() => {\\r\\n            this.importation = false;\\r\\n          }, 10000);\\r\\n        }\\r\\n      } else {\\r\\n        this.vide = true;\\r\\n        setTimeout(() => {\\r\\n          this.vide = false;\\r\\n        }, 10000);\\r\\n      }\\r\\n    },\\r\\n    successUpload() {\\r\\n      this.$vs.notify({\\r\\n        color: \\\"success\\\",\\r\\n        title: \\\"Upload Success\\\",\\r\\n        text: \\\"Lorem ipsum dolor sit amet, consectetur\\\",\\r\\n      });\\r\\n    },\\r\\n    async addRealisation() {\\r\\n      //api/v1/users/{user}/subcategories/{subcategory}/realisations\\r\\n      console.log(\\\"azertyuiop  \\\" + this.desc + \\\"\\\");\\r\\n      await axios\\r\\n        .post(\\r\\n          \\\"/api/v1/users/\\\" +\\r\\n            this.user.id +\\r\\n            \\\"/subcategories/\\\" +\\r\\n            this.subcategory_id +\\r\\n            \\\"/realisations\\\",\\r\\n          this.form\\r\\n        )\\r\\n        .then((response) => {\\r\\n          console.log(response);\\r\\n          this.$vs.notify({\\r\\n            color: \\\"success\\\",\\r\\n            color: \\\"success\\\",\\r\\n            title: \\\"Upload Success\\\",\\r\\n            text: response.data.message,\\r\\n          });\\r\\n          this.init();\\r\\n        })\\r\\n        .catch(({ response: { data } }) => {\\r\\n          console.log(data.message);\\r\\n          this.$vs.notify({\\r\\n            color: \\\"danger\\\",\\r\\n            title: \\\"boff\\\",\\r\\n            text: response.data.message,\\r\\n          });\\r\\n        });\\r\\n    },\\r\\n    async getAllTags() {\\r\\n      await axios\\r\\n        .get(\\\"/api/v1/tags\\\")\\r\\n        .then((response) => {\\r\\n          console.log(response.data.data);\\r\\n          // const categories = response.data.data;\\r\\n          this.tags = response.data.data;\\r\\n        })\\r\\n        .catch((error) => {\\r\\n          console.log(error);\\r\\n        });\\r\\n      // .finally(() => (this.activeLoading = false));\\r\\n    },\\r\\n\\r\\n    async handleImageAdded(file, Editor, cursorLocation, resetUploader) {\\r\\n      const CLOUDINARY_UPLOAD_PRESET = \\\"ml_default\\\";\\r\\n      let formData = new FormData();\\r\\n      formData.append(\\\"upload_preset\\\", CLOUDINARY_UPLOAD_PRESET);\\r\\n      formData.append(\\\"folder\\\", \\\"ressources/images\\\");\\r\\n      formData.append(\\\"file\\\", file);\\r\\n      console.log(\\\"sass\\\");\\r\\n      console.log(cursorLocation);\\r\\n      console.log(resetUploader);\\r\\n      // console.log(a);\\r\\n      await axios\\r\\n        .post(\\\"https://api.cloudinary.com/v1_1/ddt7qfshl/image/upload\\\", formData)\\r\\n        .then((response) => {\\r\\n          console.log(response);\\r\\n          this.images.push(response.data);\\r\\n          console.log(Editor);\\r\\n          Editor.insertEmbed(\\r\\n            cursorLocation,\\r\\n            \\\"image\\\",\\r\\n            response.data.secure_url\\r\\n            //response.data.public_id\\r\\n          );\\r\\n          resetUploader();\\r\\n        })\\r\\n        .catch(({ response: { data } }) => {\\r\\n          console.log(data);\\r\\n        });\\r\\n    },\\r\\n    async handleImageRemoved(file, Editor, cursorLocation) {\\r\\n      console.log(\\\"seyd\\\");\\r\\n      console.log(file);\\r\\n      console.log(Editor);\\r\\n      console.log(cursorLocation);\\r\\n      var index = this.images.findIndex(function (ele) {\\r\\n        console.log(\\\"file\\\");\\r\\n        console.log(file);\\r\\n        return ele.secure_url == file;\\r\\n      });\\r\\n      await axios\\r\\n        .post(\\r\\n          \\\"https://api.cloudinary.com/v1_1/ddt7qfshl/image/destroy\\\",\\r\\n          await this.formDataDeletedFile(index)\\r\\n        )\\r\\n        .then((res) => {\\r\\n          console.log(\\\"nathe\\\");\\r\\n          console.log(res.data.result);\\r\\n        })\\r\\n        .catch(({ response: { data } }) => {\\r\\n          console.log(data.message);\\r\\n        });\\r\\n    },\\r\\n    async formDataDeletedFile(index) {\\r\\n      const timestamp = new Date().getTime();\\r\\n      const api_key = \\\"721474231639524\\\";\\r\\n      const string1 =\\r\\n        \\\"public_id=\\\" +\\r\\n        this.images[index].public_id +\\r\\n        \\\"&timestamp=\\\" +\\r\\n        timestamp +\\r\\n        \\\"tKW-g80_eRQbtSHSjwQHbfNzwDc\\\";\\r\\n      const signature = await sha1(string1);\\r\\n      let formData = new FormData();\\r\\n      formData.append(\\\"public_id\\\", this.images[index].public_id);\\r\\n      formData.append(\\\"signature\\\", signature);\\r\\n      formData.append(\\\"timestamp\\\", timestamp);\\r\\n      formData.append(\\\"api_key\\\", api_key);\\r\\n      return formData;\\r\\n    },\\r\\n  },\\r\\n  async mounted() {\\r\\n    await this.getAllTags();\\r\\n    await this.getAllEntities();\\r\\n    console.log(\\\"methode fdghjklmù\\\");\\r\\n    console.log(this.$data);\\r\\n  },\\r\\n};\\r\\n</script>\\r\\n<style scoped>\\r\\n/* tile uploaded pictures */\\r\\n.pointer {\\r\\n  cursor: pointer;\\r\\n}\\r\\n/*.upload-list-inline :deep(.ant-upload-list-item) {\\r\\n  float: left;\\r\\n  width: 200px;\\r\\n  margin-right: 8px;\\r\\n}\\r\\n.upload-list-inline [class*=\\\"-upload-list-rtl\\\"] :deep(.ant-upload-list-item) {\\r\\n  float: right;\\r\\n}\\r\\n.editor {\\r\\n  margin-left: 0px !important;\\r\\n  padding: 0px !important;\\r\\n}\\r\\n.cdx-settings-button {\\r\\n  color: red;\\r\\n  background: greenyellow;\\r\\n}*/\\r\\n/*.ce-block__content,\\r\\n.ce-toolbar__content {\\r\\n  max-width: unset;\\r\\n  background: green !important;\\r\\n}*/\\r\\n</style>\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css&\n");

/***/ }),

/***/ "./node_modules/laravel-mix/node_modules/style-loader/dist/cjs.js!./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/laravel-mix/node_modules/style-loader/dist/cjs.js!./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_laravel_mix_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../node_modules/laravel-mix/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/laravel-mix/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_laravel_mix_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_laravel_mix_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_cjs_js_clonedRuleSet_9_use_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_9_use_2_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_style_index_0_id_3531c3f7_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css& */ \"./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css&\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _node_modules_laravel_mix_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_laravel_mix_node_modules_css_loader_dist_cjs_js_clonedRuleSet_9_use_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_9_use_2_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_style_index_0_id_3531c3f7_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_laravel_mix_node_modules_css_loader_dist_cjs_js_clonedRuleSet_9_use_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_9_use_2_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_style_index_0_id_3531c3f7_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1taXgvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9sYXJhdmVsLW1peC9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC05LnVzZVsxXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC05LnVzZVsyXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvUmVhbGlzYXRpb25zL1JlYWxpc2F0aW9uc0FkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTM1MzFjM2Y3JnNjb3BlZD10cnVlJmxhbmc9Y3NzJi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJIO0FBQzNILFlBQXVhOztBQUV2YTs7QUFFQTtBQUNBOztBQUVBLGFBQWEsbUlBQUcsQ0FBQyxvWEFBTzs7OztBQUl4QixpRUFBZSwyWEFBYyxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvUmVhbGlzYXRpb25zL1JlYWxpc2F0aW9uc0FkLnZ1ZT8xZmY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1taXgvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1taXgvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtOS51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC05LnVzZVsyXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlYWxpc2F0aW9uc0FkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTM1MzFjM2Y3JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/laravel-mix/node_modules/style-loader/dist/cjs.js!./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css&\n");

/***/ }),

/***/ "./node_modules/quill-image-drop-module/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/quill-image-drop-module/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageDrop\": () => (/* binding */ ImageDrop)\n/* harmony export */ });\n/**\n * Custom module for quilljs to allow user to drag images from their file system into the editor\n * and paste images from clipboard (Works on Chrome, Firefox, Edge, not on Safari)\n * @see https://quilljs.com/blog/building-a-custom-module/\n */\nclass ImageDrop {\n\n\t/**\n\t * Instantiate the module given a quill instance and any options\n\t * @param {Quill} quill\n\t * @param {Object} options\n\t */\n\tconstructor(quill, options = {}) {\n\t\t// save the quill reference\n\t\tthis.quill = quill;\n\t\t// bind handlers to this instance\n\t\tthis.handleDrop = this.handleDrop.bind(this);\n\t\tthis.handlePaste = this.handlePaste.bind(this);\n\t\t// listen for drop and paste events\n\t\tthis.quill.root.addEventListener('drop', this.handleDrop, false);\n\t\tthis.quill.root.addEventListener('paste', this.handlePaste, false);\n\t}\n\n\t/**\n\t * Handler for drop event to read dropped files from evt.dataTransfer\n\t * @param {Event} evt\n\t */\n\thandleDrop(evt) {\n\t\tevt.preventDefault();\n\t\tif (evt.dataTransfer && evt.dataTransfer.files && evt.dataTransfer.files.length) {\n\t\t\tif (document.caretRangeFromPoint) {\n\t\t\t\tconst selection = document.getSelection();\n\t\t\t\tconst range = document.caretRangeFromPoint(evt.clientX, evt.clientY);\n\t\t\t\tif (selection && range) {\n\t\t\t\t\tselection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.readFiles(evt.dataTransfer.files, this.insert.bind(this));\n\t\t}\n\t}\n\n\t/**\n\t * Handler for paste event to read pasted files from evt.clipboardData\n\t * @param {Event} evt\n\t */\n\thandlePaste(evt) {\n\t\tif (evt.clipboardData && evt.clipboardData.items && evt.clipboardData.items.length) {\n\t\t\tthis.readFiles(evt.clipboardData.items, dataUrl => {\n\t\t\t\tconst selection = this.quill.getSelection();\n\t\t\t\tif (selection) {\n\t\t\t\t\t// we must be in a browser that supports pasting (like Firefox)\n\t\t\t\t\t// so it has already been placed into the editor\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// otherwise we wait until after the paste when this.quill.getSelection()\n\t\t\t\t\t// will return a valid index\n\t\t\t\t\tsetTimeout(() => this.insert(dataUrl), 0);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Insert the image into the document at the current cursor position\n\t * @param {String} dataUrl  The base64-encoded image URI\n\t */\n\tinsert(dataUrl) {\n\t\tconst index = (this.quill.getSelection() || {}).index || this.quill.getLength();\n\t\tthis.quill.insertEmbed(index, 'image', dataUrl, 'user');\n\t}\n\n\t/**\n\t * Extract image URIs a list of files from evt.dataTransfer or evt.clipboardData\n\t * @param {File[]} files  One or more File objects\n\t * @param {Function} callback  A function to send each data URI to\n\t */\n\treadFiles(files, callback) {\n\t\t// check each file for an image\n\t\t[].forEach.call(files, file => {\n\t\t\tif (!file.type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\\.microsoft\\.icon)/i)) {\n\t\t\t\t// file is not an image\n\t\t\t\t// Note that some file formats such as psd start with image/* but are not readable\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set up file reader\n\t\t\tconst reader = new FileReader();\n\t\t\treader.onload = (evt) => {\n\t\t\t\tcallback(evt.target.result);\n\t\t\t};\n\t\t\t// read the clipboard item or file\n\t\t\tconst blob = file.getAsFile ? file.getAsFile() : file;\n\t\t\tif (blob instanceof Blob) {\n\t\t\t\treader.readAsDataURL(blob);\n\t\t\t}\n\t\t});\n\t}\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVpbGwtaW1hZ2UtZHJvcC1tb2R1bGUvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTzs7QUFFUDtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1aWxsLWltYWdlLWRyb3AtbW9kdWxlL2luZGV4LmpzPzkwNGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDdXN0b20gbW9kdWxlIGZvciBxdWlsbGpzIHRvIGFsbG93IHVzZXIgdG8gZHJhZyBpbWFnZXMgZnJvbSB0aGVpciBmaWxlIHN5c3RlbSBpbnRvIHRoZSBlZGl0b3JcbiAqIGFuZCBwYXN0ZSBpbWFnZXMgZnJvbSBjbGlwYm9hcmQgKFdvcmtzIG9uIENocm9tZSwgRmlyZWZveCwgRWRnZSwgbm90IG9uIFNhZmFyaSlcbiAqIEBzZWUgaHR0cHM6Ly9xdWlsbGpzLmNvbS9ibG9nL2J1aWxkaW5nLWEtY3VzdG9tLW1vZHVsZS9cbiAqL1xuZXhwb3J0IGNsYXNzIEltYWdlRHJvcCB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlIHRoZSBtb2R1bGUgZ2l2ZW4gYSBxdWlsbCBpbnN0YW5jZSBhbmQgYW55IG9wdGlvbnNcblx0ICogQHBhcmFtIHtRdWlsbH0gcXVpbGxcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICovXG5cdGNvbnN0cnVjdG9yKHF1aWxsLCBvcHRpb25zID0ge30pIHtcblx0XHQvLyBzYXZlIHRoZSBxdWlsbCByZWZlcmVuY2Vcblx0XHR0aGlzLnF1aWxsID0gcXVpbGw7XG5cdFx0Ly8gYmluZCBoYW5kbGVycyB0byB0aGlzIGluc3RhbmNlXG5cdFx0dGhpcy5oYW5kbGVEcm9wID0gdGhpcy5oYW5kbGVEcm9wLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5oYW5kbGVQYXN0ZSA9IHRoaXMuaGFuZGxlUGFzdGUuYmluZCh0aGlzKTtcblx0XHQvLyBsaXN0ZW4gZm9yIGRyb3AgYW5kIHBhc3RlIGV2ZW50c1xuXHRcdHRoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5oYW5kbGVEcm9wLCBmYWxzZSk7XG5cdFx0dGhpcy5xdWlsbC5yb290LmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGhpcy5oYW5kbGVQYXN0ZSwgZmFsc2UpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXIgZm9yIGRyb3AgZXZlbnQgdG8gcmVhZCBkcm9wcGVkIGZpbGVzIGZyb20gZXZ0LmRhdGFUcmFuc2ZlclxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldnRcblx0ICovXG5cdGhhbmRsZURyb3AoZXZ0KSB7XG5cdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0aWYgKGV2dC5kYXRhVHJhbnNmZXIgJiYgZXZ0LmRhdGFUcmFuc2Zlci5maWxlcyAmJiBldnQuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aCkge1xuXHRcdFx0aWYgKGRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQpIHtcblx0XHRcdFx0Y29uc3Qgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG5cdFx0XHRcdGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY2FyZXRSYW5nZUZyb21Qb2ludChldnQuY2xpZW50WCwgZXZ0LmNsaWVudFkpO1xuXHRcdFx0XHRpZiAoc2VsZWN0aW9uICYmIHJhbmdlKSB7XG5cdFx0XHRcdFx0c2VsZWN0aW9uLnNldEJhc2VBbmRFeHRlbnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCByYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnJlYWRGaWxlcyhldnQuZGF0YVRyYW5zZmVyLmZpbGVzLCB0aGlzLmluc2VydC5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlciBmb3IgcGFzdGUgZXZlbnQgdG8gcmVhZCBwYXN0ZWQgZmlsZXMgZnJvbSBldnQuY2xpcGJvYXJkRGF0YVxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldnRcblx0ICovXG5cdGhhbmRsZVBhc3RlKGV2dCkge1xuXHRcdGlmIChldnQuY2xpcGJvYXJkRGF0YSAmJiBldnQuY2xpcGJvYXJkRGF0YS5pdGVtcyAmJiBldnQuY2xpcGJvYXJkRGF0YS5pdGVtcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMucmVhZEZpbGVzKGV2dC5jbGlwYm9hcmREYXRhLml0ZW1zLCBkYXRhVXJsID0+IHtcblx0XHRcdFx0Y29uc3Qgc2VsZWN0aW9uID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcblx0XHRcdFx0aWYgKHNlbGVjdGlvbikge1xuXHRcdFx0XHRcdC8vIHdlIG11c3QgYmUgaW4gYSBicm93c2VyIHRoYXQgc3VwcG9ydHMgcGFzdGluZyAobGlrZSBGaXJlZm94KVxuXHRcdFx0XHRcdC8vIHNvIGl0IGhhcyBhbHJlYWR5IGJlZW4gcGxhY2VkIGludG8gdGhlIGVkaXRvclxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSB3YWl0IHVudGlsIGFmdGVyIHRoZSBwYXN0ZSB3aGVuIHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKClcblx0XHRcdFx0XHQvLyB3aWxsIHJldHVybiBhIHZhbGlkIGluZGV4XG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB0aGlzLmluc2VydChkYXRhVXJsKSwgMCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBJbnNlcnQgdGhlIGltYWdlIGludG8gdGhlIGRvY3VtZW50IGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvblxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVVybCAgVGhlIGJhc2U2NC1lbmNvZGVkIGltYWdlIFVSSVxuXHQgKi9cblx0aW5zZXJ0KGRhdGFVcmwpIHtcblx0XHRjb25zdCBpbmRleCA9ICh0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpIHx8IHt9KS5pbmRleCB8fCB0aGlzLnF1aWxsLmdldExlbmd0aCgpO1xuXHRcdHRoaXMucXVpbGwuaW5zZXJ0RW1iZWQoaW5kZXgsICdpbWFnZScsIGRhdGFVcmwsICd1c2VyJyk7XG5cdH1cblxuXHQvKipcblx0ICogRXh0cmFjdCBpbWFnZSBVUklzIGEgbGlzdCBvZiBmaWxlcyBmcm9tIGV2dC5kYXRhVHJhbnNmZXIgb3IgZXZ0LmNsaXBib2FyZERhdGFcblx0ICogQHBhcmFtIHtGaWxlW119IGZpbGVzICBPbmUgb3IgbW9yZSBGaWxlIG9iamVjdHNcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgIEEgZnVuY3Rpb24gdG8gc2VuZCBlYWNoIGRhdGEgVVJJIHRvXG5cdCAqL1xuXHRyZWFkRmlsZXMoZmlsZXMsIGNhbGxiYWNrKSB7XG5cdFx0Ly8gY2hlY2sgZWFjaCBmaWxlIGZvciBhbiBpbWFnZVxuXHRcdFtdLmZvckVhY2guY2FsbChmaWxlcywgZmlsZSA9PiB7XG5cdFx0XHRpZiAoIWZpbGUudHlwZS5tYXRjaCgvXmltYWdlXFwvKGdpZnxqcGU/Z3xhP3BuZ3xzdmd8d2VicHxibXB8dm5kXFwubWljcm9zb2Z0XFwuaWNvbikvaSkpIHtcblx0XHRcdFx0Ly8gZmlsZSBpcyBub3QgYW4gaW1hZ2Vcblx0XHRcdFx0Ly8gTm90ZSB0aGF0IHNvbWUgZmlsZSBmb3JtYXRzIHN1Y2ggYXMgcHNkIHN0YXJ0IHdpdGggaW1hZ2UvKiBidXQgYXJlIG5vdCByZWFkYWJsZVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHQvLyBzZXQgdXAgZmlsZSByZWFkZXJcblx0XHRcdGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cdFx0XHRyZWFkZXIub25sb2FkID0gKGV2dCkgPT4ge1xuXHRcdFx0XHRjYWxsYmFjayhldnQudGFyZ2V0LnJlc3VsdCk7XG5cdFx0XHR9O1xuXHRcdFx0Ly8gcmVhZCB0aGUgY2xpcGJvYXJkIGl0ZW0gb3IgZmlsZVxuXHRcdFx0Y29uc3QgYmxvYiA9IGZpbGUuZ2V0QXNGaWxlID8gZmlsZS5nZXRBc0ZpbGUoKSA6IGZpbGU7XG5cdFx0XHRpZiAoYmxvYiBpbnN0YW5jZW9mIEJsb2IpIHtcblx0XHRcdFx0cmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/quill-image-drop-module/index.js\n");

/***/ }),

/***/ "./node_modules/quill-image-resize-vue/image-resize-vue.min.js":
/*!*********************************************************************!*\
  !*** ./node_modules/quill-image-resize-vue/image-resize-vue.min.js ***!
  \*********************************************************************/
/***/ (function(module) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_545__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_545__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_545__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_545__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__nested_webpack_require_545__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_545__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_545__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_545__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_545__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_545__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_545__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_545__(__nested_webpack_require_545__.s = 41);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __nested_webpack_require_3774__) {\n\nvar freeGlobal = __nested_webpack_require_3774__(23);\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __nested_webpack_require_4820__) {\n\nvar listCacheClear = __nested_webpack_require_4820__(82),\n    listCacheDelete = __nested_webpack_require_4820__(83),\n    listCacheGet = __nested_webpack_require_4820__(84),\n    listCacheHas = __nested_webpack_require_4820__(85),\n    listCacheSet = __nested_webpack_require_4820__(86);\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __nested_webpack_require_5746__) {\n\nvar eq = __nested_webpack_require_5746__(8);\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __nested_webpack_require_6317__) {\n\nvar Symbol = __nested_webpack_require_6317__(17),\n    getRawTag = __nested_webpack_require_6317__(71),\n    objectToString = __nested_webpack_require_6317__(94);\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __nested_webpack_require_7184__) {\n\nvar isKeyable = __nested_webpack_require_7184__(80);\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __nested_webpack_require_7661__) {\n\nvar getNative = __nested_webpack_require_7661__(11);\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_8792__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_8792__.d(__webpack_exports__, \"a\", function() { return BaseModule; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BaseModule = function BaseModule(resizer) {\n    _classCallCheck(this, BaseModule);\n\n    this.onCreate = function () {};\n\n    this.onDestroy = function () {};\n\n    this.onUpdate = function () {};\n\n    this.overlay = resizer.overlay;\n    this.img = resizer.img;\n    this.options = resizer.options;\n    this.requestUpdate = resizer.onUpdate;\n}\n/*\n    requestUpdate (passed in by the library during construction, above) can be used to let the library know that\n    you've changed something about the image that would require re-calculating the overlay (and all of its child\n    elements)\n     For example, if you add a margin to the element, you'll want to call this or else all the controls will be\n    misaligned on-screen.\n */\n\n/*\n    onCreate will be called when the element is clicked on\n     If the module has any user controls, it should create any containers that it'll need here.\n    The overlay has absolute positioning, and will be automatically repositioned and resized as needed, so you can\n    use your own absolute positioning and the 'top', 'right', etc. styles to be positioned relative to the element\n    on-screen.\n */\n\n\n/*\n    onDestroy will be called when the element is de-selected, or when this module otherwise needs to tidy up.\n     If you created any DOM elements in onCreate, please remove them from the DOM and destroy them here.\n */\n\n\n/*\n    onUpdate will be called any time that the element is changed (e.g. resized, aligned, etc.)\n     This frequently happens during resize dragging, so keep computations light while here to ensure a smooth\n    user experience.\n */\n;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __nested_webpack_require_10752__) {\n\nvar defineProperty = __nested_webpack_require_10752__(22);\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __nested_webpack_require_11450__) {\n\nvar baseIsNative = __nested_webpack_require_11450__(55),\n    getValue = __nested_webpack_require_11450__(72);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __nested_webpack_require_12009__) {\n\nvar isFunction = __nested_webpack_require_12009__(13),\n    isLength = __nested_webpack_require_12009__(32);\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __nested_webpack_require_12919__) {\n\nvar baseGetTag = __nested_webpack_require_12919__(5),\n    isObject = __nested_webpack_require_12919__(0);\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __nested_webpack_require_14563__) {\n\n!function(t,e){  true?module.exports=e(__nested_webpack_require_14563__(111)):0}(this,function(t){return function(t){function e(i){if(n[i])return n[i].exports;var l=n[i]={i:i,l:!1,exports:{}};return t[i].call(l.exports,l,l.exports,e),l.l=!0,l.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:i})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,\"a\",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p=\"/\",e(e.s=2)}([function(e,n){e.exports=t},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0});var i=n(4),l=n.n(i),o=n(6),r=n(5),u=r(l.a,o.a,!1,null,null,null);e.default=u.exports},function(t,e,n){\"use strict\";function i(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0}),e.install=e.quillEditor=e.Quill=void 0;var l=n(0),o=i(l),r=n(1),u=i(r),s=window.Quill||o.default,a=function(t,e){e&&(u.default.props.globalOptions.default=function(){return e}),t.component(u.default.name,u.default)},c={Quill:s,quillEditor:u.default,install:a};e.default=c,e.Quill=s,e.quillEditor=u.default,e.install=a},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.default={theme:\"snow\",boundary:document.body,modules:{toolbar:[[\"bold\",\"italic\",\"underline\",\"strike\"],[\"blockquote\",\"code-block\"],[{header:1},{header:2}],[{list:\"ordered\"},{list:\"bullet\"}],[{script:\"sub\"},{script:\"super\"}],[{indent:\"-1\"},{indent:\"+1\"}],[{direction:\"rtl\"}],[{size:[\"small\",!1,\"large\",\"huge\"]}],[{header:[1,2,3,4,5,6,!1]}],[{color:[]},{background:[]}],[{font:[]}],[{align:[]}],[\"clean\"],[\"link\",\"image\",\"video\"]]},placeholder:\"Insert text here ...\",readOnly:!1}},function(t,e,n){\"use strict\";function i(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,\"__esModule\",{value:!0});var l=n(0),o=i(l),r=n(3),u=i(r),s=window.Quill||o.default;\"function\"!=typeof Object.assign&&Object.defineProperty(Object,\"assign\",{value:function(t,e){if(null==t)throw new TypeError(\"Cannot convert undefined or null to object\");for(var n=Object(t),i=1;i<arguments.length;i++){var l=arguments[i];if(null!=l)for(var o in l)Object.prototype.hasOwnProperty.call(l,o)&&(n[o]=l[o])}return n},writable:!0,configurable:!0}),e.default={name:\"quill-editor\",data:function(){return{_options:{},_content:\"\",defaultOptions:u.default}},props:{content:String,value:String,disabled:{type:Boolean,default:!1},options:{type:Object,required:!1,default:function(){return{}}},globalOptions:{type:Object,required:!1,default:function(){return{}}}},mounted:function(){this.initialize()},beforeDestroy:function(){this.quill=null,delete this.quill},methods:{initialize:function(){var t=this;this.$el&&(this._options=Object.assign({},this.defaultOptions,this.globalOptions,this.options),this.quill=new s(this.$refs.editor,this._options),this.quill.enable(!1),(this.value||this.content)&&this.quill.pasteHTML(this.value||this.content),this.disabled||this.quill.enable(!0),this.quill.on(\"selection-change\",function(e){e?t.$emit(\"focus\",t.quill):t.$emit(\"blur\",t.quill)}),this.quill.on(\"text-change\",function(e,n,i){var l=t.$refs.editor.children[0].innerHTML,o=t.quill,r=t.quill.getText();\"<p><br></p>\"===l&&(l=\"\"),t._content=l,t.$emit(\"input\",t._content),t.$emit(\"change\",{html:l,text:r,quill:o})}),this.$emit(\"ready\",this.quill))}},watch:{content:function(t,e){this.quill&&(t&&t!==this._content?(this._content=t,this.quill.pasteHTML(t)):t||this.quill.setText(\"\"))},value:function(t,e){this.quill&&(t&&t!==this._content?(this._content=t,this.quill.pasteHTML(t)):t||this.quill.setText(\"\"))},disabled:function(t,e){this.quill&&this.quill.enable(!t)}}}},function(t,e){t.exports=function(t,e,n,i,l,o){var r,u=t=t||{},s=typeof t.default;\"object\"!==s&&\"function\"!==s||(r=t,u=t.default);var a=\"function\"==typeof u?u.options:u;e&&(a.render=e.render,a.staticRenderFns=e.staticRenderFns,a._compiled=!0),n&&(a.functional=!0),l&&(a._scopeId=l);var c;if(o?(c=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||\"undefined\"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(o)},a._ssrRegister=c):i&&(c=i),c){var d=a.functional,f=d?a.render:a.beforeCreate;d?(a._injectStyles=c,a.render=function(t,e){return c.call(e),f(t,e)}):a.beforeCreate=f?[].concat(f,c):[c]}return{esModule:r,exports:u,options:a}}},function(t,e,n){\"use strict\";var i=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"div\",{staticClass:\"quill-editor\"},[t._t(\"toolbar\"),t._v(\" \"),n(\"div\",{ref:\"editor\"})],2)},l=[],o={render:i,staticRenderFns:l};e.a=o}])});\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __nested_webpack_require_19546__) {\n\nvar getNative = __nested_webpack_require_19546__(11),\n    root = __nested_webpack_require_19546__(1);\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __nested_webpack_require_19823__) {\n\nvar root = __nested_webpack_require_19823__(1);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __nested_webpack_require_20794__) {\n\nvar baseAssignValue = __nested_webpack_require_20794__(10),\n    eq = __nested_webpack_require_20794__(8);\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __nested_webpack_require_21455__) {\n\nvar Stack = __nested_webpack_require_21455__(48),\n    assignMergeValue = __nested_webpack_require_21455__(19),\n    baseFor = __nested_webpack_require_21455__(53),\n    baseMergeDeep = __nested_webpack_require_21455__(58),\n    isObject = __nested_webpack_require_21455__(0),\n    keysIn = __nested_webpack_require_21455__(34),\n    safeGet = __nested_webpack_require_21455__(27);\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __nested_webpack_require_22863__) {\n\nvar identity = __nested_webpack_require_22863__(28),\n    overRest = __nested_webpack_require_22863__(96),\n    setToString = __nested_webpack_require_22863__(97);\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __nested_webpack_require_23501__) {\n\nvar getNative = __nested_webpack_require_23501__(11);\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __nested_webpack_require_23812__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_23812__(35)))\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __nested_webpack_require_24178__) {\n\nvar overArg = __nested_webpack_require_24178__(95);\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nmodule.exports = safeGet;\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __nested_webpack_require_26714__) {\n\nvar baseIsArguments = __nested_webpack_require_26714__(54),\n    isObjectLike = __nested_webpack_require_26714__(2);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __nested_webpack_require_28354__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var root = __nested_webpack_require_28354__(1),\n    stubFalse = __nested_webpack_require_28354__(109);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_28354__(14)(module)))\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __nested_webpack_require_30534__) {\n\nvar baseIsTypedArray = __nested_webpack_require_30534__(56),\n    baseUnary = __nested_webpack_require_30534__(61),\n    nodeUtil = __nested_webpack_require_30534__(93);\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __nested_webpack_require_31301__) {\n\nvar arrayLikeKeys = __nested_webpack_require_31301__(50),\n    baseKeysIn = __nested_webpack_require_31301__(57),\n    isArrayLike = __nested_webpack_require_31301__(12);\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n    modules: ['DisplaySize', 'Toolbar', 'Resize'],\n    overlayStyles: {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        border: '1px dashed #444'\n    },\n    handleStyles: {\n        position: 'absolute',\n        height: '12px',\n        width: '12px',\n        backgroundColor: 'white',\n        border: '1px solid #777',\n        boxSizing: 'border-box',\n        opacity: '0.80'\n    },\n    displayStyles: {\n        position: 'absolute',\n        font: '12px/1.0 Arial, Helvetica, sans-serif',\n        padding: '4px 8px',\n        textAlign: 'center',\n        backgroundColor: 'white',\n        color: '#333',\n        border: '1px solid #777',\n        boxSizing: 'border-box',\n        opacity: '0.80',\n        cursor: 'default'\n    },\n    toolbarStyles: {\n        position: 'absolute',\n        top: '-12px',\n        right: '0',\n        left: '0',\n        height: '0',\n        minWidth: '100px',\n        font: '12px/1.0 Arial, Helvetica, sans-serif',\n        textAlign: 'center',\n        color: '#333',\n        boxSizing: 'border-box',\n        cursor: 'default'\n    },\n    toolbarButtonStyles: {\n        display: 'inline-block',\n        width: '24px',\n        height: '24px',\n        background: 'white',\n        border: '1px solid #999',\n        verticalAlign: 'middle'\n    },\n    toolbarButtonSvgStyles: {\n        fill: '#444',\n        stroke: '#444',\n        strokeWidth: '2'\n    }\n});\n\n/***/ }),\n/* 37 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_34294__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_34294__.d(__webpack_exports__, \"a\", function() { return DisplaySize; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModule__ = __nested_webpack_require_34294__(9);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar DisplaySize = function (_BaseModule) {\n    _inherits(DisplaySize, _BaseModule);\n\n    function DisplaySize() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, DisplaySize);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DisplaySize.__proto__ || Object.getPrototypeOf(DisplaySize)).call.apply(_ref, [this].concat(args))), _this), _this.onCreate = function () {\n            // Create the container to hold the size display\n            _this.display = document.createElement('div');\n\n            // Apply styles\n            Object.assign(_this.display.style, _this.options.displayStyles);\n\n            // Attach it\n            _this.overlay.appendChild(_this.display);\n        }, _this.onDestroy = function () {}, _this.onUpdate = function () {\n            if (!_this.display || !_this.img) {\n                return;\n            }\n\n            var size = _this.getCurrentSize();\n            _this.display.innerHTML = size.join(' &times; ');\n            if (size[0] > 120 && size[1] > 30) {\n                // position on top of image\n                Object.assign(_this.display.style, {\n                    right: '4px',\n                    bottom: '4px',\n                    left: 'auto'\n                });\n            } else if (_this.img.style.float === 'right') {\n                // position off bottom left\n                var dispRect = _this.display.getBoundingClientRect();\n                Object.assign(_this.display.style, {\n                    right: 'auto',\n                    bottom: '-' + (dispRect.height + 4) + 'px',\n                    left: '-' + (dispRect.width + 4) + 'px'\n                });\n            } else {\n                // position off bottom right\n                var _dispRect = _this.display.getBoundingClientRect();\n                Object.assign(_this.display.style, {\n                    right: '-' + (_dispRect.width + 4) + 'px',\n                    bottom: '-' + (_dispRect.height + 4) + 'px',\n                    left: 'auto'\n                });\n            }\n        }, _this.getCurrentSize = function () {\n            return [_this.img.width, Math.round(_this.img.width / _this.img.naturalWidth * _this.img.naturalHeight)];\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return DisplaySize;\n}(__WEBPACK_IMPORTED_MODULE_0__BaseModule__[\"a\" /* BaseModule */]);\n\n/***/ }),\n/* 38 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_38043__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_38043__.d(__webpack_exports__, \"a\", function() { return Resize; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModule__ = __nested_webpack_require_38043__(9);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar Resize = function (_BaseModule) {\n    _inherits(Resize, _BaseModule);\n\n    function Resize() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, Resize);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Resize.__proto__ || Object.getPrototypeOf(Resize)).call.apply(_ref, [this].concat(args))), _this), _this.onCreate = function () {\n            // track resize handles\n            _this.boxes = [];\n\n            // add 4 resize handles\n            _this.addBox('nwse-resize'); // top left\n            _this.addBox('nesw-resize'); // top right\n            _this.addBox('nwse-resize'); // bottom right\n            _this.addBox('nesw-resize'); // bottom left\n\n            _this.positionBoxes();\n        }, _this.onDestroy = function () {\n            // reset drag handle cursors\n            _this.setCursor('');\n        }, _this.positionBoxes = function () {\n            var handleXOffset = -parseFloat(_this.options.handleStyles.width) / 2 + 'px';\n            var handleYOffset = -parseFloat(_this.options.handleStyles.height) / 2 + 'px';\n\n            // set the top and left for each drag handle\n            [{ left: handleXOffset, top: handleYOffset }, // top left\n            { right: handleXOffset, top: handleYOffset }, // top right\n            { right: handleXOffset, bottom: handleYOffset }, // bottom right\n            { left: handleXOffset, bottom: handleYOffset }].forEach(function (pos, idx) {\n                Object.assign(_this.boxes[idx].style, pos);\n            });\n        }, _this.addBox = function (cursor) {\n            // create div element for resize handle\n            var box = document.createElement('div');\n\n            // Star with the specified styles\n            Object.assign(box.style, _this.options.handleStyles);\n            box.style.cursor = cursor;\n\n            // Set the width/height to use 'px'\n            box.style.width = _this.options.handleStyles.width + 'px';\n            box.style.height = _this.options.handleStyles.height + 'px';\n\n            // listen for mousedown on each box\n            box.addEventListener('mousedown', _this.handleMousedown, false);\n            // add drag handle to document\n            _this.overlay.appendChild(box);\n            // keep track of drag handle\n            _this.boxes.push(box);\n        }, _this.handleMousedown = function (evt) {\n            // note which box\n            _this.dragBox = evt.target;\n            // note starting mousedown position\n            _this.dragStartX = evt.clientX;\n            // store the width before the drag\n            _this.preDragWidth = _this.img.width || _this.img.naturalWidth;\n            // set the proper cursor everywhere\n            _this.setCursor(_this.dragBox.style.cursor);\n            // listen for movement and mouseup\n            document.addEventListener('mousemove', _this.handleDrag, false);\n            document.addEventListener('mouseup', _this.handleMouseup, false);\n        }, _this.handleMouseup = function () {\n            // reset cursor everywhere\n            _this.setCursor('');\n            // stop listening for movement and mouseup\n            document.removeEventListener('mousemove', _this.handleDrag);\n            document.removeEventListener('mouseup', _this.handleMouseup);\n        }, _this.handleDrag = function (evt) {\n            if (!_this.img) {\n                // image not set yet\n                return;\n            }\n            // update image size\n            var deltaX = evt.clientX - _this.dragStartX;\n            if (_this.dragBox === _this.boxes[0] || _this.dragBox === _this.boxes[3]) {\n                // left-side resize handler; dragging right shrinks image\n                _this.img.width = Math.round(_this.preDragWidth - deltaX);\n            } else {\n                // right-side resize handler; dragging right enlarges image\n                _this.img.width = Math.round(_this.preDragWidth + deltaX);\n            }\n            _this.requestUpdate();\n        }, _this.setCursor = function (value) {\n            [document.body, _this.img].forEach(function (el) {\n                el.style.cursor = value; // eslint-disable-line no-param-reassign\n            });\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Resize;\n}(__WEBPACK_IMPORTED_MODULE_0__BaseModule__[\"a\" /* BaseModule */]);\n\n/***/ }),\n/* 39 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_43754__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_43754__.d(__webpack_exports__, \"a\", function() { return Toolbar; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseModule__ = __nested_webpack_require_43754__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_quill_editor__ = __nested_webpack_require_43754__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_quill_editor___default = __nested_webpack_require_43754__.n(__WEBPACK_IMPORTED_MODULE_1_vue_quill_editor__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\nwindow.Quill = __WEBPACK_IMPORTED_MODULE_1_vue_quill_editor__[\"Quill\"];\n\nvar Parchment = window.Quill.imports.parchment;\nvar FloatStyle = new Parchment.Attributor.Style('float', 'float');\nvar MarginStyle = new Parchment.Attributor.Style('margin', 'margin');\nvar DisplayStyle = new Parchment.Attributor.Style('display', 'display');\n\nvar Toolbar = function (_BaseModule) {\n    _inherits(Toolbar, _BaseModule);\n\n    function Toolbar() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, Toolbar);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call.apply(_ref, [this].concat(args))), _this), _this.onCreate = function () {\n            // Setup Toolbar\n            _this.toolbar = document.createElement('div');\n            Object.assign(_this.toolbar.style, _this.options.toolbarStyles);\n            _this.overlay.appendChild(_this.toolbar);\n\n            // Setup Buttons\n            _this._defineAlignments();\n            _this._addToolbarButtons();\n        }, _this.onDestroy = function () {}, _this.onUpdate = function () {}, _this._defineAlignments = function () {\n            _this.alignments = [{\n                icon: '<svg viewbox=\"0 0 18 18\">\\n                          <line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"9\" y2=\"9\"></line>\\n                          <line class=\"ql-stroke\" x1=\"3\" x2=\"13\" y1=\"14\" y2=\"14\"></line>\\n                          <line class=\"ql-stroke\" x1=\"3\" x2=\"9\" y1=\"4\" y2=\"4\"></line>\\n                        </svg>',\n                apply: function apply() {\n                    DisplayStyle.add(_this.img, 'inline');\n                    FloatStyle.add(_this.img, 'left');\n                    MarginStyle.add(_this.img, '0 1em 1em 0');\n                },\n                isApplied: function isApplied() {\n                    return FloatStyle.value(_this.img) === 'left';\n                }\n            }, {\n                icon: '<svg viewbox=\"0 0 18 18\">\\n                          <line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\\n                          <line class=\"ql-stroke\" x1=\"14\" x2=\"4\" y1=\"14\" y2=\"14\"></line>\\n                          <line class=\"ql-stroke\" x1=\"12\" x2=\"6\" y1=\"4\" y2=\"4\"></line>\\n                        </svg>',\n                apply: function apply() {\n                    DisplayStyle.add(_this.img, 'block');\n                    FloatStyle.remove(_this.img);\n                    MarginStyle.add(_this.img, 'auto');\n                },\n                isApplied: function isApplied() {\n                    return MarginStyle.value(_this.img) === 'auto';\n                }\n            }, {\n                icon: '<svg viewbox=\"0 0 18 18\">\\n                          <line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\\n                          <line class=\"ql-stroke\" x1=\"15\" x2=\"5\" y1=\"14\" y2=\"14\"></line>\\n                          <line class=\"ql-stroke\" x1=\"15\" x2=\"9\" y1=\"4\" y2=\"4\"></line>\\n                        </svg>',\n                apply: function apply() {\n                    DisplayStyle.add(_this.img, 'inline');\n                    FloatStyle.add(_this.img, 'right');\n                    MarginStyle.add(_this.img, '0 0 1em 1em');\n                },\n                isApplied: function isApplied() {\n                    return FloatStyle.value(_this.img) === 'right';\n                }\n            }];\n        }, _this._addToolbarButtons = function () {\n            var buttons = [];\n            _this.alignments.forEach(function (alignment, idx) {\n                var button = document.createElement('span');\n                buttons.push(button);\n                button.innerHTML = alignment.icon;\n                button.addEventListener('click', function () {\n                    // deselect all buttons\n                    buttons.forEach(function (button) {\n                        return button.style.filter = '';\n                    });\n                    if (alignment.isApplied()) {\n                        // If applied, unapply\n                        FloatStyle.remove(_this.img);\n                        MarginStyle.remove(_this.img);\n                        DisplayStyle.remove(_this.img);\n                    } else {\n                        // otherwise, select button and apply\n                        _this._selectButton(button);\n                        alignment.apply();\n                    }\n                    // image may change position; redraw drag handles\n                    _this.requestUpdate();\n                });\n                Object.assign(button.style, _this.options.toolbarButtonStyles);\n                if (idx > 0) {\n                    button.style.borderLeftWidth = '0';\n                }\n                if (button.children.length) {\n                    Object.assign(button.children[0].style, _this.options.toolbarButtonSvgStyles);\n                }\n                if (alignment.isApplied()) {\n                    // select button if previously applied\n                    _this._selectButton(button);\n                }\n                _this.toolbar.appendChild(button);\n            });\n        }, _this._selectButton = function (button) {\n            button.style.filter = 'invert(20%)';\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    // The toolbar and its children will be destroyed when the overlay is removed\n\n\n    // Nothing to update on drag because we are are positioned relative to the overlay\n\n\n    return Toolbar;\n}(__WEBPACK_IMPORTED_MODULE_0__BaseModule__[\"a\" /* BaseModule */]);\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __nested_webpack_require_50932__) {\n\nvar apply = __nested_webpack_require_50932__(18),\n    baseRest = __nested_webpack_require_50932__(21),\n    customDefaultsMerge = __nested_webpack_require_50932__(70),\n    mergeWith = __nested_webpack_require_50932__(108);\n\n/**\n * This method is like `_.defaults` except that it recursively assigns\n * default properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaults\n * @example\n *\n * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n * // => { 'a': { 'b': 2, 'c': 3 } }\n */\nvar defaultsDeep = baseRest(function(args) {\n  args.push(undefined, customDefaultsMerge);\n  return apply(mergeWith, undefined, args);\n});\n\nmodule.exports = defaultsDeep;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_51858__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_defaultsDeep__ = __nested_webpack_require_51858__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_defaultsDeep___default = __nested_webpack_require_51858__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_defaultsDeep__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DefaultOptions__ = __nested_webpack_require_51858__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_DisplaySize__ = __nested_webpack_require_51858__(37);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_Toolbar__ = __nested_webpack_require_51858__(39);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_Resize__ = __nested_webpack_require_51858__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_vue_quill_editor__ = __nested_webpack_require_51858__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_vue_quill_editor___default = __nested_webpack_require_51858__.n(__WEBPACK_IMPORTED_MODULE_5_vue_quill_editor__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\n\n\n\n\nvar knownModules = { DisplaySize: __WEBPACK_IMPORTED_MODULE_2__modules_DisplaySize__[\"a\" /* DisplaySize */], Toolbar: __WEBPACK_IMPORTED_MODULE_3__modules_Toolbar__[\"a\" /* Toolbar */], Resize: __WEBPACK_IMPORTED_MODULE_4__modules_Resize__[\"a\" /* Resize */] };\n\nwindow.Quill = __WEBPACK_IMPORTED_MODULE_5_vue_quill_editor__[\"Quill\"];\n/**\n * Custom module for quilljs to allow user to resize <img> elements\n * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)\n * @see https://quilljs.com/blog/building-a-custom-module/\n */\n\nvar Index = function Index(quill) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Index);\n\n    this.initializeModules = function () {\n        _this.removeModules();\n\n        _this.modules = _this.moduleClasses.map(function (ModuleClass) {\n            return new (knownModules[ModuleClass] || ModuleClass)(_this);\n        });\n\n        _this.modules.forEach(function (module) {\n            module.onCreate();\n        });\n\n        _this.onUpdate();\n    };\n\n    this.onUpdate = function () {\n        _this.repositionElements();\n        _this.modules.forEach(function (module) {\n            module.onUpdate();\n        });\n    };\n\n    this.removeModules = function () {\n        _this.modules.forEach(function (module) {\n            module.onDestroy();\n        });\n\n        _this.modules = [];\n    };\n\n    this.handleClick = function (evt) {\n        if (evt.target && evt.target.tagName && evt.target.tagName.toUpperCase() === 'IMG') {\n            if (_this.img === evt.target) {\n                // we are already focused on this image\n                return;\n            }\n            if (_this.img) {\n                // we were just focused on another image\n                _this.hide();\n            }\n            // clicked on an image inside the editor\n            _this.show(evt.target);\n        } else if (_this.img) {\n            // clicked on a non image\n            _this.hide();\n        }\n    };\n\n    this.show = function (img) {\n        // keep track of this img element\n        _this.img = img;\n\n        _this.showOverlay();\n\n        _this.initializeModules();\n    };\n\n    this.showOverlay = function () {\n        if (_this.overlay) {\n            _this.hideOverlay();\n        }\n\n        _this.quill.setSelection(null);\n\n        // prevent spurious text selection\n        _this.setUserSelect('none');\n\n        // listen for the image being deleted or moved\n        document.addEventListener('keyup', _this.checkImage, true);\n        _this.quill.root.addEventListener('input', _this.checkImage, true);\n\n        // Create and add the overlay\n        _this.overlay = document.createElement('div');\n        Object.assign(_this.overlay.style, _this.options.overlayStyles);\n\n        _this.quill.root.parentNode.appendChild(_this.overlay);\n\n        _this.repositionElements();\n    };\n\n    this.hideOverlay = function () {\n        if (!_this.overlay) {\n            return;\n        }\n\n        // Remove the overlay\n        _this.quill.root.parentNode.removeChild(_this.overlay);\n        _this.overlay = undefined;\n\n        // stop listening for image deletion or movement\n        document.removeEventListener('keyup', _this.checkImage);\n        _this.quill.root.removeEventListener('input', _this.checkImage);\n\n        // reset user-select\n        _this.setUserSelect('');\n    };\n\n    this.repositionElements = function () {\n        if (!_this.overlay || !_this.img) {\n            return;\n        }\n\n        // position the overlay over the image\n        var parent = _this.quill.root.parentNode;\n        var imgRect = _this.img.getBoundingClientRect();\n        var containerRect = parent.getBoundingClientRect();\n\n        Object.assign(_this.overlay.style, {\n            left: imgRect.left - containerRect.left - 1 + parent.scrollLeft + 'px',\n            top: imgRect.top - containerRect.top + parent.scrollTop + 'px',\n            width: imgRect.width + 'px',\n            height: imgRect.height + 'px'\n        });\n    };\n\n    this.hide = function () {\n        _this.hideOverlay();\n        _this.removeModules();\n        _this.img = undefined;\n    };\n\n    this.setUserSelect = function (value) {\n        ['userSelect', 'mozUserSelect', 'webkitUserSelect', 'msUserSelect'].forEach(function (prop) {\n            // set on contenteditable element and <html>\n            _this.quill.root.style[prop] = value;\n            document.documentElement.style[prop] = value;\n        });\n    };\n\n    this.checkImage = function (evt) {\n        if (_this.img) {\n            if (evt.keyCode === 46 || evt.keyCode === 8) {\n                window.Quill.find(_this.img).deleteAt(0);\n            }\n            _this.hide();\n        }\n    };\n\n    // save the quill reference and options\n    this.quill = quill;\n\n    // Apply the options to our defaults, and stash them for later\n    // defaultsDeep doesn't do arrays as you'd expect, so we'll need to apply the classes array from options separately\n    var moduleClasses = false;\n    if (options.modules) {\n        moduleClasses = options.modules.slice();\n    }\n\n    // Apply options to default options\n    this.options = __WEBPACK_IMPORTED_MODULE_0_lodash_defaultsDeep___default()({}, options, __WEBPACK_IMPORTED_MODULE_1__DefaultOptions__[\"a\" /* default */]);\n\n    // (see above about moduleClasses)\n    if (moduleClasses !== false) {\n        this.options.modules = moduleClasses;\n    }\n\n    // disable native image resizing on firefox\n    document.execCommand('enableObjectResizing', false, 'false');\n\n    // respond to clicks inside the editor\n    this.quill.root.addEventListener('click', this.handleClick, false);\n\n    this.quill.root.parentNode.style.position = this.quill.root.parentNode.style.position || 'relative';\n\n    // setup modules\n    this.moduleClasses = this.options.modules;\n\n    this.modules = [];\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Index);\n\n\nif (window.Quill) {\n    window.Quill.register('modules/imageResize', Index);\n}\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __nested_webpack_require_63164__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __nested_webpack_require_63164__(42)\nvar ieee754 = __nested_webpack_require_63164__(44)\nvar isArray = __nested_webpack_require_63164__(45)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_63164__(35)))\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __nested_webpack_require_114292__) {\n\nvar hashClear = __nested_webpack_require_114292__(73),\n    hashDelete = __nested_webpack_require_114292__(74),\n    hashGet = __nested_webpack_require_114292__(75),\n    hashHas = __nested_webpack_require_114292__(76),\n    hashSet = __nested_webpack_require_114292__(77);\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __nested_webpack_require_115122__) {\n\nvar mapCacheClear = __nested_webpack_require_115122__(87),\n    mapCacheDelete = __nested_webpack_require_115122__(88),\n    mapCacheGet = __nested_webpack_require_115122__(89),\n    mapCacheHas = __nested_webpack_require_115122__(90),\n    mapCacheSet = __nested_webpack_require_115122__(91);\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __nested_webpack_require_116054__) {\n\nvar ListCache = __nested_webpack_require_116054__(3),\n    stackClear = __nested_webpack_require_116054__(99),\n    stackDelete = __nested_webpack_require_116054__(100),\n    stackGet = __nested_webpack_require_116054__(101),\n    stackHas = __nested_webpack_require_116054__(102),\n    stackSet = __nested_webpack_require_116054__(103);\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __nested_webpack_require_116869__) {\n\nvar root = __nested_webpack_require_116869__(1);\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __nested_webpack_require_117081__) {\n\nvar baseTimes = __nested_webpack_require_117081__(60),\n    isArguments = __nested_webpack_require_117081__(29),\n    isArray = __nested_webpack_require_117081__(30),\n    isBuffer = __nested_webpack_require_117081__(31),\n    isIndex = __nested_webpack_require_117081__(25),\n    isTypedArray = __nested_webpack_require_117081__(33);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __nested_webpack_require_118941__) {\n\nvar baseAssignValue = __nested_webpack_require_118941__(10),\n    eq = __nested_webpack_require_118941__(8);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __nested_webpack_require_119919__) {\n\nvar isObject = __nested_webpack_require_119919__(0);\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __nested_webpack_require_120684__) {\n\nvar createBaseFor = __nested_webpack_require_120684__(69);\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __nested_webpack_require_121351__) {\n\nvar baseGetTag = __nested_webpack_require_121351__(5),\n    isObjectLike = __nested_webpack_require_121351__(2);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __nested_webpack_require_121912__) {\n\nvar isFunction = __nested_webpack_require_121912__(13),\n    isMasked = __nested_webpack_require_121912__(81),\n    isObject = __nested_webpack_require_121912__(0),\n    toSource = __nested_webpack_require_121912__(104);\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __nested_webpack_require_123411__) {\n\nvar baseGetTag = __nested_webpack_require_123411__(5),\n    isLength = __nested_webpack_require_123411__(32),\n    isObjectLike = __nested_webpack_require_123411__(2);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __nested_webpack_require_125708__) {\n\nvar isObject = __nested_webpack_require_125708__(0),\n    isPrototype = __nested_webpack_require_125708__(26),\n    nativeKeysIn = __nested_webpack_require_125708__(92);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __nested_webpack_require_126652__) {\n\nvar assignMergeValue = __nested_webpack_require_126652__(19),\n    cloneBuffer = __nested_webpack_require_126652__(63),\n    cloneTypedArray = __nested_webpack_require_126652__(64),\n    copyArray = __nested_webpack_require_126652__(65),\n    initCloneObject = __nested_webpack_require_126652__(78),\n    isArguments = __nested_webpack_require_126652__(29),\n    isArray = __nested_webpack_require_126652__(30),\n    isArrayLikeObject = __nested_webpack_require_126652__(106),\n    isBuffer = __nested_webpack_require_126652__(31),\n    isFunction = __nested_webpack_require_126652__(13),\n    isObject = __nested_webpack_require_126652__(0),\n    isPlainObject = __nested_webpack_require_126652__(107),\n    isTypedArray = __nested_webpack_require_126652__(33),\n    safeGet = __nested_webpack_require_126652__(27),\n    toPlainObject = __nested_webpack_require_126652__(110);\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __nested_webpack_require_129773__) {\n\nvar constant = __nested_webpack_require_129773__(105),\n    defineProperty = __nested_webpack_require_129773__(22),\n    identity = __nested_webpack_require_129773__(28);\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __nested_webpack_require_131442__) {\n\nvar Uint8Array = __nested_webpack_require_131442__(49);\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __nested_webpack_require_131968__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var root = __nested_webpack_require_131968__(1);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_131968__(14)(module)))\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __nested_webpack_require_133229__) {\n\nvar cloneArrayBuffer = __nested_webpack_require_133229__(62);\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports) {\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __nested_webpack_require_134338__) {\n\nvar assignValue = __nested_webpack_require_134338__(51),\n    baseAssignValue = __nested_webpack_require_134338__(10);\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __nested_webpack_require_135452__) {\n\nvar root = __nested_webpack_require_135452__(1);\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __nested_webpack_require_135691__) {\n\nvar baseRest = __nested_webpack_require_135691__(21),\n    isIterateeCall = __nested_webpack_require_135691__(79);\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports) {\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __nested_webpack_require_137512__) {\n\nvar baseMerge = __nested_webpack_require_137512__(20),\n    isObject = __nested_webpack_require_137512__(0);\n\n/**\n * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n * objects into destination objects that are passed thru.\n *\n * @private\n * @param {*} objValue The destination value.\n * @param {*} srcValue The source value.\n * @param {string} key The key of the property to merge.\n * @param {Object} object The parent object of `objValue`.\n * @param {Object} source The parent object of `srcValue`.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n * @returns {*} Returns the value to assign.\n */\nfunction customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n  if (isObject(objValue) && isObject(srcValue)) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, objValue);\n    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n    stack['delete'](srcValue);\n  }\n  return objValue;\n}\n\nmodule.exports = customDefaultsMerge;\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __nested_webpack_require_138640__) {\n\nvar Symbol = __nested_webpack_require_138640__(17);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports) {\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __nested_webpack_require_140242__) {\n\nvar nativeCreate = __nested_webpack_require_140242__(7);\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports) {\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __nested_webpack_require_141099__) {\n\nvar nativeCreate = __nested_webpack_require_141099__(7);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __nested_webpack_require_141945__) {\n\nvar nativeCreate = __nested_webpack_require_141945__(7);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __nested_webpack_require_142645__) {\n\nvar nativeCreate = __nested_webpack_require_142645__(7);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __nested_webpack_require_143317__) {\n\nvar baseCreate = __nested_webpack_require_143317__(52),\n    getPrototype = __nested_webpack_require_143317__(24),\n    isPrototype = __nested_webpack_require_143317__(26);\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __nested_webpack_require_143875__) {\n\nvar eq = __nested_webpack_require_143875__(8),\n    isArrayLike = __nested_webpack_require_143875__(12),\n    isIndex = __nested_webpack_require_143875__(25),\n    isObject = __nested_webpack_require_143875__(0);\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __nested_webpack_require_145326__) {\n\nvar coreJsData = __nested_webpack_require_145326__(67);\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports) {\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __nested_webpack_require_146242__) {\n\nvar assocIndexOf = __nested_webpack_require_146242__(4);\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __nested_webpack_require_147091__) {\n\nvar assocIndexOf = __nested_webpack_require_147091__(4);\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __nested_webpack_require_147585__) {\n\nvar assocIndexOf = __nested_webpack_require_147585__(4);\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __nested_webpack_require_148062__) {\n\nvar assocIndexOf = __nested_webpack_require_148062__(4);\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __nested_webpack_require_148689__) {\n\nvar Hash = __nested_webpack_require_148689__(46),\n    ListCache = __nested_webpack_require_148689__(3),\n    Map = __nested_webpack_require_148689__(16);\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __nested_webpack_require_149170__) {\n\nvar getMapData = __nested_webpack_require_149170__(6);\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __nested_webpack_require_149696__) {\n\nvar getMapData = __nested_webpack_require_149696__(6);\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __nested_webpack_require_150102__) {\n\nvar getMapData = __nested_webpack_require_150102__(6);\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __nested_webpack_require_150560__) {\n\nvar getMapData = __nested_webpack_require_150560__(6);\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports) {\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __nested_webpack_require_151672__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __nested_webpack_require_151672__(23);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_151672__(14)(module)))\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports) {\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __nested_webpack_require_153928__) {\n\nvar apply = __nested_webpack_require_153928__(18);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __nested_webpack_require_155106__) {\n\nvar baseSetToString = __nested_webpack_require_155106__(59),\n    shortOut = __nested_webpack_require_155106__(98);\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports) {\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __nested_webpack_require_156569__) {\n\nvar ListCache = __nested_webpack_require_156569__(3);\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports) {\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports) {\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __nested_webpack_require_158074__) {\n\nvar ListCache = __nested_webpack_require_158074__(3),\n    Map = __nested_webpack_require_158074__(16),\n    MapCache = __nested_webpack_require_158074__(47);\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports) {\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __nested_webpack_require_160212__) {\n\nvar isArrayLike = __nested_webpack_require_160212__(12),\n    isObjectLike = __nested_webpack_require_160212__(2);\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __nested_webpack_require_161029__) {\n\nvar baseGetTag = __nested_webpack_require_161029__(5),\n    getPrototype = __nested_webpack_require_161029__(24),\n    isObjectLike = __nested_webpack_require_161029__(2);\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __nested_webpack_require_162750__) {\n\nvar baseMerge = __nested_webpack_require_162750__(20),\n    createAssigner = __nested_webpack_require_162750__(68);\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\n\nmodule.exports = mergeWith;\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports) {\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __nested_webpack_require_164409__) {\n\nvar copyObject = __nested_webpack_require_164409__(66),\n    keysIn = __nested_webpack_require_164409__(34);\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __nested_webpack_require_165235__) {\n\n/* WEBPACK VAR INJECTION */(function(Buffer) {/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_165949__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_165949__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_165949__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_165949__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_165949__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_165949__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_165949__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_165949__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_165949__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_165949__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_165949__(__nested_webpack_require_165949__.s = 109);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __nested_webpack_require_168228__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar container_1 = __nested_webpack_require_168228__(17);\nvar format_1 = __nested_webpack_require_168228__(18);\nvar leaf_1 = __nested_webpack_require_168228__(19);\nvar scroll_1 = __nested_webpack_require_168228__(45);\nvar inline_1 = __nested_webpack_require_168228__(46);\nvar block_1 = __nested_webpack_require_168228__(47);\nvar embed_1 = __nested_webpack_require_168228__(48);\nvar text_1 = __nested_webpack_require_168228__(49);\nvar attributor_1 = __nested_webpack_require_168228__(12);\nvar class_1 = __nested_webpack_require_168228__(32);\nvar style_1 = __nested_webpack_require_168228__(33);\nvar store_1 = __nested_webpack_require_168228__(31);\nvar Registry = __nested_webpack_require_168228__(1);\nvar Parchment = {\n    Scope: Registry.Scope,\n    create: Registry.create,\n    find: Registry.find,\n    query: Registry.query,\n    register: Registry.register,\n    Container: container_1.default,\n    Format: format_1.default,\n    Leaf: leaf_1.default,\n    Embed: embed_1.default,\n    Scroll: scroll_1.default,\n    Block: block_1.default,\n    Inline: inline_1.default,\n    Text: text_1.default,\n    Attributor: {\n        Attribute: attributor_1.default,\n        Class: class_1.default,\n        Style: style_1.default,\n        Store: store_1.default,\n    },\n};\nexports.default = Parchment;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParchmentError = /** @class */ (function (_super) {\n    __extends(ParchmentError, _super);\n    function ParchmentError(message) {\n        var _this = this;\n        message = '[Parchment] ' + message;\n        _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.name = _this.constructor.name;\n        return _this;\n    }\n    return ParchmentError;\n}(Error));\nexports.ParchmentError = ParchmentError;\nvar attributes = {};\nvar classes = {};\nvar tags = {};\nvar types = {};\nexports.DATA_KEY = '__blot';\nvar Scope;\n(function (Scope) {\n    Scope[Scope[\"TYPE\"] = 3] = \"TYPE\";\n    Scope[Scope[\"LEVEL\"] = 12] = \"LEVEL\";\n    Scope[Scope[\"ATTRIBUTE\"] = 13] = \"ATTRIBUTE\";\n    Scope[Scope[\"BLOT\"] = 14] = \"BLOT\";\n    Scope[Scope[\"INLINE\"] = 7] = \"INLINE\";\n    Scope[Scope[\"BLOCK\"] = 11] = \"BLOCK\";\n    Scope[Scope[\"BLOCK_BLOT\"] = 10] = \"BLOCK_BLOT\";\n    Scope[Scope[\"INLINE_BLOT\"] = 6] = \"INLINE_BLOT\";\n    Scope[Scope[\"BLOCK_ATTRIBUTE\"] = 9] = \"BLOCK_ATTRIBUTE\";\n    Scope[Scope[\"INLINE_ATTRIBUTE\"] = 5] = \"INLINE_ATTRIBUTE\";\n    Scope[Scope[\"ANY\"] = 15] = \"ANY\";\n})(Scope = exports.Scope || (exports.Scope = {}));\nfunction create(input, value) {\n    var match = query(input);\n    if (match == null) {\n        throw new ParchmentError(\"Unable to create \" + input + \" blot\");\n    }\n    var BlotClass = match;\n    var node = \n    // @ts-ignore\n    input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);\n    return new BlotClass(node, value);\n}\nexports.create = create;\nfunction find(node, bubble) {\n    if (bubble === void 0) { bubble = false; }\n    if (node == null)\n        return null;\n    // @ts-ignore\n    if (node[exports.DATA_KEY] != null)\n        return node[exports.DATA_KEY].blot;\n    if (bubble)\n        return find(node.parentNode, bubble);\n    return null;\n}\nexports.find = find;\nfunction query(query, scope) {\n    if (scope === void 0) { scope = Scope.ANY; }\n    var match;\n    if (typeof query === 'string') {\n        match = types[query] || attributes[query];\n        // @ts-ignore\n    }\n    else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {\n        match = types['text'];\n    }\n    else if (typeof query === 'number') {\n        if (query & Scope.LEVEL & Scope.BLOCK) {\n            match = types['block'];\n        }\n        else if (query & Scope.LEVEL & Scope.INLINE) {\n            match = types['inline'];\n        }\n    }\n    else if (query instanceof HTMLElement) {\n        var names = (query.getAttribute('class') || '').split(/\\s+/);\n        for (var i in names) {\n            match = classes[names[i]];\n            if (match)\n                break;\n        }\n        match = match || tags[query.tagName];\n    }\n    if (match == null)\n        return null;\n    // @ts-ignore\n    if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)\n        return match;\n    return null;\n}\nexports.query = query;\nfunction register() {\n    var Definitions = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        Definitions[_i] = arguments[_i];\n    }\n    if (Definitions.length > 1) {\n        return Definitions.map(function (d) {\n            return register(d);\n        });\n    }\n    var Definition = Definitions[0];\n    if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {\n        throw new ParchmentError('Invalid definition');\n    }\n    else if (Definition.blotName === 'abstract') {\n        throw new ParchmentError('Cannot register abstract class');\n    }\n    types[Definition.blotName || Definition.attrName] = Definition;\n    if (typeof Definition.keyName === 'string') {\n        attributes[Definition.keyName] = Definition;\n    }\n    else {\n        if (Definition.className != null) {\n            classes[Definition.className] = Definition;\n        }\n        if (Definition.tagName != null) {\n            if (Array.isArray(Definition.tagName)) {\n                Definition.tagName = Definition.tagName.map(function (tagName) {\n                    return tagName.toUpperCase();\n                });\n            }\n            else {\n                Definition.tagName = Definition.tagName.toUpperCase();\n            }\n            var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];\n            tagNames.forEach(function (tag) {\n                if (tags[tag] == null || Definition.className == null) {\n                    tags[tag] = Definition;\n                }\n            });\n        }\n    }\n    return Definition;\n}\nexports.register = register;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __nested_webpack_require_174697__) {\n\nvar diff = __nested_webpack_require_174697__(51);\nvar equal = __nested_webpack_require_174697__(11);\nvar extend = __nested_webpack_require_174697__(3);\nvar op = __nested_webpack_require_174697__(20);\n\n\nvar NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()\n\n\nvar Delta = function (ops) {\n  // Assume we are given a well formed ops\n  if (Array.isArray(ops)) {\n    this.ops = ops;\n  } else if (ops != null && Array.isArray(ops.ops)) {\n    this.ops = ops.ops;\n  } else {\n    this.ops = [];\n  }\n};\n\n\nDelta.prototype.insert = function (text, attributes) {\n  var newOp = {};\n  if (text.length === 0) return this;\n  newOp.insert = text;\n  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n    newOp.attributes = attributes;\n  }\n  return this.push(newOp);\n};\n\nDelta.prototype['delete'] = function (length) {\n  if (length <= 0) return this;\n  return this.push({ 'delete': length });\n};\n\nDelta.prototype.retain = function (length, attributes) {\n  if (length <= 0) return this;\n  var newOp = { retain: length };\n  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n    newOp.attributes = attributes;\n  }\n  return this.push(newOp);\n};\n\nDelta.prototype.push = function (newOp) {\n  var index = this.ops.length;\n  var lastOp = this.ops[index - 1];\n  newOp = extend(true, {}, newOp);\n  if (typeof lastOp === 'object') {\n    if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {\n      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };\n      return this;\n    }\n    // Since it does not matter if we insert before or after deleting at the same index,\n    // always prefer to insert first\n    if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {\n      index -= 1;\n      lastOp = this.ops[index - 1];\n      if (typeof lastOp !== 'object') {\n        this.ops.unshift(newOp);\n        return this;\n      }\n    }\n    if (equal(newOp.attributes, lastOp.attributes)) {\n      if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {\n        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes\n        return this;\n      } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {\n        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes\n        return this;\n      }\n    }\n  }\n  if (index === this.ops.length) {\n    this.ops.push(newOp);\n  } else {\n    this.ops.splice(index, 0, newOp);\n  }\n  return this;\n};\n\nDelta.prototype.chop = function () {\n  var lastOp = this.ops[this.ops.length - 1];\n  if (lastOp && lastOp.retain && !lastOp.attributes) {\n    this.ops.pop();\n  }\n  return this;\n};\n\nDelta.prototype.filter = function (predicate) {\n  return this.ops.filter(predicate);\n};\n\nDelta.prototype.forEach = function (predicate) {\n  this.ops.forEach(predicate);\n};\n\nDelta.prototype.map = function (predicate) {\n  return this.ops.map(predicate);\n};\n\nDelta.prototype.partition = function (predicate) {\n  var passed = [], failed = [];\n  this.forEach(function(op) {\n    var target = predicate(op) ? passed : failed;\n    target.push(op);\n  });\n  return [passed, failed];\n};\n\nDelta.prototype.reduce = function (predicate, initial) {\n  return this.ops.reduce(predicate, initial);\n};\n\nDelta.prototype.changeLength = function () {\n  return this.reduce(function (length, elem) {\n    if (elem.insert) {\n      return length + op.length(elem);\n    } else if (elem.delete) {\n      return length - elem.delete;\n    }\n    return length;\n  }, 0);\n};\n\nDelta.prototype.length = function () {\n  return this.reduce(function (length, elem) {\n    return length + op.length(elem);\n  }, 0);\n};\n\nDelta.prototype.slice = function (start, end) {\n  start = start || 0;\n  if (typeof end !== 'number') end = Infinity;\n  var ops = [];\n  var iter = op.iterator(this.ops);\n  var index = 0;\n  while (index < end && iter.hasNext()) {\n    var nextOp;\n    if (index < start) {\n      nextOp = iter.next(start - index);\n    } else {\n      nextOp = iter.next(end - index);\n      ops.push(nextOp);\n    }\n    index += op.length(nextOp);\n  }\n  return new Delta(ops);\n};\n\n\nDelta.prototype.compose = function (other) {\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var ops = [];\n  var firstOther = otherIter.peek();\n  if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {\n    var firstLeft = firstOther.retain;\n    while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {\n      firstLeft -= thisIter.peekLength();\n      ops.push(thisIter.next());\n    }\n    if (firstOther.retain - firstLeft > 0) {\n      otherIter.next(firstOther.retain - firstLeft);\n    }\n  }\n  var delta = new Delta(ops);\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (otherIter.peekType() === 'insert') {\n      delta.push(otherIter.next());\n    } else if (thisIter.peekType() === 'delete') {\n      delta.push(thisIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (typeof otherOp.retain === 'number') {\n        var newOp = {};\n        if (typeof thisOp.retain === 'number') {\n          newOp.retain = length;\n        } else {\n          newOp.insert = thisOp.insert;\n        }\n        // Preserve null when composing with a retain, otherwise remove it for inserts\n        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');\n        if (attributes) newOp.attributes = attributes;\n        delta.push(newOp);\n\n        // Optimization if rest of other is just retain\n        if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {\n          var rest = new Delta(thisIter.rest());\n          return delta.concat(rest).chop();\n        }\n\n      // Other op should be delete, we could be an insert or retain\n      // Insert + delete cancels out\n      } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {\n        delta.push(otherOp);\n      }\n    }\n  }\n  return delta.chop();\n};\n\nDelta.prototype.concat = function (other) {\n  var delta = new Delta(this.ops.slice());\n  if (other.ops.length > 0) {\n    delta.push(other.ops[0]);\n    delta.ops = delta.ops.concat(other.ops.slice(1));\n  }\n  return delta;\n};\n\nDelta.prototype.diff = function (other, index) {\n  if (this.ops === other.ops) {\n    return new Delta();\n  }\n  var strings = [this, other].map(function (delta) {\n    return delta.map(function (op) {\n      if (op.insert != null) {\n        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n      }\n      var prep = (delta === other) ? 'on' : 'with';\n      throw new Error('diff() called ' + prep + ' non-document');\n    }).join('');\n  });\n  var delta = new Delta();\n  var diffResult = diff(strings[0], strings[1], index);\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  diffResult.forEach(function (component) {\n    var length = component[1].length;\n    while (length > 0) {\n      var opLength = 0;\n      switch (component[0]) {\n        case diff.INSERT:\n          opLength = Math.min(otherIter.peekLength(), length);\n          delta.push(otherIter.next(opLength));\n          break;\n        case diff.DELETE:\n          opLength = Math.min(length, thisIter.peekLength());\n          thisIter.next(opLength);\n          delta['delete'](opLength);\n          break;\n        case diff.EQUAL:\n          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n          var thisOp = thisIter.next(opLength);\n          var otherOp = otherIter.next(opLength);\n          if (equal(thisOp.insert, otherOp.insert)) {\n            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));\n          } else {\n            delta.push(otherOp)['delete'](opLength);\n          }\n          break;\n      }\n      length -= opLength;\n    }\n  });\n  return delta.chop();\n};\n\nDelta.prototype.eachLine = function (predicate, newline) {\n  newline = newline || '\\n';\n  var iter = op.iterator(this.ops);\n  var line = new Delta();\n  var i = 0;\n  while (iter.hasNext()) {\n    if (iter.peekType() !== 'insert') return;\n    var thisOp = iter.peek();\n    var start = op.length(thisOp) - iter.peekLength();\n    var index = typeof thisOp.insert === 'string' ?\n      thisOp.insert.indexOf(newline, start) - start : -1;\n    if (index < 0) {\n      line.push(iter.next());\n    } else if (index > 0) {\n      line.push(iter.next(index));\n    } else {\n      if (predicate(line, iter.next(1).attributes || {}, i) === false) {\n        return;\n      }\n      i += 1;\n      line = new Delta();\n    }\n  }\n  if (line.length() > 0) {\n    predicate(line, {}, i);\n  }\n};\n\nDelta.prototype.transform = function (other, priority) {\n  priority = !!priority;\n  if (typeof other === 'number') {\n    return this.transformPosition(other, priority);\n  }\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n      delta.retain(op.length(thisIter.next()));\n    } else if (otherIter.peekType() === 'insert') {\n      delta.push(otherIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (thisOp['delete']) {\n        // Our delete either makes their delete redundant or removes their retain\n        continue;\n      } else if (otherOp['delete']) {\n        delta.push(otherOp);\n      } else {\n        // We retain either their retain or insert\n        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));\n      }\n    }\n  }\n  return delta.chop();\n};\n\nDelta.prototype.transformPosition = function (index, priority) {\n  priority = !!priority;\n  var thisIter = op.iterator(this.ops);\n  var offset = 0;\n  while (thisIter.hasNext() && offset <= index) {\n    var length = thisIter.peekLength();\n    var nextType = thisIter.peekType();\n    thisIter.next();\n    if (nextType === 'delete') {\n      index -= Math.min(length, index - offset);\n      continue;\n    } else if (nextType === 'insert' && (offset < index || !priority)) {\n      index += length;\n    }\n    offset += length;\n  }\n  return index;\n};\n\n\nmodule.exports = Delta;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __nested_webpack_require_188868__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _extend = __nested_webpack_require_188868__(3);\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _quillDelta = __nested_webpack_require_188868__(2);\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __nested_webpack_require_188868__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _break = __nested_webpack_require_188868__(16);\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _inline = __nested_webpack_require_188868__(6);\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nvar _text = __nested_webpack_require_188868__(7);\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar NEWLINE_LENGTH = 1;\n\nvar BlockEmbed = function (_Parchment$Embed) {\n  _inherits(BlockEmbed, _Parchment$Embed);\n\n  function BlockEmbed() {\n    _classCallCheck(this, BlockEmbed);\n\n    return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));\n  }\n\n  _createClass(BlockEmbed, [{\n    key: 'attach',\n    value: function attach() {\n      _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);\n      this.attributes = new _parchment2.default.Attributor.Store(this.domNode);\n    }\n  }, {\n    key: 'delta',\n    value: function delta() {\n      return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));\n    }\n  }, {\n    key: 'format',\n    value: function format(name, value) {\n      var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);\n      if (attribute != null) {\n        this.attributes.attribute(attribute, value);\n      }\n    }\n  }, {\n    key: 'formatAt',\n    value: function formatAt(index, length, name, value) {\n      this.format(name, value);\n    }\n  }, {\n    key: 'insertAt',\n    value: function insertAt(index, value, def) {\n      if (typeof value === 'string' && value.endsWith('\\n')) {\n        var block = _parchment2.default.create(Block.blotName);\n        this.parent.insertBefore(block, index === 0 ? this : this.next);\n        block.insertAt(0, value.slice(0, -1));\n      } else {\n        _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);\n      }\n    }\n  }]);\n\n  return BlockEmbed;\n}(_parchment2.default.Embed);\n\nBlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;\n// It is important for cursor behavior BlockEmbeds use tags that are block level elements\n\n\nvar Block = function (_Parchment$Block) {\n  _inherits(Block, _Parchment$Block);\n\n  function Block(domNode) {\n    _classCallCheck(this, Block);\n\n    var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));\n\n    _this2.cache = {};\n    return _this2;\n  }\n\n  _createClass(Block, [{\n    key: 'delta',\n    value: function delta() {\n      if (this.cache.delta == null) {\n        this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {\n          if (leaf.length() === 0) {\n            return delta;\n          } else {\n            return delta.insert(leaf.value(), bubbleFormats(leaf));\n          }\n        }, new _quillDelta2.default()).insert('\\n', bubbleFormats(this));\n      }\n      return this.cache.delta;\n    }\n  }, {\n    key: 'deleteAt',\n    value: function deleteAt(index, length) {\n      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);\n      this.cache = {};\n    }\n  }, {\n    key: 'formatAt',\n    value: function formatAt(index, length, name, value) {\n      if (length <= 0) return;\n      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {\n        if (index + length === this.length()) {\n          this.format(name, value);\n        }\n      } else {\n        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);\n      }\n      this.cache = {};\n    }\n  }, {\n    key: 'insertAt',\n    value: function insertAt(index, value, def) {\n      if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);\n      if (value.length === 0) return;\n      var lines = value.split('\\n');\n      var text = lines.shift();\n      if (text.length > 0) {\n        if (index < this.length() - 1 || this.children.tail == null) {\n          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);\n        } else {\n          this.children.tail.insertAt(this.children.tail.length(), text);\n        }\n        this.cache = {};\n      }\n      var block = this;\n      lines.reduce(function (index, line) {\n        block = block.split(index, true);\n        block.insertAt(0, line);\n        return line.length;\n      }, index + text.length);\n    }\n  }, {\n    key: 'insertBefore',\n    value: function insertBefore(blot, ref) {\n      var head = this.children.head;\n      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);\n      if (head instanceof _break2.default) {\n        head.remove();\n      }\n      this.cache = {};\n    }\n  }, {\n    key: 'length',\n    value: function length() {\n      if (this.cache.length == null) {\n        this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;\n      }\n      return this.cache.length;\n    }\n  }, {\n    key: 'moveChildren',\n    value: function moveChildren(target, ref) {\n      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);\n      this.cache = {};\n    }\n  }, {\n    key: 'optimize',\n    value: function optimize(context) {\n      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);\n      this.cache = {};\n    }\n  }, {\n    key: 'path',\n    value: function path(index) {\n      return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);\n    }\n  }, {\n    key: 'removeChild',\n    value: function removeChild(child) {\n      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);\n      this.cache = {};\n    }\n  }, {\n    key: 'split',\n    value: function split(index) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n        var clone = this.clone();\n        if (index === 0) {\n          this.parent.insertBefore(clone, this);\n          return this;\n        } else {\n          this.parent.insertBefore(clone, this.next);\n          return clone;\n        }\n      } else {\n        var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);\n        this.cache = {};\n        return next;\n      }\n    }\n  }]);\n\n  return Block;\n}(_parchment2.default.Block);\n\nBlock.blotName = 'block';\nBlock.tagName = 'P';\nBlock.defaultChild = 'break';\nBlock.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];\n\nfunction bubbleFormats(blot) {\n  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (blot == null) return formats;\n  if (typeof blot.formats === 'function') {\n    formats = (0, _extend2.default)(formats, blot.formats());\n  }\n  if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {\n    return formats;\n  }\n  return bubbleFormats(blot.parent, formats);\n}\n\nexports.bubbleFormats = bubbleFormats;\nexports.BlockEmbed = BlockEmbed;\nexports.default = Block;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __nested_webpack_require_199012__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.overload = exports.expandConfig = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__nested_webpack_require_199012__(50);\n\nvar _quillDelta = __nested_webpack_require_199012__(2);\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _editor = __nested_webpack_require_199012__(14);\n\nvar _editor2 = _interopRequireDefault(_editor);\n\nvar _emitter3 = __nested_webpack_require_199012__(8);\n\nvar _emitter4 = _interopRequireDefault(_emitter3);\n\nvar _module = __nested_webpack_require_199012__(9);\n\nvar _module2 = _interopRequireDefault(_module);\n\nvar _parchment = __nested_webpack_require_199012__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _selection = __nested_webpack_require_199012__(15);\n\nvar _selection2 = _interopRequireDefault(_selection);\n\nvar _extend = __nested_webpack_require_199012__(3);\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _logger = __nested_webpack_require_199012__(10);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _theme = __nested_webpack_require_199012__(34);\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = (0, _logger2.default)('quill');\n\nvar Quill = function () {\n  _createClass(Quill, null, [{\n    key: 'debug',\n    value: function debug(limit) {\n      if (limit === true) {\n        limit = 'log';\n      }\n      _logger2.default.level(limit);\n    }\n  }, {\n    key: 'find',\n    value: function find(node) {\n      return node.__quill || _parchment2.default.find(node);\n    }\n  }, {\n    key: 'import',\n    value: function _import(name) {\n      if (this.imports[name] == null) {\n        debug.error('Cannot import ' + name + '. Are you sure it was registered?');\n      }\n      return this.imports[name];\n    }\n  }, {\n    key: 'register',\n    value: function register(path, target) {\n      var _this = this;\n\n      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (typeof path !== 'string') {\n        var name = path.attrName || path.blotName;\n        if (typeof name === 'string') {\n          // register(Blot | Attributor, overwrite)\n          this.register('formats/' + name, path, target);\n        } else {\n          Object.keys(path).forEach(function (key) {\n            _this.register(key, path[key], target);\n          });\n        }\n      } else {\n        if (this.imports[path] != null && !overwrite) {\n          debug.warn('Overwriting ' + path + ' with', target);\n        }\n        this.imports[path] = target;\n        if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {\n          _parchment2.default.register(target);\n        } else if (path.startsWith('modules') && typeof target.register === 'function') {\n          target.register();\n        }\n      }\n    }\n  }]);\n\n  function Quill(container) {\n    var _this2 = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Quill);\n\n    this.options = expandConfig(container, options);\n    this.container = this.options.container;\n    if (this.container == null) {\n      return debug.error('Invalid Quill container', container);\n    }\n    if (this.options.debug) {\n      Quill.debug(this.options.debug);\n    }\n    var html = this.container.innerHTML.trim();\n    this.container.classList.add('ql-container');\n    this.container.innerHTML = '';\n    this.container.__quill = this;\n    this.root = this.addContainer('ql-editor');\n    this.root.classList.add('ql-blank');\n    this.root.setAttribute('data-gramm', false);\n    this.scrollingContainer = this.options.scrollingContainer || this.root;\n    this.emitter = new _emitter4.default();\n    this.scroll = _parchment2.default.create(this.root, {\n      emitter: this.emitter,\n      whitelist: this.options.formats\n    });\n    this.editor = new _editor2.default(this.scroll);\n    this.selection = new _selection2.default(this.scroll, this.emitter);\n    this.theme = new this.options.theme(this, this.options);\n    this.keyboard = this.theme.addModule('keyboard');\n    this.clipboard = this.theme.addModule('clipboard');\n    this.history = this.theme.addModule('history');\n    this.theme.init();\n    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {\n      if (type === _emitter4.default.events.TEXT_CHANGE) {\n        _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());\n      }\n    });\n    this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {\n      var range = _this2.selection.lastRange;\n      var index = range && range.length === 0 ? range.index : undefined;\n      modify.call(_this2, function () {\n        return _this2.editor.update(null, mutations, index);\n      }, source);\n    });\n    var contents = this.clipboard.convert('<div class=\\'ql-editor\\' style=\"white-space: normal;\">' + html + '<p><br></p></div>');\n    this.setContents(contents);\n    this.history.clear();\n    if (this.options.placeholder) {\n      this.root.setAttribute('data-placeholder', this.options.placeholder);\n    }\n    if (this.options.readOnly) {\n      this.disable();\n    }\n  }\n\n  _createClass(Quill, [{\n    key: 'addContainer',\n    value: function addContainer(container) {\n      var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (typeof container === 'string') {\n        var className = container;\n        container = document.createElement('div');\n        container.classList.add(className);\n      }\n      this.container.insertBefore(container, refNode);\n      return container;\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.selection.setRange(null);\n    }\n  }, {\n    key: 'deleteText',\n    value: function deleteText(index, length, source) {\n      var _this3 = this;\n\n      var _overload = overload(index, length, source);\n\n      var _overload2 = _slicedToArray(_overload, 4);\n\n      index = _overload2[0];\n      length = _overload2[1];\n      source = _overload2[3];\n\n      return modify.call(this, function () {\n        return _this3.editor.deleteText(index, length);\n      }, source, index, -1 * length);\n    }\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this.enable(false);\n    }\n  }, {\n    key: 'enable',\n    value: function enable() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      this.scroll.enable(enabled);\n      this.container.classList.toggle('ql-disabled', !enabled);\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      var scrollTop = this.scrollingContainer.scrollTop;\n      this.selection.focus();\n      this.scrollingContainer.scrollTop = scrollTop;\n      this.scrollIntoView();\n    }\n  }, {\n    key: 'format',\n    value: function format(name, value) {\n      var _this4 = this;\n\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;\n\n      return modify.call(this, function () {\n        var range = _this4.getSelection(true);\n        var change = new _quillDelta2.default();\n        if (range == null) {\n          return change;\n        } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {\n          change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));\n        } else if (range.length === 0) {\n          _this4.selection.format(name, value);\n          return change;\n        } else {\n          change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));\n        }\n        _this4.setSelection(range, _emitter4.default.sources.SILENT);\n        return change;\n      }, source);\n    }\n  }, {\n    key: 'formatLine',\n    value: function formatLine(index, length, name, value, source) {\n      var _this5 = this;\n\n      var formats = void 0;\n\n      var _overload3 = overload(index, length, name, value, source);\n\n      var _overload4 = _slicedToArray(_overload3, 4);\n\n      index = _overload4[0];\n      length = _overload4[1];\n      formats = _overload4[2];\n      source = _overload4[3];\n\n      return modify.call(this, function () {\n        return _this5.editor.formatLine(index, length, formats);\n      }, source, index, 0);\n    }\n  }, {\n    key: 'formatText',\n    value: function formatText(index, length, name, value, source) {\n      var _this6 = this;\n\n      var formats = void 0;\n\n      var _overload5 = overload(index, length, name, value, source);\n\n      var _overload6 = _slicedToArray(_overload5, 4);\n\n      index = _overload6[0];\n      length = _overload6[1];\n      formats = _overload6[2];\n      source = _overload6[3];\n\n      return modify.call(this, function () {\n        return _this6.editor.formatText(index, length, formats);\n      }, source, index, 0);\n    }\n  }, {\n    key: 'getBounds',\n    value: function getBounds(index) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var bounds = void 0;\n      if (typeof index === 'number') {\n        bounds = this.selection.getBounds(index, length);\n      } else {\n        bounds = this.selection.getBounds(index.index, index.length);\n      }\n      var containerBounds = this.container.getBoundingClientRect();\n      return {\n        bottom: bounds.bottom - containerBounds.top,\n        height: bounds.height,\n        left: bounds.left - containerBounds.left,\n        right: bounds.right - containerBounds.left,\n        top: bounds.top - containerBounds.top,\n        width: bounds.width\n      };\n    }\n  }, {\n    key: 'getContents',\n    value: function getContents() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n      var _overload7 = overload(index, length);\n\n      var _overload8 = _slicedToArray(_overload7, 2);\n\n      index = _overload8[0];\n      length = _overload8[1];\n\n      return this.editor.getContents(index, length);\n    }\n  }, {\n    key: 'getFormat',\n    value: function getFormat() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (typeof index === 'number') {\n        return this.editor.getFormat(index, length);\n      } else {\n        return this.editor.getFormat(index.index, index.length);\n      }\n    }\n  }, {\n    key: 'getIndex',\n    value: function getIndex(blot) {\n      return blot.offset(this.scroll);\n    }\n  }, {\n    key: 'getLength',\n    value: function getLength() {\n      return this.scroll.length();\n    }\n  }, {\n    key: 'getLeaf',\n    value: function getLeaf(index) {\n      return this.scroll.leaf(index);\n    }\n  }, {\n    key: 'getLine',\n    value: function getLine(index) {\n      return this.scroll.line(index);\n    }\n  }, {\n    key: 'getLines',\n    value: function getLines() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n\n      if (typeof index !== 'number') {\n        return this.scroll.lines(index.index, index.length);\n      } else {\n        return this.scroll.lines(index, length);\n      }\n    }\n  }, {\n    key: 'getModule',\n    value: function getModule(name) {\n      return this.theme.modules[name];\n    }\n  }, {\n    key: 'getSelection',\n    value: function getSelection() {\n      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (focus) this.focus();\n      this.update(); // Make sure we access getRange with editor in consistent state\n      return this.selection.getRange()[0];\n    }\n  }, {\n    key: 'getText',\n    value: function getText() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n      var _overload9 = overload(index, length);\n\n      var _overload10 = _slicedToArray(_overload9, 2);\n\n      index = _overload10[0];\n      length = _overload10[1];\n\n      return this.editor.getText(index, length);\n    }\n  }, {\n    key: 'hasFocus',\n    value: function hasFocus() {\n      return this.selection.hasFocus();\n    }\n  }, {\n    key: 'insertEmbed',\n    value: function insertEmbed(index, embed, value) {\n      var _this7 = this;\n\n      var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;\n\n      return modify.call(this, function () {\n        return _this7.editor.insertEmbed(index, embed, value);\n      }, source, index);\n    }\n  }, {\n    key: 'insertText',\n    value: function insertText(index, text, name, value, source) {\n      var _this8 = this;\n\n      var formats = void 0;\n\n      var _overload11 = overload(index, 0, name, value, source);\n\n      var _overload12 = _slicedToArray(_overload11, 4);\n\n      index = _overload12[0];\n      formats = _overload12[2];\n      source = _overload12[3];\n\n      return modify.call(this, function () {\n        return _this8.editor.insertText(index, text, formats);\n      }, source, index, text.length);\n    }\n  }, {\n    key: 'isEnabled',\n    value: function isEnabled() {\n      return !this.container.classList.contains('ql-disabled');\n    }\n  }, {\n    key: 'off',\n    value: function off() {\n      return this.emitter.off.apply(this.emitter, arguments);\n    }\n  }, {\n    key: 'on',\n    value: function on() {\n      return this.emitter.on.apply(this.emitter, arguments);\n    }\n  }, {\n    key: 'once',\n    value: function once() {\n      return this.emitter.once.apply(this.emitter, arguments);\n    }\n  }, {\n    key: 'pasteHTML',\n    value: function pasteHTML(index, html, source) {\n      this.clipboard.dangerouslyPasteHTML(index, html, source);\n    }\n  }, {\n    key: 'removeFormat',\n    value: function removeFormat(index, length, source) {\n      var _this9 = this;\n\n      var _overload13 = overload(index, length, source);\n\n      var _overload14 = _slicedToArray(_overload13, 4);\n\n      index = _overload14[0];\n      length = _overload14[1];\n      source = _overload14[3];\n\n      return modify.call(this, function () {\n        return _this9.editor.removeFormat(index, length);\n      }, source, index);\n    }\n  }, {\n    key: 'scrollIntoView',\n    value: function scrollIntoView() {\n      this.selection.scrollIntoView(this.scrollingContainer);\n    }\n  }, {\n    key: 'setContents',\n    value: function setContents(delta) {\n      var _this10 = this;\n\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n      return modify.call(this, function () {\n        delta = new _quillDelta2.default(delta);\n        var length = _this10.getLength();\n        var deleted = _this10.editor.deleteText(0, length);\n        var applied = _this10.editor.applyDelta(delta);\n        var lastOp = applied.ops[applied.ops.length - 1];\n        if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\\n') {\n          _this10.editor.deleteText(_this10.getLength() - 1, 1);\n          applied.delete(1);\n        }\n        var ret = deleted.compose(applied);\n        return ret;\n      }, source);\n    }\n  }, {\n    key: 'setSelection',\n    value: function setSelection(index, length, source) {\n      if (index == null) {\n        this.selection.setRange(null, length || Quill.sources.API);\n      } else {\n        var _overload15 = overload(index, length, source);\n\n        var _overload16 = _slicedToArray(_overload15, 4);\n\n        index = _overload16[0];\n        length = _overload16[1];\n        source = _overload16[3];\n\n        this.selection.setRange(new _selection.Range(index, length), source);\n        if (source !== _emitter4.default.sources.SILENT) {\n          this.selection.scrollIntoView(this.scrollingContainer);\n        }\n      }\n    }\n  }, {\n    key: 'setText',\n    value: function setText(text) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n      var delta = new _quillDelta2.default().insert(text);\n      return this.setContents(delta, source);\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;\n\n      var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes\n      this.selection.update(source);\n      return change;\n    }\n  }, {\n    key: 'updateContents',\n    value: function updateContents(delta) {\n      var _this11 = this;\n\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;\n\n      return modify.call(this, function () {\n        delta = new _quillDelta2.default(delta);\n        return _this11.editor.applyDelta(delta, source);\n      }, source, true);\n    }\n  }]);\n\n  return Quill;\n}();\n\nQuill.DEFAULTS = {\n  bounds: null,\n  formats: null,\n  modules: {},\n  placeholder: '',\n  readOnly: false,\n  scrollingContainer: null,\n  strict: true,\n  theme: 'default'\n};\nQuill.events = _emitter4.default.events;\nQuill.sources = _emitter4.default.sources;\n// eslint-disable-next-line no-undef\nQuill.version =   false ? 0 : \"1.3.7\";\n\nQuill.imports = {\n  'delta': _quillDelta2.default,\n  'parchment': _parchment2.default,\n  'core/module': _module2.default,\n  'core/theme': _theme2.default\n};\n\nfunction expandConfig(container, userConfig) {\n  userConfig = (0, _extend2.default)(true, {\n    container: container,\n    modules: {\n      clipboard: true,\n      keyboard: true,\n      history: true\n    }\n  }, userConfig);\n  if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {\n    userConfig.theme = _theme2.default;\n  } else {\n    userConfig.theme = Quill.import('themes/' + userConfig.theme);\n    if (userConfig.theme == null) {\n      throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');\n    }\n  }\n  var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);\n  [themeConfig, userConfig].forEach(function (config) {\n    config.modules = config.modules || {};\n    Object.keys(config.modules).forEach(function (module) {\n      if (config.modules[module] === true) {\n        config.modules[module] = {};\n      }\n    });\n  });\n  var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));\n  var moduleConfig = moduleNames.reduce(function (config, name) {\n    var moduleClass = Quill.import('modules/' + name);\n    if (moduleClass == null) {\n      debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');\n    } else {\n      config[name] = moduleClass.DEFAULTS || {};\n    }\n    return config;\n  }, {});\n  // Special case toolbar shorthand\n  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {\n    userConfig.modules.toolbar = {\n      container: userConfig.modules.toolbar\n    };\n  }\n  userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);\n  ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {\n    if (typeof userConfig[key] === 'string') {\n      userConfig[key] = document.querySelector(userConfig[key]);\n    }\n  });\n  userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {\n    if (userConfig.modules[name]) {\n      config[name] = userConfig.modules[name];\n    }\n    return config;\n  }, {});\n  return userConfig;\n}\n\n// Handle selection preservation and TEXT_CHANGE emission\n// common to modification APIs\nfunction modify(modifier, source, index, shift) {\n  if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {\n    return new _quillDelta2.default();\n  }\n  var range = index == null ? null : this.getSelection();\n  var oldDelta = this.editor.delta;\n  var change = modifier();\n  if (range != null) {\n    if (index === true) index = range.index;\n    if (shift == null) {\n      range = shiftRange(range, change, source);\n    } else if (shift !== 0) {\n      range = shiftRange(range, index, shift, source);\n    }\n    this.setSelection(range, _emitter4.default.sources.SILENT);\n  }\n  if (change.length() > 0) {\n    var _emitter;\n\n    var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];\n    (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));\n    if (source !== _emitter4.default.sources.SILENT) {\n      var _emitter2;\n\n      (_emitter2 = this.emitter).emit.apply(_emitter2, args);\n    }\n  }\n  return change;\n}\n\nfunction overload(index, length, name, value, source) {\n  var formats = {};\n  if (typeof index.index === 'number' && typeof index.length === 'number') {\n    // Allow for throwaway end (used by insertText/insertEmbed)\n    if (typeof length !== 'number') {\n      source = value, value = name, name = length, length = index.length, index = index.index;\n    } else {\n      length = index.length, index = index.index;\n    }\n  } else if (typeof length !== 'number') {\n    source = value, value = name, name = length, length = 0;\n  }\n  // Handle format being object, two format name/value strings or excluded\n  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n    formats = name;\n    source = value;\n  } else if (typeof name === 'string') {\n    if (value != null) {\n      formats[name] = value;\n    } else {\n      source = name;\n    }\n  }\n  // Handle optional source\n  source = source || _emitter4.default.sources.API;\n  return [index, length, formats, source];\n}\n\nfunction shiftRange(range, index, length, source) {\n  if (range == null) return null;\n  var start = void 0,\n      end = void 0;\n  if (index instanceof _quillDelta2.default) {\n    var _map = [range.index, range.index + range.length].map(function (pos) {\n      return index.transformPosition(pos, source !== _emitter4.default.sources.USER);\n    });\n\n    var _map2 = _slicedToArray(_map, 2);\n\n    start = _map2[0];\n    end = _map2[1];\n  } else {\n    var _map3 = [range.index, range.index + range.length].map(function (pos) {\n      if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;\n      if (length >= 0) {\n        return pos + length;\n      } else {\n        return Math.max(index, pos + length);\n      }\n    });\n\n    var _map4 = _slicedToArray(_map3, 2);\n\n    start = _map4[0];\n    end = _map4[1];\n  }\n  return new _selection.Range(start, end - start);\n}\n\nexports.expandConfig = expandConfig;\nexports.overload = overload;\nexports.default = Quill;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __nested_webpack_require_223653__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _text = __nested_webpack_require_223653__(7);\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _parchment = __nested_webpack_require_223653__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Inline = function (_Parchment$Inline) {\n  _inherits(Inline, _Parchment$Inline);\n\n  function Inline() {\n    _classCallCheck(this, Inline);\n\n    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));\n  }\n\n  _createClass(Inline, [{\n    key: 'formatAt',\n    value: function formatAt(index, length, name, value) {\n      if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {\n        var blot = this.isolate(index, length);\n        if (value) {\n          blot.wrap(name, value);\n        }\n      } else {\n        _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);\n      }\n    }\n  }, {\n    key: 'optimize',\n    value: function optimize(context) {\n      _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);\n      if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {\n        var parent = this.parent.isolate(this.offset(), this.length());\n        this.moveChildren(parent);\n        parent.wrap(this);\n      }\n    }\n  }], [{\n    key: 'compare',\n    value: function compare(self, other) {\n      var selfIndex = Inline.order.indexOf(self);\n      var otherIndex = Inline.order.indexOf(other);\n      if (selfIndex >= 0 || otherIndex >= 0) {\n        return selfIndex - otherIndex;\n      } else if (self === other) {\n        return 0;\n      } else if (self < other) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n  }]);\n\n  return Inline;\n}(_parchment2.default.Inline);\n\nInline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];\n// Lower index means deeper in the DOM tree, since not found (-1) is for embeds\nInline.order = ['cursor', 'inline', // Must be lower\n'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher\n];\n\nexports.default = Inline;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __nested_webpack_require_228075__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __nested_webpack_require_228075__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TextBlot = function (_Parchment$Text) {\n  _inherits(TextBlot, _Parchment$Text);\n\n  function TextBlot() {\n    _classCallCheck(this, TextBlot);\n\n    return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));\n  }\n\n  return TextBlot;\n}(_parchment2.default.Text);\n\nexports.default = TextBlot;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __nested_webpack_require_229674__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _eventemitter = __nested_webpack_require_229674__(54);\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _logger = __nested_webpack_require_229674__(10);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar debug = (0, _logger2.default)('quill:events');\n\nvar EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];\n\nEVENTS.forEach(function (eventName) {\n  document.addEventListener(eventName, function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {\n      // TODO use WeakMap\n      if (node.__quill && node.__quill.emitter) {\n        var _node$__quill$emitter;\n\n        (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);\n      }\n    });\n  });\n});\n\nvar Emitter = function (_EventEmitter) {\n  _inherits(Emitter, _EventEmitter);\n\n  function Emitter() {\n    _classCallCheck(this, Emitter);\n\n    var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));\n\n    _this.listeners = {};\n    _this.on('error', debug.error);\n    return _this;\n  }\n\n  _createClass(Emitter, [{\n    key: 'emit',\n    value: function emit() {\n      debug.log.apply(debug, arguments);\n      _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);\n    }\n  }, {\n    key: 'handleDOM',\n    value: function handleDOM(event) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      (this.listeners[event.type] || []).forEach(function (_ref) {\n        var node = _ref.node,\n            handler = _ref.handler;\n\n        if (event.target === node || node.contains(event.target)) {\n          handler.apply(undefined, [event].concat(args));\n        }\n      });\n    }\n  }, {\n    key: 'listenDOM',\n    value: function listenDOM(eventName, node, handler) {\n      if (!this.listeners[eventName]) {\n        this.listeners[eventName] = [];\n      }\n      this.listeners[eventName].push({ node: node, handler: handler });\n    }\n  }]);\n\n  return Emitter;\n}(_eventemitter2.default);\n\nEmitter.events = {\n  EDITOR_CHANGE: 'editor-change',\n  SCROLL_BEFORE_UPDATE: 'scroll-before-update',\n  SCROLL_OPTIMIZE: 'scroll-optimize',\n  SCROLL_UPDATE: 'scroll-update',\n  SELECTION_CHANGE: 'selection-change',\n  TEXT_CHANGE: 'text-change'\n};\nEmitter.sources = {\n  API: 'api',\n  SILENT: 'silent',\n  USER: 'user'\n};\n\nexports.default = Emitter;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Module = function Module(quill) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  _classCallCheck(this, Module);\n\n  this.quill = quill;\n  this.options = options;\n};\n\nModule.DEFAULTS = {};\n\nexports.default = Module;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar levels = ['error', 'warn', 'log', 'info'];\nvar level = 'warn';\n\nfunction debug(method) {\n  if (levels.indexOf(method) <= levels.indexOf(level)) {\n    var _console;\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console\n  }\n}\n\nfunction namespace(ns) {\n  return levels.reduce(function (logger, method) {\n    logger[method] = debug.bind(console, method, ns);\n    return logger;\n  }, {});\n}\n\ndebug.level = namespace.level = function (newLevel) {\n  level = newLevel;\n};\n\nexports.default = namespace;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __nested_webpack_require_235937__) {\n\nvar pSlice = Array.prototype.slice;\nvar objectKeys = __nested_webpack_require_235937__(52);\nvar isArguments = __nested_webpack_require_235937__(53);\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __nested_webpack_require_239056__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Registry = __nested_webpack_require_239056__(1);\nvar Attributor = /** @class */ (function () {\n    function Attributor(attrName, keyName, options) {\n        if (options === void 0) { options = {}; }\n        this.attrName = attrName;\n        this.keyName = keyName;\n        var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;\n        if (options.scope != null) {\n            // Ignore type bits, force attribute bit\n            this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;\n        }\n        else {\n            this.scope = Registry.Scope.ATTRIBUTE;\n        }\n        if (options.whitelist != null)\n            this.whitelist = options.whitelist;\n    }\n    Attributor.keys = function (node) {\n        return [].map.call(node.attributes, function (item) {\n            return item.name;\n        });\n    };\n    Attributor.prototype.add = function (node, value) {\n        if (!this.canAdd(node, value))\n            return false;\n        node.setAttribute(this.keyName, value);\n        return true;\n    };\n    Attributor.prototype.canAdd = function (node, value) {\n        var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));\n        if (match == null)\n            return false;\n        if (this.whitelist == null)\n            return true;\n        if (typeof value === 'string') {\n            return this.whitelist.indexOf(value.replace(/[\"']/g, '')) > -1;\n        }\n        else {\n            return this.whitelist.indexOf(value) > -1;\n        }\n    };\n    Attributor.prototype.remove = function (node) {\n        node.removeAttribute(this.keyName);\n    };\n    Attributor.prototype.value = function (node) {\n        var value = node.getAttribute(this.keyName);\n        if (this.canAdd(node, value) && value) {\n            return value;\n        }\n        return '';\n    };\n    return Attributor;\n}());\nexports.default = Attributor;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __nested_webpack_require_241103__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Code = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _quillDelta = __nested_webpack_require_241103__(2);\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __nested_webpack_require_241103__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _block = __nested_webpack_require_241103__(4);\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _inline = __nested_webpack_require_241103__(6);\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nvar _text = __nested_webpack_require_241103__(7);\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Code = function (_Inline) {\n  _inherits(Code, _Inline);\n\n  function Code() {\n    _classCallCheck(this, Code);\n\n    return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));\n  }\n\n  return Code;\n}(_inline2.default);\n\nCode.blotName = 'code';\nCode.tagName = 'CODE';\n\nvar CodeBlock = function (_Block) {\n  _inherits(CodeBlock, _Block);\n\n  function CodeBlock() {\n    _classCallCheck(this, CodeBlock);\n\n    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));\n  }\n\n  _createClass(CodeBlock, [{\n    key: 'delta',\n    value: function delta() {\n      var _this3 = this;\n\n      var text = this.domNode.textContent;\n      if (text.endsWith('\\n')) {\n        // Should always be true\n        text = text.slice(0, -1);\n      }\n      return text.split('\\n').reduce(function (delta, frag) {\n        return delta.insert(frag).insert('\\n', _this3.formats());\n      }, new _quillDelta2.default());\n    }\n  }, {\n    key: 'format',\n    value: function format(name, value) {\n      if (name === this.statics.blotName && value) return;\n\n      var _descendant = this.descendant(_text2.default, this.length() - 1),\n          _descendant2 = _slicedToArray(_descendant, 1),\n          text = _descendant2[0];\n\n      if (text != null) {\n        text.deleteAt(text.length() - 1, 1);\n      }\n      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);\n    }\n  }, {\n    key: 'formatAt',\n    value: function formatAt(index, length, name, value) {\n      if (length === 0) return;\n      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {\n        return;\n      }\n      var nextNewline = this.newlineIndex(index);\n      if (nextNewline < 0 || nextNewline >= index + length) return;\n      var prevNewline = this.newlineIndex(index, true) + 1;\n      var isolateLength = nextNewline - prevNewline + 1;\n      var blot = this.isolate(prevNewline, isolateLength);\n      var next = blot.next;\n      blot.format(name, value);\n      if (next instanceof CodeBlock) {\n        next.formatAt(0, index - prevNewline + length - isolateLength, name, value);\n      }\n    }\n  }, {\n    key: 'insertAt',\n    value: function insertAt(index, value, def) {\n      if (def != null) return;\n\n      var _descendant3 = this.descendant(_text2.default, index),\n          _descendant4 = _slicedToArray(_descendant3, 2),\n          text = _descendant4[0],\n          offset = _descendant4[1];\n\n      text.insertAt(offset, value);\n    }\n  }, {\n    key: 'length',\n    value: function length() {\n      var length = this.domNode.textContent.length;\n      if (!this.domNode.textContent.endsWith('\\n')) {\n        return length + 1;\n      }\n      return length;\n    }\n  }, {\n    key: 'newlineIndex',\n    value: function newlineIndex(searchIndex) {\n      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!reverse) {\n        var offset = this.domNode.textContent.slice(searchIndex).indexOf('\\n');\n        return offset > -1 ? searchIndex + offset : -1;\n      } else {\n        return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\\n');\n      }\n    }\n  }, {\n    key: 'optimize',\n    value: function optimize(context) {\n      if (!this.domNode.textContent.endsWith('\\n')) {\n        this.appendChild(_parchment2.default.create('text', '\\n'));\n      }\n      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);\n      var next = this.next;\n      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {\n        next.optimize(context);\n        next.moveChildren(this);\n        next.remove();\n      }\n    }\n  }, {\n    key: 'replace',\n    value: function replace(target) {\n      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);\n      [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {\n        var blot = _parchment2.default.find(node);\n        if (blot == null) {\n          node.parentNode.removeChild(node);\n        } else if (blot instanceof _parchment2.default.Embed) {\n          blot.remove();\n        } else {\n          blot.unwrap();\n        }\n      });\n    }\n  }], [{\n    key: 'create',\n    value: function create(value) {\n      var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);\n      domNode.setAttribute('spellcheck', false);\n      return domNode;\n    }\n  }, {\n    key: 'formats',\n    value: function formats() {\n      return true;\n    }\n  }]);\n\n  return CodeBlock;\n}(_block2.default);\n\nCodeBlock.blotName = 'code-block';\nCodeBlock.tagName = 'PRE';\nCodeBlock.TAB = '  ';\n\nexports.Code = Code;\nexports.default = CodeBlock;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __nested_webpack_require_249524__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _quillDelta = __nested_webpack_require_249524__(2);\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _op = __nested_webpack_require_249524__(20);\n\nvar _op2 = _interopRequireDefault(_op);\n\nvar _parchment = __nested_webpack_require_249524__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _code = __nested_webpack_require_249524__(13);\n\nvar _code2 = _interopRequireDefault(_code);\n\nvar _cursor = __nested_webpack_require_249524__(24);\n\nvar _cursor2 = _interopRequireDefault(_cursor);\n\nvar _block = __nested_webpack_require_249524__(4);\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _break = __nested_webpack_require_249524__(16);\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _clone = __nested_webpack_require_249524__(21);\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _deepEqual = __nested_webpack_require_249524__(11);\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _extend = __nested_webpack_require_249524__(3);\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ASCII = /^[ -~]*$/;\n\nvar Editor = function () {\n  function Editor(scroll) {\n    _classCallCheck(this, Editor);\n\n    this.scroll = scroll;\n    this.delta = this.getDelta();\n  }\n\n  _createClass(Editor, [{\n    key: 'applyDelta',\n    value: function applyDelta(delta) {\n      var _this = this;\n\n      var consumeNextNewline = false;\n      this.scroll.update();\n      var scrollLength = this.scroll.length();\n      this.scroll.batchStart();\n      delta = normalizeDelta(delta);\n      delta.reduce(function (index, op) {\n        var length = op.retain || op.delete || op.insert.length || 1;\n        var attributes = op.attributes || {};\n        if (op.insert != null) {\n          if (typeof op.insert === 'string') {\n            var text = op.insert;\n            if (text.endsWith('\\n') && consumeNextNewline) {\n              consumeNextNewline = false;\n              text = text.slice(0, -1);\n            }\n            if (index >= scrollLength && !text.endsWith('\\n')) {\n              consumeNextNewline = true;\n            }\n            _this.scroll.insertAt(index, text);\n\n            var _scroll$line = _this.scroll.line(index),\n                _scroll$line2 = _slicedToArray(_scroll$line, 2),\n                line = _scroll$line2[0],\n                offset = _scroll$line2[1];\n\n            var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));\n            if (line instanceof _block2.default) {\n              var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),\n                  _line$descendant2 = _slicedToArray(_line$descendant, 1),\n                  leaf = _line$descendant2[0];\n\n              formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));\n            }\n            attributes = _op2.default.attributes.diff(formats, attributes) || {};\n          } else if (_typeof(op.insert) === 'object') {\n            var key = Object.keys(op.insert)[0]; // There should only be one key\n            if (key == null) return index;\n            _this.scroll.insertAt(index, key, op.insert[key]);\n          }\n          scrollLength += length;\n        }\n        Object.keys(attributes).forEach(function (name) {\n          _this.scroll.formatAt(index, length, name, attributes[name]);\n        });\n        return index + length;\n      }, 0);\n      delta.reduce(function (index, op) {\n        if (typeof op.delete === 'number') {\n          _this.scroll.deleteAt(index, op.delete);\n          return index;\n        }\n        return index + (op.retain || op.insert.length || 1);\n      }, 0);\n      this.scroll.batchEnd();\n      return this.update(delta);\n    }\n  }, {\n    key: 'deleteText',\n    value: function deleteText(index, length) {\n      this.scroll.deleteAt(index, length);\n      return this.update(new _quillDelta2.default().retain(index).delete(length));\n    }\n  }, {\n    key: 'formatLine',\n    value: function formatLine(index, length) {\n      var _this2 = this;\n\n      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      this.scroll.update();\n      Object.keys(formats).forEach(function (format) {\n        if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;\n        var lines = _this2.scroll.lines(index, Math.max(length, 1));\n        var lengthRemaining = length;\n        lines.forEach(function (line) {\n          var lineLength = line.length();\n          if (!(line instanceof _code2.default)) {\n            line.format(format, formats[format]);\n          } else {\n            var codeIndex = index - line.offset(_this2.scroll);\n            var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;\n            line.formatAt(codeIndex, codeLength, format, formats[format]);\n          }\n          lengthRemaining -= lineLength;\n        });\n      });\n      this.scroll.optimize();\n      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));\n    }\n  }, {\n    key: 'formatText',\n    value: function formatText(index, length) {\n      var _this3 = this;\n\n      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      Object.keys(formats).forEach(function (format) {\n        _this3.scroll.formatAt(index, length, format, formats[format]);\n      });\n      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));\n    }\n  }, {\n    key: 'getContents',\n    value: function getContents(index, length) {\n      return this.delta.slice(index, index + length);\n    }\n  }, {\n    key: 'getDelta',\n    value: function getDelta() {\n      return this.scroll.lines().reduce(function (delta, line) {\n        return delta.concat(line.delta());\n      }, new _quillDelta2.default());\n    }\n  }, {\n    key: 'getFormat',\n    value: function getFormat(index) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var lines = [],\n          leaves = [];\n      if (length === 0) {\n        this.scroll.path(index).forEach(function (path) {\n          var _path = _slicedToArray(path, 1),\n              blot = _path[0];\n\n          if (blot instanceof _block2.default) {\n            lines.push(blot);\n          } else if (blot instanceof _parchment2.default.Leaf) {\n            leaves.push(blot);\n          }\n        });\n      } else {\n        lines = this.scroll.lines(index, length);\n        leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);\n      }\n      var formatsArr = [lines, leaves].map(function (blots) {\n        if (blots.length === 0) return {};\n        var formats = (0, _block.bubbleFormats)(blots.shift());\n        while (Object.keys(formats).length > 0) {\n          var blot = blots.shift();\n          if (blot == null) return formats;\n          formats = combineFormats((0, _block.bubbleFormats)(blot), formats);\n        }\n        return formats;\n      });\n      return _extend2.default.apply(_extend2.default, formatsArr);\n    }\n  }, {\n    key: 'getText',\n    value: function getText(index, length) {\n      return this.getContents(index, length).filter(function (op) {\n        return typeof op.insert === 'string';\n      }).map(function (op) {\n        return op.insert;\n      }).join('');\n    }\n  }, {\n    key: 'insertEmbed',\n    value: function insertEmbed(index, embed, value) {\n      this.scroll.insertAt(index, embed, value);\n      return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));\n    }\n  }, {\n    key: 'insertText',\n    value: function insertText(index, text) {\n      var _this4 = this;\n\n      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n      this.scroll.insertAt(index, text);\n      Object.keys(formats).forEach(function (format) {\n        _this4.scroll.formatAt(index, text.length, format, formats[format]);\n      });\n      return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));\n    }\n  }, {\n    key: 'isBlank',\n    value: function isBlank() {\n      if (this.scroll.children.length == 0) return true;\n      if (this.scroll.children.length > 1) return false;\n      var block = this.scroll.children.head;\n      if (block.statics.blotName !== _block2.default.blotName) return false;\n      if (block.children.length > 1) return false;\n      return block.children.head instanceof _break2.default;\n    }\n  }, {\n    key: 'removeFormat',\n    value: function removeFormat(index, length) {\n      var text = this.getText(index, length);\n\n      var _scroll$line3 = this.scroll.line(index + length),\n          _scroll$line4 = _slicedToArray(_scroll$line3, 2),\n          line = _scroll$line4[0],\n          offset = _scroll$line4[1];\n\n      var suffixLength = 0,\n          suffix = new _quillDelta2.default();\n      if (line != null) {\n        if (!(line instanceof _code2.default)) {\n          suffixLength = line.length() - offset;\n        } else {\n          suffixLength = line.newlineIndex(offset) - offset + 1;\n        }\n        suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\\n');\n      }\n      var contents = this.getContents(index, length + suffixLength);\n      var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));\n      var delta = new _quillDelta2.default().retain(index).concat(diff);\n      return this.applyDelta(delta);\n    }\n  }, {\n    key: 'update',\n    value: function update(change) {\n      var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      var oldDelta = this.delta;\n      if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {\n        // Optimization for character changes\n        var textBlot = _parchment2.default.find(mutations[0].target);\n        var formats = (0, _block.bubbleFormats)(textBlot);\n        var index = textBlot.offset(this.scroll);\n        var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');\n        var oldText = new _quillDelta2.default().insert(oldValue);\n        var newText = new _quillDelta2.default().insert(textBlot.value());\n        var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));\n        change = diffDelta.reduce(function (delta, op) {\n          if (op.insert) {\n            return delta.insert(op.insert, formats);\n          } else {\n            return delta.push(op);\n          }\n        }, new _quillDelta2.default());\n        this.delta = oldDelta.compose(change);\n      } else {\n        this.delta = this.getDelta();\n        if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {\n          change = oldDelta.diff(this.delta, cursorIndex);\n        }\n      }\n      return change;\n    }\n  }]);\n\n  return Editor;\n}();\n\nfunction combineFormats(formats, combined) {\n  return Object.keys(combined).reduce(function (merged, name) {\n    if (formats[name] == null) return merged;\n    if (combined[name] === formats[name]) {\n      merged[name] = combined[name];\n    } else if (Array.isArray(combined[name])) {\n      if (combined[name].indexOf(formats[name]) < 0) {\n        merged[name] = combined[name].concat([formats[name]]);\n      }\n    } else {\n      merged[name] = [combined[name], formats[name]];\n    }\n    return merged;\n  }, {});\n}\n\nfunction normalizeDelta(delta) {\n  return delta.reduce(function (delta, op) {\n    if (op.insert === 1) {\n      var attributes = (0, _clone2.default)(op.attributes);\n      delete attributes['image'];\n      return delta.insert({ image: op.attributes.image }, attributes);\n    }\n    if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {\n      op = (0, _clone2.default)(op);\n      if (op.attributes.list) {\n        op.attributes.list = 'ordered';\n      } else {\n        op.attributes.list = 'bullet';\n        delete op.attributes.bullet;\n      }\n    }\n    if (typeof op.insert === 'string') {\n      var text = op.insert.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n      return delta.insert(text, op.attributes);\n    }\n    return delta.push(op);\n  }, new _quillDelta2.default());\n}\n\nexports.default = Editor;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __nested_webpack_require_263940__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Range = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _parchment = __nested_webpack_require_263940__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _clone = __nested_webpack_require_263940__(21);\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _deepEqual = __nested_webpack_require_263940__(11);\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _emitter3 = __nested_webpack_require_263940__(8);\n\nvar _emitter4 = _interopRequireDefault(_emitter3);\n\nvar _logger = __nested_webpack_require_263940__(10);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = (0, _logger2.default)('quill:selection');\n\nvar Range = function Range(index) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  _classCallCheck(this, Range);\n\n  this.index = index;\n  this.length = length;\n};\n\nvar Selection = function () {\n  function Selection(scroll, emitter) {\n    var _this = this;\n\n    _classCallCheck(this, Selection);\n\n    this.emitter = emitter;\n    this.scroll = scroll;\n    this.composing = false;\n    this.mouseDown = false;\n    this.root = this.scroll.domNode;\n    this.cursor = _parchment2.default.create('cursor', this);\n    // savedRange is last non-null range\n    this.lastRange = this.savedRange = new Range(0, 0);\n    this.handleComposition();\n    this.handleDragging();\n    this.emitter.listenDOM('selectionchange', document, function () {\n      if (!_this.mouseDown) {\n        setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);\n      }\n    });\n    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {\n      if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {\n        _this.update(_emitter4.default.sources.SILENT);\n      }\n    });\n    this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {\n      if (!_this.hasFocus()) return;\n      var native = _this.getNativeRange();\n      if (native == null) return;\n      if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle\n      // TODO unclear if this has negative side effects\n      _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {\n        try {\n          _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);\n        } catch (ignored) {}\n      });\n    });\n    this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {\n      if (context.range) {\n        var _context$range = context.range,\n            startNode = _context$range.startNode,\n            startOffset = _context$range.startOffset,\n            endNode = _context$range.endNode,\n            endOffset = _context$range.endOffset;\n\n        _this.setNativeRange(startNode, startOffset, endNode, endOffset);\n      }\n    });\n    this.update(_emitter4.default.sources.SILENT);\n  }\n\n  _createClass(Selection, [{\n    key: 'handleComposition',\n    value: function handleComposition() {\n      var _this2 = this;\n\n      this.root.addEventListener('compositionstart', function () {\n        _this2.composing = true;\n      });\n      this.root.addEventListener('compositionend', function () {\n        _this2.composing = false;\n        if (_this2.cursor.parent) {\n          var range = _this2.cursor.restore();\n          if (!range) return;\n          setTimeout(function () {\n            _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);\n          }, 1);\n        }\n      });\n    }\n  }, {\n    key: 'handleDragging',\n    value: function handleDragging() {\n      var _this3 = this;\n\n      this.emitter.listenDOM('mousedown', document.body, function () {\n        _this3.mouseDown = true;\n      });\n      this.emitter.listenDOM('mouseup', document.body, function () {\n        _this3.mouseDown = false;\n        _this3.update(_emitter4.default.sources.USER);\n      });\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      if (this.hasFocus()) return;\n      this.root.focus();\n      this.setRange(this.savedRange);\n    }\n  }, {\n    key: 'format',\n    value: function format(_format, value) {\n      if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;\n      this.scroll.update();\n      var nativeRange = this.getNativeRange();\n      if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;\n      if (nativeRange.start.node !== this.cursor.textNode) {\n        var blot = _parchment2.default.find(nativeRange.start.node, false);\n        if (blot == null) return;\n        // TODO Give blot ability to not split\n        if (blot instanceof _parchment2.default.Leaf) {\n          var after = blot.split(nativeRange.start.offset);\n          blot.parent.insertBefore(this.cursor, after);\n        } else {\n          blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen\n        }\n        this.cursor.attach();\n      }\n      this.cursor.format(_format, value);\n      this.scroll.optimize();\n      this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);\n      this.update();\n    }\n  }, {\n    key: 'getBounds',\n    value: function getBounds(index) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var scrollLength = this.scroll.length();\n      index = Math.min(index, scrollLength - 1);\n      length = Math.min(index + length, scrollLength - 1) - index;\n      var node = void 0,\n          _scroll$leaf = this.scroll.leaf(index),\n          _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),\n          leaf = _scroll$leaf2[0],\n          offset = _scroll$leaf2[1];\n      if (leaf == null) return null;\n\n      var _leaf$position = leaf.position(offset, true);\n\n      var _leaf$position2 = _slicedToArray(_leaf$position, 2);\n\n      node = _leaf$position2[0];\n      offset = _leaf$position2[1];\n\n      var range = document.createRange();\n      if (length > 0) {\n        range.setStart(node, offset);\n\n        var _scroll$leaf3 = this.scroll.leaf(index + length);\n\n        var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);\n\n        leaf = _scroll$leaf4[0];\n        offset = _scroll$leaf4[1];\n\n        if (leaf == null) return null;\n\n        var _leaf$position3 = leaf.position(offset, true);\n\n        var _leaf$position4 = _slicedToArray(_leaf$position3, 2);\n\n        node = _leaf$position4[0];\n        offset = _leaf$position4[1];\n\n        range.setEnd(node, offset);\n        return range.getBoundingClientRect();\n      } else {\n        var side = 'left';\n        var rect = void 0;\n        if (node instanceof Text) {\n          if (offset < node.data.length) {\n            range.setStart(node, offset);\n            range.setEnd(node, offset + 1);\n          } else {\n            range.setStart(node, offset - 1);\n            range.setEnd(node, offset);\n            side = 'right';\n          }\n          rect = range.getBoundingClientRect();\n        } else {\n          rect = leaf.domNode.getBoundingClientRect();\n          if (offset > 0) side = 'right';\n        }\n        return {\n          bottom: rect.top + rect.height,\n          height: rect.height,\n          left: rect[side],\n          right: rect[side],\n          top: rect.top,\n          width: 0\n        };\n      }\n    }\n  }, {\n    key: 'getNativeRange',\n    value: function getNativeRange() {\n      var selection = document.getSelection();\n      if (selection == null || selection.rangeCount <= 0) return null;\n      var nativeRange = selection.getRangeAt(0);\n      if (nativeRange == null) return null;\n      var range = this.normalizeNative(nativeRange);\n      debug.info('getNativeRange', range);\n      return range;\n    }\n  }, {\n    key: 'getRange',\n    value: function getRange() {\n      var normalized = this.getNativeRange();\n      if (normalized == null) return [null, null];\n      var range = this.normalizedToRange(normalized);\n      return [range, normalized];\n    }\n  }, {\n    key: 'hasFocus',\n    value: function hasFocus() {\n      return document.activeElement === this.root;\n    }\n  }, {\n    key: 'normalizedToRange',\n    value: function normalizedToRange(range) {\n      var _this4 = this;\n\n      var positions = [[range.start.node, range.start.offset]];\n      if (!range.native.collapsed) {\n        positions.push([range.end.node, range.end.offset]);\n      }\n      var indexes = positions.map(function (position) {\n        var _position = _slicedToArray(position, 2),\n            node = _position[0],\n            offset = _position[1];\n\n        var blot = _parchment2.default.find(node, true);\n        var index = blot.offset(_this4.scroll);\n        if (offset === 0) {\n          return index;\n        } else if (blot instanceof _parchment2.default.Container) {\n          return index + blot.length();\n        } else {\n          return index + blot.index(node, offset);\n        }\n      });\n      var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);\n      var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));\n      return new Range(start, end - start);\n    }\n  }, {\n    key: 'normalizeNative',\n    value: function normalizeNative(nativeRange) {\n      if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {\n        return null;\n      }\n      var range = {\n        start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },\n        end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },\n        native: nativeRange\n      };\n      [range.start, range.end].forEach(function (position) {\n        var node = position.node,\n            offset = position.offset;\n        while (!(node instanceof Text) && node.childNodes.length > 0) {\n          if (node.childNodes.length > offset) {\n            node = node.childNodes[offset];\n            offset = 0;\n          } else if (node.childNodes.length === offset) {\n            node = node.lastChild;\n            offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;\n          } else {\n            break;\n          }\n        }\n        position.node = node, position.offset = offset;\n      });\n      return range;\n    }\n  }, {\n    key: 'rangeToNative',\n    value: function rangeToNative(range) {\n      var _this5 = this;\n\n      var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];\n      var args = [];\n      var scrollLength = this.scroll.length();\n      indexes.forEach(function (index, i) {\n        index = Math.min(scrollLength - 1, index);\n        var node = void 0,\n            _scroll$leaf5 = _this5.scroll.leaf(index),\n            _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),\n            leaf = _scroll$leaf6[0],\n            offset = _scroll$leaf6[1];\n        var _leaf$position5 = leaf.position(offset, i !== 0);\n\n        var _leaf$position6 = _slicedToArray(_leaf$position5, 2);\n\n        node = _leaf$position6[0];\n        offset = _leaf$position6[1];\n\n        args.push(node, offset);\n      });\n      if (args.length < 2) {\n        args = args.concat(args);\n      }\n      return args;\n    }\n  }, {\n    key: 'scrollIntoView',\n    value: function scrollIntoView(scrollingContainer) {\n      var range = this.lastRange;\n      if (range == null) return;\n      var bounds = this.getBounds(range.index, range.length);\n      if (bounds == null) return;\n      var limit = this.scroll.length() - 1;\n\n      var _scroll$line = this.scroll.line(Math.min(range.index, limit)),\n          _scroll$line2 = _slicedToArray(_scroll$line, 1),\n          first = _scroll$line2[0];\n\n      var last = first;\n      if (range.length > 0) {\n        var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));\n\n        var _scroll$line4 = _slicedToArray(_scroll$line3, 1);\n\n        last = _scroll$line4[0];\n      }\n      if (first == null || last == null) return;\n      var scrollBounds = scrollingContainer.getBoundingClientRect();\n      if (bounds.top < scrollBounds.top) {\n        scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;\n      } else if (bounds.bottom > scrollBounds.bottom) {\n        scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;\n      }\n    }\n  }, {\n    key: 'setNativeRange',\n    value: function setNativeRange(startNode, startOffset) {\n      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;\n      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;\n      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);\n      if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {\n        return;\n      }\n      var selection = document.getSelection();\n      if (selection == null) return;\n      if (startNode != null) {\n        if (!this.hasFocus()) this.root.focus();\n        var native = (this.getNativeRange() || {}).native;\n        if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {\n\n          if (startNode.tagName == \"BR\") {\n            startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);\n            startNode = startNode.parentNode;\n          }\n          if (endNode.tagName == \"BR\") {\n            endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);\n            endNode = endNode.parentNode;\n          }\n          var range = document.createRange();\n          range.setStart(startNode, startOffset);\n          range.setEnd(endNode, endOffset);\n          selection.removeAllRanges();\n          selection.addRange(range);\n        }\n      } else {\n        selection.removeAllRanges();\n        this.root.blur();\n        document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)\n      }\n    }\n  }, {\n    key: 'setRange',\n    value: function setRange(range) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;\n\n      if (typeof force === 'string') {\n        source = force;\n        force = false;\n      }\n      debug.info('setRange', range);\n      if (range != null) {\n        var args = this.rangeToNative(range);\n        this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));\n      } else {\n        this.setNativeRange(null);\n      }\n      this.update(source);\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;\n\n      var oldRange = this.lastRange;\n\n      var _getRange = this.getRange(),\n          _getRange2 = _slicedToArray(_getRange, 2),\n          lastRange = _getRange2[0],\n          nativeRange = _getRange2[1];\n\n      this.lastRange = lastRange;\n      if (this.lastRange != null) {\n        this.savedRange = this.lastRange;\n      }\n      if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {\n        var _emitter;\n\n        if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {\n          this.cursor.restore();\n        }\n        var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];\n        (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));\n        if (source !== _emitter4.default.sources.SILENT) {\n          var _emitter2;\n\n          (_emitter2 = this.emitter).emit.apply(_emitter2, args);\n        }\n      }\n    }\n  }]);\n\n  return Selection;\n}();\n\nfunction contains(parent, descendant) {\n  try {\n    // Firefox inserts inaccessible nodes around video elements\n    descendant.parentNode;\n  } catch (e) {\n    return false;\n  }\n  // IE11 has bug with Text nodes\n  // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect\n  if (descendant instanceof Text) {\n    descendant = descendant.parentNode;\n  }\n  return parent.contains(descendant);\n}\n\nexports.Range = Range;\nexports.default = Selection;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __nested_webpack_require_282160__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_282160__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Break = function (_Parchment$Embed) {\n  _inherits(Break, _Parchment$Embed);\n\n  function Break() {\n    _classCallCheck(this, Break);\n\n    return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));\n  }\n\n  _createClass(Break, [{\n    key: 'insertInto',\n    value: function insertInto(parent, ref) {\n      if (parent.children.length === 0) {\n        _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);\n      } else {\n        this.remove();\n      }\n    }\n  }, {\n    key: 'length',\n    value: function length() {\n      return 0;\n    }\n  }, {\n    key: 'value',\n    value: function value() {\n      return '';\n    }\n  }], [{\n    key: 'value',\n    value: function value() {\n      return undefined;\n    }\n  }]);\n\n  return Break;\n}(_parchment2.default.Embed);\n\nBreak.blotName = 'break';\nBreak.tagName = 'BR';\n\nexports.default = Break;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __nested_webpack_require_285414__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar linked_list_1 = __nested_webpack_require_285414__(44);\nvar shadow_1 = __nested_webpack_require_285414__(30);\nvar Registry = __nested_webpack_require_285414__(1);\nvar ContainerBlot = /** @class */ (function (_super) {\n    __extends(ContainerBlot, _super);\n    function ContainerBlot(domNode) {\n        var _this = _super.call(this, domNode) || this;\n        _this.build();\n        return _this;\n    }\n    ContainerBlot.prototype.appendChild = function (other) {\n        this.insertBefore(other);\n    };\n    ContainerBlot.prototype.attach = function () {\n        _super.prototype.attach.call(this);\n        this.children.forEach(function (child) {\n            child.attach();\n        });\n    };\n    ContainerBlot.prototype.build = function () {\n        var _this = this;\n        this.children = new linked_list_1.default();\n        // Need to be reversed for if DOM nodes already in order\n        [].slice\n            .call(this.domNode.childNodes)\n            .reverse()\n            .forEach(function (node) {\n            try {\n                var child = makeBlot(node);\n                _this.insertBefore(child, _this.children.head || undefined);\n            }\n            catch (err) {\n                if (err instanceof Registry.ParchmentError)\n                    return;\n                else\n                    throw err;\n            }\n        });\n    };\n    ContainerBlot.prototype.deleteAt = function (index, length) {\n        if (index === 0 && length === this.length()) {\n            return this.remove();\n        }\n        this.children.forEachAt(index, length, function (child, offset, length) {\n            child.deleteAt(offset, length);\n        });\n    };\n    ContainerBlot.prototype.descendant = function (criteria, index) {\n        var _a = this.children.find(index), child = _a[0], offset = _a[1];\n        if ((criteria.blotName == null && criteria(child)) ||\n            (criteria.blotName != null && child instanceof criteria)) {\n            return [child, offset];\n        }\n        else if (child instanceof ContainerBlot) {\n            return child.descendant(criteria, offset);\n        }\n        else {\n            return [null, -1];\n        }\n    };\n    ContainerBlot.prototype.descendants = function (criteria, index, length) {\n        if (index === void 0) { index = 0; }\n        if (length === void 0) { length = Number.MAX_VALUE; }\n        var descendants = [];\n        var lengthLeft = length;\n        this.children.forEachAt(index, length, function (child, index, length) {\n            if ((criteria.blotName == null && criteria(child)) ||\n                (criteria.blotName != null && child instanceof criteria)) {\n                descendants.push(child);\n            }\n            if (child instanceof ContainerBlot) {\n                descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));\n            }\n            lengthLeft -= length;\n        });\n        return descendants;\n    };\n    ContainerBlot.prototype.detach = function () {\n        this.children.forEach(function (child) {\n            child.detach();\n        });\n        _super.prototype.detach.call(this);\n    };\n    ContainerBlot.prototype.formatAt = function (index, length, name, value) {\n        this.children.forEachAt(index, length, function (child, offset, length) {\n            child.formatAt(offset, length, name, value);\n        });\n    };\n    ContainerBlot.prototype.insertAt = function (index, value, def) {\n        var _a = this.children.find(index), child = _a[0], offset = _a[1];\n        if (child) {\n            child.insertAt(offset, value, def);\n        }\n        else {\n            var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);\n            this.appendChild(blot);\n        }\n    };\n    ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {\n        if (this.statics.allowedChildren != null &&\n            !this.statics.allowedChildren.some(function (child) {\n                return childBlot instanceof child;\n            })) {\n            throw new Registry.ParchmentError(\"Cannot insert \" + childBlot.statics.blotName + \" into \" + this.statics.blotName);\n        }\n        childBlot.insertInto(this, refBlot);\n    };\n    ContainerBlot.prototype.length = function () {\n        return this.children.reduce(function (memo, child) {\n            return memo + child.length();\n        }, 0);\n    };\n    ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {\n        this.children.forEach(function (child) {\n            targetParent.insertBefore(child, refNode);\n        });\n    };\n    ContainerBlot.prototype.optimize = function (context) {\n        _super.prototype.optimize.call(this, context);\n        if (this.children.length === 0) {\n            if (this.statics.defaultChild != null) {\n                var child = Registry.create(this.statics.defaultChild);\n                this.appendChild(child);\n                child.optimize(context);\n            }\n            else {\n                this.remove();\n            }\n        }\n    };\n    ContainerBlot.prototype.path = function (index, inclusive) {\n        if (inclusive === void 0) { inclusive = false; }\n        var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];\n        var position = [[this, index]];\n        if (child instanceof ContainerBlot) {\n            return position.concat(child.path(offset, inclusive));\n        }\n        else if (child != null) {\n            position.push([child, offset]);\n        }\n        return position;\n    };\n    ContainerBlot.prototype.removeChild = function (child) {\n        this.children.remove(child);\n    };\n    ContainerBlot.prototype.replace = function (target) {\n        if (target instanceof ContainerBlot) {\n            target.moveChildren(this);\n        }\n        _super.prototype.replace.call(this, target);\n    };\n    ContainerBlot.prototype.split = function (index, force) {\n        if (force === void 0) { force = false; }\n        if (!force) {\n            if (index === 0)\n                return this;\n            if (index === this.length())\n                return this.next;\n        }\n        var after = this.clone();\n        this.parent.insertBefore(after, this.next);\n        this.children.forEachAt(index, this.length(), function (child, offset, length) {\n            child = child.split(offset, force);\n            after.appendChild(child);\n        });\n        return after;\n    };\n    ContainerBlot.prototype.unwrap = function () {\n        this.moveChildren(this.parent, this.next);\n        this.remove();\n    };\n    ContainerBlot.prototype.update = function (mutations, context) {\n        var _this = this;\n        var addedNodes = [];\n        var removedNodes = [];\n        mutations.forEach(function (mutation) {\n            if (mutation.target === _this.domNode && mutation.type === 'childList') {\n                addedNodes.push.apply(addedNodes, mutation.addedNodes);\n                removedNodes.push.apply(removedNodes, mutation.removedNodes);\n            }\n        });\n        removedNodes.forEach(function (node) {\n            // Check node has actually been removed\n            // One exception is Chrome does not immediately remove IFRAMEs\n            // from DOM but MutationRecord is correct in its reported removal\n            if (node.parentNode != null &&\n                // @ts-ignore\n                node.tagName !== 'IFRAME' &&\n                document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n                return;\n            }\n            var blot = Registry.find(node);\n            if (blot == null)\n                return;\n            if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {\n                blot.detach();\n            }\n        });\n        addedNodes\n            .filter(function (node) {\n            return node.parentNode == _this.domNode;\n        })\n            .sort(function (a, b) {\n            if (a === b)\n                return 0;\n            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {\n                return 1;\n            }\n            return -1;\n        })\n            .forEach(function (node) {\n            var refBlot = null;\n            if (node.nextSibling != null) {\n                refBlot = Registry.find(node.nextSibling);\n            }\n            var blot = makeBlot(node);\n            if (blot.next != refBlot || blot.next == null) {\n                if (blot.parent != null) {\n                    blot.parent.removeChild(_this);\n                }\n                _this.insertBefore(blot, refBlot || undefined);\n            }\n        });\n    };\n    return ContainerBlot;\n}(shadow_1.default));\nfunction makeBlot(node) {\n    var blot = Registry.find(node);\n    if (blot == null) {\n        try {\n            blot = Registry.create(node);\n        }\n        catch (e) {\n            blot = Registry.create(Registry.Scope.INLINE);\n            [].slice.call(node.childNodes).forEach(function (child) {\n                // @ts-ignore\n                blot.domNode.appendChild(child);\n            });\n            if (node.parentNode) {\n                node.parentNode.replaceChild(blot.domNode, node);\n            }\n            blot.attach();\n        }\n    }\n    return blot;\n}\nexports.default = ContainerBlot;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __nested_webpack_require_295340__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar attributor_1 = __nested_webpack_require_295340__(12);\nvar store_1 = __nested_webpack_require_295340__(31);\nvar container_1 = __nested_webpack_require_295340__(17);\nvar Registry = __nested_webpack_require_295340__(1);\nvar FormatBlot = /** @class */ (function (_super) {\n    __extends(FormatBlot, _super);\n    function FormatBlot(domNode) {\n        var _this = _super.call(this, domNode) || this;\n        _this.attributes = new store_1.default(_this.domNode);\n        return _this;\n    }\n    FormatBlot.formats = function (domNode) {\n        if (typeof this.tagName === 'string') {\n            return true;\n        }\n        else if (Array.isArray(this.tagName)) {\n            return domNode.tagName.toLowerCase();\n        }\n        return undefined;\n    };\n    FormatBlot.prototype.format = function (name, value) {\n        var format = Registry.query(name);\n        if (format instanceof attributor_1.default) {\n            this.attributes.attribute(format, value);\n        }\n        else if (value) {\n            if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {\n                this.replaceWith(name, value);\n            }\n        }\n    };\n    FormatBlot.prototype.formats = function () {\n        var formats = this.attributes.values();\n        var format = this.statics.formats(this.domNode);\n        if (format != null) {\n            formats[this.statics.blotName] = format;\n        }\n        return formats;\n    };\n    FormatBlot.prototype.replaceWith = function (name, value) {\n        var replacement = _super.prototype.replaceWith.call(this, name, value);\n        this.attributes.copy(replacement);\n        return replacement;\n    };\n    FormatBlot.prototype.update = function (mutations, context) {\n        var _this = this;\n        _super.prototype.update.call(this, mutations, context);\n        if (mutations.some(function (mutation) {\n            return mutation.target === _this.domNode && mutation.type === 'attributes';\n        })) {\n            this.attributes.build();\n        }\n    };\n    FormatBlot.prototype.wrap = function (name, value) {\n        var wrapper = _super.prototype.wrap.call(this, name, value);\n        if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {\n            this.attributes.move(wrapper);\n        }\n        return wrapper;\n    };\n    return FormatBlot;\n}(container_1.default));\nexports.default = FormatBlot;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __nested_webpack_require_298363__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shadow_1 = __nested_webpack_require_298363__(30);\nvar Registry = __nested_webpack_require_298363__(1);\nvar LeafBlot = /** @class */ (function (_super) {\n    __extends(LeafBlot, _super);\n    function LeafBlot() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LeafBlot.value = function (domNode) {\n        return true;\n    };\n    LeafBlot.prototype.index = function (node, offset) {\n        if (this.domNode === node ||\n            this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            return Math.min(offset, 1);\n        }\n        return -1;\n    };\n    LeafBlot.prototype.position = function (index, inclusive) {\n        var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);\n        if (index > 0)\n            offset += 1;\n        return [this.parent.domNode, offset];\n    };\n    LeafBlot.prototype.value = function () {\n        var _a;\n        return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;\n    };\n    LeafBlot.scope = Registry.Scope.INLINE_BLOT;\n    return LeafBlot;\n}(shadow_1.default));\nexports.default = LeafBlot;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __nested_webpack_require_300150__) {\n\nvar equal = __nested_webpack_require_300150__(11);\nvar extend = __nested_webpack_require_300150__(3);\n\n\nvar lib = {\n  attributes: {\n    compose: function (a, b, keepNull) {\n      if (typeof a !== 'object') a = {};\n      if (typeof b !== 'object') b = {};\n      var attributes = extend(true, {}, b);\n      if (!keepNull) {\n        attributes = Object.keys(attributes).reduce(function (copy, key) {\n          if (attributes[key] != null) {\n            copy[key] = attributes[key];\n          }\n          return copy;\n        }, {});\n      }\n      for (var key in a) {\n        if (a[key] !== undefined && b[key] === undefined) {\n          attributes[key] = a[key];\n        }\n      }\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    },\n\n    diff: function(a, b) {\n      if (typeof a !== 'object') a = {};\n      if (typeof b !== 'object') b = {};\n      var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {\n        if (!equal(a[key], b[key])) {\n          attributes[key] = b[key] === undefined ? null : b[key];\n        }\n        return attributes;\n      }, {});\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    },\n\n    transform: function (a, b, priority) {\n      if (typeof a !== 'object') return b;\n      if (typeof b !== 'object') return undefined;\n      if (!priority) return b;  // b simply overwrites us without priority\n      var attributes = Object.keys(b).reduce(function (attributes, key) {\n        if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value\n        return attributes;\n      }, {});\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    }\n  },\n\n  iterator: function (ops) {\n    return new Iterator(ops);\n  },\n\n  length: function (op) {\n    if (typeof op['delete'] === 'number') {\n      return op['delete'];\n    } else if (typeof op.retain === 'number') {\n      return op.retain;\n    } else {\n      return typeof op.insert === 'string' ? op.insert.length : 1;\n    }\n  }\n};\n\n\nfunction Iterator(ops) {\n  this.ops = ops;\n  this.index = 0;\n  this.offset = 0;\n};\n\nIterator.prototype.hasNext = function () {\n  return this.peekLength() < Infinity;\n};\n\nIterator.prototype.next = function (length) {\n  if (!length) length = Infinity;\n  var nextOp = this.ops[this.index];\n  if (nextOp) {\n    var offset = this.offset;\n    var opLength = lib.length(nextOp)\n    if (length >= opLength - offset) {\n      length = opLength - offset;\n      this.index += 1;\n      this.offset = 0;\n    } else {\n      this.offset += length;\n    }\n    if (typeof nextOp['delete'] === 'number') {\n      return { 'delete': length };\n    } else {\n      var retOp = {};\n      if (nextOp.attributes) {\n        retOp.attributes = nextOp.attributes;\n      }\n      if (typeof nextOp.retain === 'number') {\n        retOp.retain = length;\n      } else if (typeof nextOp.insert === 'string') {\n        retOp.insert = nextOp.insert.substr(offset, length);\n      } else {\n        // offset should === 0, length should === 1\n        retOp.insert = nextOp.insert;\n      }\n      return retOp;\n    }\n  } else {\n    return { retain: Infinity };\n  }\n};\n\nIterator.prototype.peek = function () {\n  return this.ops[this.index];\n};\n\nIterator.prototype.peekLength = function () {\n  if (this.ops[this.index]) {\n    // Should never return 0 if our index is being managed correctly\n    return lib.length(this.ops[this.index]) - this.offset;\n  } else {\n    return Infinity;\n  }\n};\n\nIterator.prototype.peekType = function () {\n  if (this.ops[this.index]) {\n    if (typeof this.ops[this.index]['delete'] === 'number') {\n      return 'delete';\n    } else if (typeof this.ops[this.index].retain === 'number') {\n      return 'retain';\n    } else {\n      return 'insert';\n    }\n  }\n  return 'retain';\n};\n\nIterator.prototype.rest = function () {\n  if (!this.hasNext()) {\n    return [];\n  } else if (this.offset === 0) {\n    return this.ops.slice(this.index);\n  } else {\n    var offset = this.offset;\n    var index = this.index;\n    var next = this.next();\n    var rest = this.ops.slice(this.index);\n    this.offset = offset;\n    this.index = index;\n    return [next].concat(rest);\n  }\n};\n\n\nmodule.exports = lib;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\nvar clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __nested_webpack_require_311749__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_311749__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _emitter = __nested_webpack_require_311749__(8);\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _block = __nested_webpack_require_311749__(4);\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _break = __nested_webpack_require_311749__(16);\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _code = __nested_webpack_require_311749__(13);\n\nvar _code2 = _interopRequireDefault(_code);\n\nvar _container = __nested_webpack_require_311749__(25);\n\nvar _container2 = _interopRequireDefault(_container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction isLine(blot) {\n  return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;\n}\n\nvar Scroll = function (_Parchment$Scroll) {\n  _inherits(Scroll, _Parchment$Scroll);\n\n  function Scroll(domNode, config) {\n    _classCallCheck(this, Scroll);\n\n    var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));\n\n    _this.emitter = config.emitter;\n    if (Array.isArray(config.whitelist)) {\n      _this.whitelist = config.whitelist.reduce(function (whitelist, format) {\n        whitelist[format] = true;\n        return whitelist;\n      }, {});\n    }\n    // Some reason fixes composition issues with character languages in Windows/Chrome, Safari\n    _this.domNode.addEventListener('DOMNodeInserted', function () {});\n    _this.optimize();\n    _this.enable();\n    return _this;\n  }\n\n  _createClass(Scroll, [{\n    key: 'batchStart',\n    value: function batchStart() {\n      this.batch = true;\n    }\n  }, {\n    key: 'batchEnd',\n    value: function batchEnd() {\n      this.batch = false;\n      this.optimize();\n    }\n  }, {\n    key: 'deleteAt',\n    value: function deleteAt(index, length) {\n      var _line = this.line(index),\n          _line2 = _slicedToArray(_line, 2),\n          first = _line2[0],\n          offset = _line2[1];\n\n      var _line3 = this.line(index + length),\n          _line4 = _slicedToArray(_line3, 1),\n          last = _line4[0];\n\n      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);\n      if (last != null && first !== last && offset > 0) {\n        if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {\n          this.optimize();\n          return;\n        }\n        if (first instanceof _code2.default) {\n          var newlineIndex = first.newlineIndex(first.length(), true);\n          if (newlineIndex > -1) {\n            first = first.split(newlineIndex + 1);\n            if (first === last) {\n              this.optimize();\n              return;\n            }\n          }\n        } else if (last instanceof _code2.default) {\n          var _newlineIndex = last.newlineIndex(0);\n          if (_newlineIndex > -1) {\n            last.split(_newlineIndex + 1);\n          }\n        }\n        var ref = last.children.head instanceof _break2.default ? null : last.children.head;\n        first.moveChildren(last, ref);\n        first.remove();\n      }\n      this.optimize();\n    }\n  }, {\n    key: 'enable',\n    value: function enable() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      this.domNode.setAttribute('contenteditable', enabled);\n    }\n  }, {\n    key: 'formatAt',\n    value: function formatAt(index, length, format, value) {\n      if (this.whitelist != null && !this.whitelist[format]) return;\n      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);\n      this.optimize();\n    }\n  }, {\n    key: 'insertAt',\n    value: function insertAt(index, value, def) {\n      if (def != null && this.whitelist != null && !this.whitelist[value]) return;\n      if (index >= this.length()) {\n        if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {\n          var blot = _parchment2.default.create(this.statics.defaultChild);\n          this.appendChild(blot);\n          if (def == null && value.endsWith('\\n')) {\n            value = value.slice(0, -1);\n          }\n          blot.insertAt(0, value, def);\n        } else {\n          var embed = _parchment2.default.create(value, def);\n          this.appendChild(embed);\n        }\n      } else {\n        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);\n      }\n      this.optimize();\n    }\n  }, {\n    key: 'insertBefore',\n    value: function insertBefore(blot, ref) {\n      if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {\n        var wrapper = _parchment2.default.create(this.statics.defaultChild);\n        wrapper.appendChild(blot);\n        blot = wrapper;\n      }\n      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);\n    }\n  }, {\n    key: 'leaf',\n    value: function leaf(index) {\n      return this.path(index).pop() || [null, -1];\n    }\n  }, {\n    key: 'line',\n    value: function line(index) {\n      if (index === this.length()) {\n        return this.line(index - 1);\n      }\n      return this.descendant(isLine, index);\n    }\n  }, {\n    key: 'lines',\n    value: function lines() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n\n      var getLines = function getLines(blot, index, length) {\n        var lines = [],\n            lengthLeft = length;\n        blot.children.forEachAt(index, length, function (child, index, length) {\n          if (isLine(child)) {\n            lines.push(child);\n          } else if (child instanceof _parchment2.default.Container) {\n            lines = lines.concat(getLines(child, index, lengthLeft));\n          }\n          lengthLeft -= length;\n        });\n        return lines;\n      };\n      return getLines(this, index, length);\n    }\n  }, {\n    key: 'optimize',\n    value: function optimize() {\n      var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.batch === true) return;\n      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);\n      if (mutations.length > 0) {\n        this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);\n      }\n    }\n  }, {\n    key: 'path',\n    value: function path(index) {\n      return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self\n    }\n  }, {\n    key: 'update',\n    value: function update(mutations) {\n      if (this.batch === true) return;\n      var source = _emitter2.default.sources.USER;\n      if (typeof mutations === 'string') {\n        source = mutations;\n      }\n      if (!Array.isArray(mutations)) {\n        mutations = this.observer.takeRecords();\n      }\n      if (mutations.length > 0) {\n        this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);\n      }\n      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy\n      if (mutations.length > 0) {\n        this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);\n      }\n    }\n  }]);\n\n  return Scroll;\n}(_parchment2.default.Scroll);\n\nScroll.blotName = 'scroll';\nScroll.className = 'ql-editor';\nScroll.tagName = 'DIV';\nScroll.defaultChild = 'block';\nScroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];\n\nexports.default = Scroll;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __nested_webpack_require_322363__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SHORTKEY = exports.default = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clone = __nested_webpack_require_322363__(21);\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _deepEqual = __nested_webpack_require_322363__(11);\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _extend = __nested_webpack_require_322363__(3);\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _quillDelta = __nested_webpack_require_322363__(2);\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _op = __nested_webpack_require_322363__(20);\n\nvar _op2 = _interopRequireDefault(_op);\n\nvar _parchment = __nested_webpack_require_322363__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _quill = __nested_webpack_require_322363__(5);\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _logger = __nested_webpack_require_322363__(10);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _module = __nested_webpack_require_322363__(9);\n\nvar _module2 = _interopRequireDefault(_module);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar debug = (0, _logger2.default)('quill:keyboard');\n\nvar SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';\n\nvar Keyboard = function (_Module) {\n  _inherits(Keyboard, _Module);\n\n  _createClass(Keyboard, null, [{\n    key: 'match',\n    value: function match(evt, binding) {\n      binding = normalize(binding);\n      if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {\n        return !!binding[key] !== evt[key] && binding[key] !== null;\n      })) {\n        return false;\n      }\n      return binding.key === (evt.which || evt.keyCode);\n    }\n  }]);\n\n  function Keyboard(quill, options) {\n    _classCallCheck(this, Keyboard);\n\n    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));\n\n    _this.bindings = {};\n    Object.keys(_this.options.bindings).forEach(function (name) {\n      if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {\n        return;\n      }\n      if (_this.options.bindings[name]) {\n        _this.addBinding(_this.options.bindings[name]);\n      }\n    });\n    _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);\n    _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});\n    if (/Firefox/i.test(navigator.userAgent)) {\n      // Need to handle delete and backspace for Firefox in the general case #1171\n      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);\n      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);\n    } else {\n      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);\n      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);\n    }\n    _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);\n    _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);\n    _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);\n    _this.listen();\n    return _this;\n  }\n\n  _createClass(Keyboard, [{\n    key: 'addBinding',\n    value: function addBinding(key) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var binding = normalize(key);\n      if (binding == null || binding.key == null) {\n        return debug.warn('Attempted to add invalid keyboard binding', binding);\n      }\n      if (typeof context === 'function') {\n        context = { handler: context };\n      }\n      if (typeof handler === 'function') {\n        handler = { handler: handler };\n      }\n      binding = (0, _extend2.default)(binding, context, handler);\n      this.bindings[binding.key] = this.bindings[binding.key] || [];\n      this.bindings[binding.key].push(binding);\n    }\n  }, {\n    key: 'listen',\n    value: function listen() {\n      var _this2 = this;\n\n      this.quill.root.addEventListener('keydown', function (evt) {\n        if (evt.defaultPrevented) return;\n        var which = evt.which || evt.keyCode;\n        var bindings = (_this2.bindings[which] || []).filter(function (binding) {\n          return Keyboard.match(evt, binding);\n        });\n        if (bindings.length === 0) return;\n        var range = _this2.quill.getSelection();\n        if (range == null || !_this2.quill.hasFocus()) return;\n\n        var _quill$getLine = _this2.quill.getLine(range.index),\n            _quill$getLine2 = _slicedToArray(_quill$getLine, 2),\n            line = _quill$getLine2[0],\n            offset = _quill$getLine2[1];\n\n        var _quill$getLeaf = _this2.quill.getLeaf(range.index),\n            _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),\n            leafStart = _quill$getLeaf2[0],\n            offsetStart = _quill$getLeaf2[1];\n\n        var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),\n            _ref2 = _slicedToArray(_ref, 2),\n            leafEnd = _ref2[0],\n            offsetEnd = _ref2[1];\n\n        var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';\n        var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';\n        var curContext = {\n          collapsed: range.length === 0,\n          empty: range.length === 0 && line.length() <= 1,\n          format: _this2.quill.getFormat(range),\n          offset: offset,\n          prefix: prefixText,\n          suffix: suffixText\n        };\n        var prevented = bindings.some(function (binding) {\n          if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;\n          if (binding.empty != null && binding.empty !== curContext.empty) return false;\n          if (binding.offset != null && binding.offset !== curContext.offset) return false;\n          if (Array.isArray(binding.format)) {\n            // any format is present\n            if (binding.format.every(function (name) {\n              return curContext.format[name] == null;\n            })) {\n              return false;\n            }\n          } else if (_typeof(binding.format) === 'object') {\n            // all formats must match\n            if (!Object.keys(binding.format).every(function (name) {\n              if (binding.format[name] === true) return curContext.format[name] != null;\n              if (binding.format[name] === false) return curContext.format[name] == null;\n              return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);\n            })) {\n              return false;\n            }\n          }\n          if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;\n          if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;\n          return binding.handler.call(_this2, range, curContext) !== true;\n        });\n        if (prevented) {\n          evt.preventDefault();\n        }\n      });\n    }\n  }]);\n\n  return Keyboard;\n}(_module2.default);\n\nKeyboard.keys = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  ESCAPE: 27,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  DELETE: 46\n};\n\nKeyboard.DEFAULTS = {\n  bindings: {\n    'bold': makeFormatHandler('bold'),\n    'italic': makeFormatHandler('italic'),\n    'underline': makeFormatHandler('underline'),\n    'indent': {\n      // highlight tab or tab at beginning of list, indent or blockquote\n      key: Keyboard.keys.TAB,\n      format: ['blockquote', 'indent', 'list'],\n      handler: function handler(range, context) {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '+1', _quill2.default.sources.USER);\n      }\n    },\n    'outdent': {\n      key: Keyboard.keys.TAB,\n      shiftKey: true,\n      format: ['blockquote', 'indent', 'list'],\n      // highlight tab or tab at beginning of list, indent or blockquote\n      handler: function handler(range, context) {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '-1', _quill2.default.sources.USER);\n      }\n    },\n    'outdent backspace': {\n      key: Keyboard.keys.BACKSPACE,\n      collapsed: true,\n      shiftKey: null,\n      metaKey: null,\n      ctrlKey: null,\n      altKey: null,\n      format: ['indent', 'list'],\n      offset: 0,\n      handler: function handler(range, context) {\n        if (context.format.indent != null) {\n          this.quill.format('indent', '-1', _quill2.default.sources.USER);\n        } else if (context.format.list != null) {\n          this.quill.format('list', false, _quill2.default.sources.USER);\n        }\n      }\n    },\n    'indent code-block': makeCodeBlockHandler(true),\n    'outdent code-block': makeCodeBlockHandler(false),\n    'remove tab': {\n      key: Keyboard.keys.TAB,\n      shiftKey: true,\n      collapsed: true,\n      prefix: /\\t$/,\n      handler: function handler(range) {\n        this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);\n      }\n    },\n    'tab': {\n      key: Keyboard.keys.TAB,\n      handler: function handler(range) {\n        this.quill.history.cutoff();\n        var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\\t');\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n      }\n    },\n    'list empty enter': {\n      key: Keyboard.keys.ENTER,\n      collapsed: true,\n      format: ['list'],\n      empty: true,\n      handler: function handler(range, context) {\n        this.quill.format('list', false, _quill2.default.sources.USER);\n        if (context.format.indent) {\n          this.quill.format('indent', false, _quill2.default.sources.USER);\n        }\n      }\n    },\n    'checklist enter': {\n      key: Keyboard.keys.ENTER,\n      collapsed: true,\n      format: { list: 'checked' },\n      handler: function handler(range) {\n        var _quill$getLine3 = this.quill.getLine(range.index),\n            _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),\n            line = _quill$getLine4[0],\n            offset = _quill$getLine4[1];\n\n        var formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });\n        var delta = new _quillDelta2.default().retain(range.index).insert('\\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n        this.quill.scrollIntoView();\n      }\n    },\n    'header enter': {\n      key: Keyboard.keys.ENTER,\n      collapsed: true,\n      format: ['header'],\n      suffix: /^$/,\n      handler: function handler(range, context) {\n        var _quill$getLine5 = this.quill.getLine(range.index),\n            _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),\n            line = _quill$getLine6[0],\n            offset = _quill$getLine6[1];\n\n        var delta = new _quillDelta2.default().retain(range.index).insert('\\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n        this.quill.scrollIntoView();\n      }\n    },\n    'list autofill': {\n      key: ' ',\n      collapsed: true,\n      format: { list: false },\n      prefix: /^\\s*?(\\d+\\.|-|\\*|\\[ ?\\]|\\[x\\])$/,\n      handler: function handler(range, context) {\n        var length = context.prefix.length;\n\n        var _quill$getLine7 = this.quill.getLine(range.index),\n            _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),\n            line = _quill$getLine8[0],\n            offset = _quill$getLine8[1];\n\n        if (offset > length) return true;\n        var value = void 0;\n        switch (context.prefix.trim()) {\n          case '[]':case '[ ]':\n            value = 'unchecked';\n            break;\n          case '[x]':\n            value = 'checked';\n            break;\n          case '-':case '*':\n            value = 'bullet';\n            break;\n          default:\n            value = 'ordered';\n        }\n        this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);\n        this.quill.history.cutoff();\n        var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);\n      }\n    },\n    'code exit': {\n      key: Keyboard.keys.ENTER,\n      collapsed: true,\n      format: ['code-block'],\n      prefix: /\\n\\n$/,\n      suffix: /^\\s+$/,\n      handler: function handler(range) {\n        var _quill$getLine9 = this.quill.getLine(range.index),\n            _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),\n            line = _quill$getLine10[0],\n            offset = _quill$getLine10[1];\n\n        var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n      }\n    },\n    'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),\n    'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),\n    'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),\n    'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)\n  }\n};\n\nfunction makeEmbedArrowHandler(key, shiftKey) {\n  var _ref3;\n\n  var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';\n  return _ref3 = {\n    key: key,\n    shiftKey: shiftKey,\n    altKey: null\n  }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {\n    var index = range.index;\n    if (key === Keyboard.keys.RIGHT) {\n      index += range.length + 1;\n    }\n\n    var _quill$getLeaf3 = this.quill.getLeaf(index),\n        _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),\n        leaf = _quill$getLeaf4[0];\n\n    if (!(leaf instanceof _parchment2.default.Embed)) return true;\n    if (key === Keyboard.keys.LEFT) {\n      if (shiftKey) {\n        this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);\n      } else {\n        this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);\n      }\n    } else {\n      if (shiftKey) {\n        this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);\n      } else {\n        this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);\n      }\n    }\n    return false;\n  }), _ref3;\n}\n\nfunction handleBackspace(range, context) {\n  if (range.index === 0 || this.quill.getLength() <= 1) return;\n\n  var _quill$getLine11 = this.quill.getLine(range.index),\n      _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),\n      line = _quill$getLine12[0];\n\n  var formats = {};\n  if (context.offset === 0) {\n    var _quill$getLine13 = this.quill.getLine(range.index - 1),\n        _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),\n        prev = _quill$getLine14[0];\n\n    if (prev != null && prev.length() > 1) {\n      var curFormats = line.formats();\n      var prevFormats = this.quill.getFormat(range.index - 1, 1);\n      formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};\n    }\n  }\n  // Check for astral symbols\n  var length = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/.test(context.prefix) ? 2 : 1;\n  this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);\n  if (Object.keys(formats).length > 0) {\n    this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);\n  }\n  this.quill.focus();\n}\n\nfunction handleDelete(range, context) {\n  // Check for astral symbols\n  var length = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/.test(context.suffix) ? 2 : 1;\n  if (range.index >= this.quill.getLength() - length) return;\n  var formats = {},\n      nextLength = 0;\n\n  var _quill$getLine15 = this.quill.getLine(range.index),\n      _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),\n      line = _quill$getLine16[0];\n\n  if (context.offset >= line.length() - 1) {\n    var _quill$getLine17 = this.quill.getLine(range.index + 1),\n        _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),\n        next = _quill$getLine18[0];\n\n    if (next) {\n      var curFormats = line.formats();\n      var nextFormats = this.quill.getFormat(range.index, 1);\n      formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};\n      nextLength = next.length();\n    }\n  }\n  this.quill.deleteText(range.index, length, _quill2.default.sources.USER);\n  if (Object.keys(formats).length > 0) {\n    this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);\n  }\n}\n\nfunction handleDeleteRange(range) {\n  var lines = this.quill.getLines(range);\n  var formats = {};\n  if (lines.length > 1) {\n    var firstFormats = lines[0].formats();\n    var lastFormats = lines[lines.length - 1].formats();\n    formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};\n  }\n  this.quill.deleteText(range, _quill2.default.sources.USER);\n  if (Object.keys(formats).length > 0) {\n    this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);\n  }\n  this.quill.setSelection(range.index, _quill2.default.sources.SILENT);\n  this.quill.focus();\n}\n\nfunction handleEnter(range, context) {\n  var _this3 = this;\n\n  if (range.length > 0) {\n    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change\n  }\n  var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {\n    if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {\n      lineFormats[format] = context.format[format];\n    }\n    return lineFormats;\n  }, {});\n  this.quill.insertText(range.index, '\\n', lineFormats, _quill2.default.sources.USER);\n  // Earlier scroll.deleteAt might have messed up our selection,\n  // so insertText's built in selection preservation is not reliable\n  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n  this.quill.focus();\n  Object.keys(context.format).forEach(function (name) {\n    if (lineFormats[name] != null) return;\n    if (Array.isArray(context.format[name])) return;\n    if (name === 'link') return;\n    _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);\n  });\n}\n\nfunction makeCodeBlockHandler(indent) {\n  return {\n    key: Keyboard.keys.TAB,\n    shiftKey: !indent,\n    format: { 'code-block': true },\n    handler: function handler(range) {\n      var CodeBlock = _parchment2.default.query('code-block');\n      var index = range.index,\n          length = range.length;\n\n      var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),\n          _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),\n          block = _quill$scroll$descend2[0],\n          offset = _quill$scroll$descend2[1];\n\n      if (block == null) return;\n      var scrollIndex = this.quill.getIndex(block);\n      var start = block.newlineIndex(offset, true) + 1;\n      var end = block.newlineIndex(scrollIndex + offset + length);\n      var lines = block.domNode.textContent.slice(start, end).split('\\n');\n      offset = 0;\n      lines.forEach(function (line, i) {\n        if (indent) {\n          block.insertAt(start + offset, CodeBlock.TAB);\n          offset += CodeBlock.TAB.length;\n          if (i === 0) {\n            index += CodeBlock.TAB.length;\n          } else {\n            length += CodeBlock.TAB.length;\n          }\n        } else if (line.startsWith(CodeBlock.TAB)) {\n          block.deleteAt(start + offset, CodeBlock.TAB.length);\n          offset -= CodeBlock.TAB.length;\n          if (i === 0) {\n            index -= CodeBlock.TAB.length;\n          } else {\n            length -= CodeBlock.TAB.length;\n          }\n        }\n        offset += line.length + 1;\n      });\n      this.quill.update(_quill2.default.sources.USER);\n      this.quill.setSelection(index, length, _quill2.default.sources.SILENT);\n    }\n  };\n}\n\nfunction makeFormatHandler(format) {\n  return {\n    key: format[0].toUpperCase(),\n    shortKey: true,\n    handler: function handler(range, context) {\n      this.quill.format(format, !context.format[format], _quill2.default.sources.USER);\n    }\n  };\n}\n\nfunction normalize(binding) {\n  if (typeof binding === 'string' || typeof binding === 'number') {\n    return normalize({ key: binding });\n  }\n  if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {\n    binding = (0, _clone2.default)(binding, false);\n  }\n  if (typeof binding.key === 'string') {\n    if (Keyboard.keys[binding.key.toUpperCase()] != null) {\n      binding.key = Keyboard.keys[binding.key.toUpperCase()];\n    } else if (binding.key.length === 1) {\n      binding.key = binding.key.toUpperCase().charCodeAt(0);\n    } else {\n      return null;\n    }\n  }\n  if (binding.shortKey) {\n    binding[SHORTKEY] = binding.shortKey;\n    delete binding.shortKey;\n  }\n  return binding;\n}\n\nexports.default = Keyboard;\nexports.SHORTKEY = SHORTKEY;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __nested_webpack_require_346706__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _parchment = __nested_webpack_require_346706__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _text = __nested_webpack_require_346706__(7);\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Cursor = function (_Parchment$Embed) {\n  _inherits(Cursor, _Parchment$Embed);\n\n  _createClass(Cursor, null, [{\n    key: 'value',\n    value: function value() {\n      return undefined;\n    }\n  }]);\n\n  function Cursor(domNode, selection) {\n    _classCallCheck(this, Cursor);\n\n    var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));\n\n    _this.selection = selection;\n    _this.textNode = document.createTextNode(Cursor.CONTENTS);\n    _this.domNode.appendChild(_this.textNode);\n    _this._length = 0;\n    return _this;\n  }\n\n  _createClass(Cursor, [{\n    key: 'detach',\n    value: function detach() {\n      // super.detach() will also clear domNode.__blot\n      if (this.parent != null) this.parent.removeChild(this);\n    }\n  }, {\n    key: 'format',\n    value: function format(name, value) {\n      if (this._length !== 0) {\n        return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);\n      }\n      var target = this,\n          index = 0;\n      while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {\n        index += target.offset(target.parent);\n        target = target.parent;\n      }\n      if (target != null) {\n        this._length = Cursor.CONTENTS.length;\n        target.optimize();\n        target.formatAt(index, Cursor.CONTENTS.length, name, value);\n        this._length = 0;\n      }\n    }\n  }, {\n    key: 'index',\n    value: function index(node, offset) {\n      if (node === this.textNode) return 0;\n      return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);\n    }\n  }, {\n    key: 'length',\n    value: function length() {\n      return this._length;\n    }\n  }, {\n    key: 'position',\n    value: function position() {\n      return [this.textNode, this.textNode.data.length];\n    }\n  }, {\n    key: 'remove',\n    value: function remove() {\n      _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);\n      this.parent = null;\n    }\n  }, {\n    key: 'restore',\n    value: function restore() {\n      if (this.selection.composing || this.parent == null) return;\n      var textNode = this.textNode;\n      var range = this.selection.getNativeRange();\n      var restoreText = void 0,\n          start = void 0,\n          end = void 0;\n      if (range != null && range.start.node === textNode && range.end.node === textNode) {\n        var _ref = [textNode, range.start.offset, range.end.offset];\n        restoreText = _ref[0];\n        start = _ref[1];\n        end = _ref[2];\n      }\n      // Link format will insert text outside of anchor tag\n      while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {\n        this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);\n      }\n      if (this.textNode.data !== Cursor.CONTENTS) {\n        var text = this.textNode.data.split(Cursor.CONTENTS).join('');\n        if (this.next instanceof _text2.default) {\n          restoreText = this.next.domNode;\n          this.next.insertAt(0, text);\n          this.textNode.data = Cursor.CONTENTS;\n        } else {\n          this.textNode.data = text;\n          this.parent.insertBefore(_parchment2.default.create(this.textNode), this);\n          this.textNode = document.createTextNode(Cursor.CONTENTS);\n          this.domNode.appendChild(this.textNode);\n        }\n      }\n      this.remove();\n      if (start != null) {\n        var _map = [start, end].map(function (offset) {\n          return Math.max(0, Math.min(restoreText.data.length, offset - 1));\n        });\n\n        var _map2 = _slicedToArray(_map, 2);\n\n        start = _map2[0];\n        end = _map2[1];\n\n        return {\n          startNode: restoreText,\n          startOffset: start,\n          endNode: restoreText,\n          endOffset: end\n        };\n      }\n    }\n  }, {\n    key: 'update',\n    value: function update(mutations, context) {\n      var _this2 = this;\n\n      if (mutations.some(function (mutation) {\n        return mutation.type === 'characterData' && mutation.target === _this2.textNode;\n      })) {\n        var range = this.restore();\n        if (range) context.range = range;\n      }\n    }\n  }, {\n    key: 'value',\n    value: function value() {\n      return '';\n    }\n  }]);\n\n  return Cursor;\n}(_parchment2.default.Embed);\n\nCursor.blotName = 'cursor';\nCursor.className = 'ql-cursor';\nCursor.tagName = 'span';\nCursor.CONTENTS = '\\uFEFF'; // Zero width no break space\n\n\nexports.default = Cursor;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __nested_webpack_require_354352__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __nested_webpack_require_354352__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _block = __nested_webpack_require_354352__(4);\n\nvar _block2 = _interopRequireDefault(_block);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Container = function (_Parchment$Container) {\n  _inherits(Container, _Parchment$Container);\n\n  function Container() {\n    _classCallCheck(this, Container);\n\n    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));\n  }\n\n  return Container;\n}(_parchment2.default.Container);\n\nContainer.allowedChildren = [_block2.default, _block.BlockEmbed, Container];\n\nexports.default = Container;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __nested_webpack_require_356138__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_356138__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ColorAttributor = function (_Parchment$Attributor) {\n  _inherits(ColorAttributor, _Parchment$Attributor);\n\n  function ColorAttributor() {\n    _classCallCheck(this, ColorAttributor);\n\n    return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));\n  }\n\n  _createClass(ColorAttributor, [{\n    key: 'value',\n    value: function value(domNode) {\n      var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);\n      if (!value.startsWith('rgb(')) return value;\n      value = value.replace(/^[^\\d]+/, '').replace(/[^\\d]+$/, '');\n      return '#' + value.split(',').map(function (component) {\n        return ('00' + parseInt(component).toString(16)).slice(-2);\n      }).join('');\n    }\n  }]);\n\n  return ColorAttributor;\n}(_parchment2.default.Attributor.Style);\n\nvar ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {\n  scope: _parchment2.default.Scope.INLINE\n});\nvar ColorStyle = new ColorAttributor('color', 'color', {\n  scope: _parchment2.default.Scope.INLINE\n});\n\nexports.ColorAttributor = ColorAttributor;\nexports.ColorClass = ColorClass;\nexports.ColorStyle = ColorStyle;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __nested_webpack_require_359781__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sanitize = exports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _inline = __nested_webpack_require_359781__(6);\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Link = function (_Inline) {\n  _inherits(Link, _Inline);\n\n  function Link() {\n    _classCallCheck(this, Link);\n\n    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));\n  }\n\n  _createClass(Link, [{\n    key: 'format',\n    value: function format(name, value) {\n      if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);\n      value = this.constructor.sanitize(value);\n      this.domNode.setAttribute('href', value);\n    }\n  }], [{\n    key: 'create',\n    value: function create(value) {\n      var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);\n      value = this.sanitize(value);\n      node.setAttribute('href', value);\n      node.setAttribute('rel', 'noopener noreferrer');\n      node.setAttribute('target', '_blank');\n      return node;\n    }\n  }, {\n    key: 'formats',\n    value: function formats(domNode) {\n      return domNode.getAttribute('href');\n    }\n  }, {\n    key: 'sanitize',\n    value: function sanitize(url) {\n      return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n    }\n  }]);\n\n  return Link;\n}(_inline2.default);\n\nLink.blotName = 'link';\nLink.tagName = 'A';\nLink.SANITIZED_URL = 'about:blank';\nLink.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];\n\nfunction _sanitize(url, protocols) {\n  var anchor = document.createElement('a');\n  anchor.href = url;\n  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n  return protocols.indexOf(protocol) > -1;\n}\n\nexports.default = Link;\nexports.sanitize = _sanitize;\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __nested_webpack_require_363811__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _keyboard = __nested_webpack_require_363811__(23);\n\nvar _keyboard2 = _interopRequireDefault(_keyboard);\n\nvar _dropdown = __nested_webpack_require_363811__(107);\n\nvar _dropdown2 = _interopRequireDefault(_dropdown);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar optionsCounter = 0;\n\nfunction toggleAriaAttribute(element, attribute) {\n  element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));\n}\n\nvar Picker = function () {\n  function Picker(select) {\n    var _this = this;\n\n    _classCallCheck(this, Picker);\n\n    this.select = select;\n    this.container = document.createElement('span');\n    this.buildPicker();\n    this.select.style.display = 'none';\n    this.select.parentNode.insertBefore(this.container, this.select);\n\n    this.label.addEventListener('mousedown', function () {\n      _this.togglePicker();\n    });\n    this.label.addEventListener('keydown', function (event) {\n      switch (event.keyCode) {\n        // Allows the \"Enter\" key to open the picker\n        case _keyboard2.default.keys.ENTER:\n          _this.togglePicker();\n          break;\n\n        // Allows the \"Escape\" key to close the picker\n        case _keyboard2.default.keys.ESCAPE:\n          _this.escape();\n          event.preventDefault();\n          break;\n        default:\n      }\n    });\n    this.select.addEventListener('change', this.update.bind(this));\n  }\n\n  _createClass(Picker, [{\n    key: 'togglePicker',\n    value: function togglePicker() {\n      this.container.classList.toggle('ql-expanded');\n      // Toggle aria-expanded and aria-hidden to make the picker accessible\n      toggleAriaAttribute(this.label, 'aria-expanded');\n      toggleAriaAttribute(this.options, 'aria-hidden');\n    }\n  }, {\n    key: 'buildItem',\n    value: function buildItem(option) {\n      var _this2 = this;\n\n      var item = document.createElement('span');\n      item.tabIndex = '0';\n      item.setAttribute('role', 'button');\n\n      item.classList.add('ql-picker-item');\n      if (option.hasAttribute('value')) {\n        item.setAttribute('data-value', option.getAttribute('value'));\n      }\n      if (option.textContent) {\n        item.setAttribute('data-label', option.textContent);\n      }\n      item.addEventListener('click', function () {\n        _this2.selectItem(item, true);\n      });\n      item.addEventListener('keydown', function (event) {\n        switch (event.keyCode) {\n          // Allows the \"Enter\" key to select an item\n          case _keyboard2.default.keys.ENTER:\n            _this2.selectItem(item, true);\n            event.preventDefault();\n            break;\n\n          // Allows the \"Escape\" key to close the picker\n          case _keyboard2.default.keys.ESCAPE:\n            _this2.escape();\n            event.preventDefault();\n            break;\n          default:\n        }\n      });\n\n      return item;\n    }\n  }, {\n    key: 'buildLabel',\n    value: function buildLabel() {\n      var label = document.createElement('span');\n      label.classList.add('ql-picker-label');\n      label.innerHTML = _dropdown2.default;\n      label.tabIndex = '0';\n      label.setAttribute('role', 'button');\n      label.setAttribute('aria-expanded', 'false');\n      this.container.appendChild(label);\n      return label;\n    }\n  }, {\n    key: 'buildOptions',\n    value: function buildOptions() {\n      var _this3 = this;\n\n      var options = document.createElement('span');\n      options.classList.add('ql-picker-options');\n\n      // Don't want screen readers to read this until options are visible\n      options.setAttribute('aria-hidden', 'true');\n      options.tabIndex = '-1';\n\n      // Need a unique id for aria-controls\n      options.id = 'ql-picker-options-' + optionsCounter;\n      optionsCounter += 1;\n      this.label.setAttribute('aria-controls', options.id);\n\n      this.options = options;\n\n      [].slice.call(this.select.options).forEach(function (option) {\n        var item = _this3.buildItem(option);\n        options.appendChild(item);\n        if (option.selected === true) {\n          _this3.selectItem(item);\n        }\n      });\n      this.container.appendChild(options);\n    }\n  }, {\n    key: 'buildPicker',\n    value: function buildPicker() {\n      var _this4 = this;\n\n      [].slice.call(this.select.attributes).forEach(function (item) {\n        _this4.container.setAttribute(item.name, item.value);\n      });\n      this.container.classList.add('ql-picker');\n      this.label = this.buildLabel();\n      this.buildOptions();\n    }\n  }, {\n    key: 'escape',\n    value: function escape() {\n      var _this5 = this;\n\n      // Close menu and return focus to trigger label\n      this.close();\n      // Need setTimeout for accessibility to ensure that the browser executes\n      // focus on the next process thread and after any DOM content changes\n      setTimeout(function () {\n        return _this5.label.focus();\n      }, 1);\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this.container.classList.remove('ql-expanded');\n      this.label.setAttribute('aria-expanded', 'false');\n      this.options.setAttribute('aria-hidden', 'true');\n    }\n  }, {\n    key: 'selectItem',\n    value: function selectItem(item) {\n      var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var selected = this.container.querySelector('.ql-selected');\n      if (item === selected) return;\n      if (selected != null) {\n        selected.classList.remove('ql-selected');\n      }\n      if (item == null) return;\n      item.classList.add('ql-selected');\n      this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);\n      if (item.hasAttribute('data-value')) {\n        this.label.setAttribute('data-value', item.getAttribute('data-value'));\n      } else {\n        this.label.removeAttribute('data-value');\n      }\n      if (item.hasAttribute('data-label')) {\n        this.label.setAttribute('data-label', item.getAttribute('data-label'));\n      } else {\n        this.label.removeAttribute('data-label');\n      }\n      if (trigger) {\n        if (typeof Event === 'function') {\n          this.select.dispatchEvent(new Event('change'));\n        } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {\n          // IE11\n          var event = document.createEvent('Event');\n          event.initEvent('change', true, true);\n          this.select.dispatchEvent(event);\n        }\n        this.close();\n      }\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      var option = void 0;\n      if (this.select.selectedIndex > -1) {\n        var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];\n        option = this.select.options[this.select.selectedIndex];\n        this.selectItem(item);\n      } else {\n        this.selectItem(null);\n      }\n      var isActive = option != null && option !== this.select.querySelector('option[selected]');\n      this.label.classList.toggle('ql-active', isActive);\n    }\n  }]);\n\n  return Picker;\n}();\n\nexports.default = Picker;\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __nested_webpack_require_372005__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __nested_webpack_require_372005__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _quill = __nested_webpack_require_372005__(5);\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _block = __nested_webpack_require_372005__(4);\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _break = __nested_webpack_require_372005__(16);\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _container = __nested_webpack_require_372005__(25);\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _cursor = __nested_webpack_require_372005__(24);\n\nvar _cursor2 = _interopRequireDefault(_cursor);\n\nvar _embed = __nested_webpack_require_372005__(35);\n\nvar _embed2 = _interopRequireDefault(_embed);\n\nvar _inline = __nested_webpack_require_372005__(6);\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nvar _scroll = __nested_webpack_require_372005__(22);\n\nvar _scroll2 = _interopRequireDefault(_scroll);\n\nvar _text = __nested_webpack_require_372005__(7);\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _clipboard = __nested_webpack_require_372005__(55);\n\nvar _clipboard2 = _interopRequireDefault(_clipboard);\n\nvar _history = __nested_webpack_require_372005__(42);\n\nvar _history2 = _interopRequireDefault(_history);\n\nvar _keyboard = __nested_webpack_require_372005__(23);\n\nvar _keyboard2 = _interopRequireDefault(_keyboard);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_quill2.default.register({\n  'blots/block': _block2.default,\n  'blots/block/embed': _block.BlockEmbed,\n  'blots/break': _break2.default,\n  'blots/container': _container2.default,\n  'blots/cursor': _cursor2.default,\n  'blots/embed': _embed2.default,\n  'blots/inline': _inline2.default,\n  'blots/scroll': _scroll2.default,\n  'blots/text': _text2.default,\n\n  'modules/clipboard': _clipboard2.default,\n  'modules/history': _history2.default,\n  'modules/keyboard': _keyboard2.default\n});\n\n_parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);\n\nexports.default = _quill2.default;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __nested_webpack_require_374085__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Registry = __nested_webpack_require_374085__(1);\nvar ShadowBlot = /** @class */ (function () {\n    function ShadowBlot(domNode) {\n        this.domNode = domNode;\n        // @ts-ignore\n        this.domNode[Registry.DATA_KEY] = { blot: this };\n    }\n    Object.defineProperty(ShadowBlot.prototype, \"statics\", {\n        // Hack for accessing inherited static methods\n        get: function () {\n            return this.constructor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ShadowBlot.create = function (value) {\n        if (this.tagName == null) {\n            throw new Registry.ParchmentError('Blot definition missing tagName');\n        }\n        var node;\n        if (Array.isArray(this.tagName)) {\n            if (typeof value === 'string') {\n                value = value.toUpperCase();\n                if (parseInt(value).toString() === value) {\n                    value = parseInt(value);\n                }\n            }\n            if (typeof value === 'number') {\n                node = document.createElement(this.tagName[value - 1]);\n            }\n            else if (this.tagName.indexOf(value) > -1) {\n                node = document.createElement(value);\n            }\n            else {\n                node = document.createElement(this.tagName[0]);\n            }\n        }\n        else {\n            node = document.createElement(this.tagName);\n        }\n        if (this.className) {\n            node.classList.add(this.className);\n        }\n        return node;\n    };\n    ShadowBlot.prototype.attach = function () {\n        if (this.parent != null) {\n            this.scroll = this.parent.scroll;\n        }\n    };\n    ShadowBlot.prototype.clone = function () {\n        var domNode = this.domNode.cloneNode(false);\n        return Registry.create(domNode);\n    };\n    ShadowBlot.prototype.detach = function () {\n        if (this.parent != null)\n            this.parent.removeChild(this);\n        // @ts-ignore\n        delete this.domNode[Registry.DATA_KEY];\n    };\n    ShadowBlot.prototype.deleteAt = function (index, length) {\n        var blot = this.isolate(index, length);\n        blot.remove();\n    };\n    ShadowBlot.prototype.formatAt = function (index, length, name, value) {\n        var blot = this.isolate(index, length);\n        if (Registry.query(name, Registry.Scope.BLOT) != null && value) {\n            blot.wrap(name, value);\n        }\n        else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {\n            var parent = Registry.create(this.statics.scope);\n            blot.wrap(parent);\n            parent.format(name, value);\n        }\n    };\n    ShadowBlot.prototype.insertAt = function (index, value, def) {\n        var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);\n        var ref = this.split(index);\n        this.parent.insertBefore(blot, ref);\n    };\n    ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {\n        if (refBlot === void 0) { refBlot = null; }\n        if (this.parent != null) {\n            this.parent.children.remove(this);\n        }\n        var refDomNode = null;\n        parentBlot.children.insertBefore(this, refBlot);\n        if (refBlot != null) {\n            refDomNode = refBlot.domNode;\n        }\n        if (this.domNode.parentNode != parentBlot.domNode ||\n            this.domNode.nextSibling != refDomNode) {\n            parentBlot.domNode.insertBefore(this.domNode, refDomNode);\n        }\n        this.parent = parentBlot;\n        this.attach();\n    };\n    ShadowBlot.prototype.isolate = function (index, length) {\n        var target = this.split(index);\n        target.split(length);\n        return target;\n    };\n    ShadowBlot.prototype.length = function () {\n        return 1;\n    };\n    ShadowBlot.prototype.offset = function (root) {\n        if (root === void 0) { root = this.parent; }\n        if (this.parent == null || this == root)\n            return 0;\n        return this.parent.children.offset(this) + this.parent.offset(root);\n    };\n    ShadowBlot.prototype.optimize = function (context) {\n        // TODO clean up once we use WeakMap\n        // @ts-ignore\n        if (this.domNode[Registry.DATA_KEY] != null) {\n            // @ts-ignore\n            delete this.domNode[Registry.DATA_KEY].mutations;\n        }\n    };\n    ShadowBlot.prototype.remove = function () {\n        if (this.domNode.parentNode != null) {\n            this.domNode.parentNode.removeChild(this.domNode);\n        }\n        this.detach();\n    };\n    ShadowBlot.prototype.replace = function (target) {\n        if (target.parent == null)\n            return;\n        target.parent.insertBefore(this, target.next);\n        target.remove();\n    };\n    ShadowBlot.prototype.replaceWith = function (name, value) {\n        var replacement = typeof name === 'string' ? Registry.create(name, value) : name;\n        replacement.replace(this);\n        return replacement;\n    };\n    ShadowBlot.prototype.split = function (index, force) {\n        return index === 0 ? this : this.next;\n    };\n    ShadowBlot.prototype.update = function (mutations, context) {\n        // Nothing to do by default\n    };\n    ShadowBlot.prototype.wrap = function (name, value) {\n        var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;\n        if (this.parent != null) {\n            this.parent.insertBefore(wrapper, this.next);\n        }\n        wrapper.appendChild(this);\n        return wrapper;\n    };\n    ShadowBlot.blotName = 'abstract';\n    return ShadowBlot;\n}());\nexports.default = ShadowBlot;\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __nested_webpack_require_379782__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar attributor_1 = __nested_webpack_require_379782__(12);\nvar class_1 = __nested_webpack_require_379782__(32);\nvar style_1 = __nested_webpack_require_379782__(33);\nvar Registry = __nested_webpack_require_379782__(1);\nvar AttributorStore = /** @class */ (function () {\n    function AttributorStore(domNode) {\n        this.attributes = {};\n        this.domNode = domNode;\n        this.build();\n    }\n    AttributorStore.prototype.attribute = function (attribute, value) {\n        // verb\n        if (value) {\n            if (attribute.add(this.domNode, value)) {\n                if (attribute.value(this.domNode) != null) {\n                    this.attributes[attribute.attrName] = attribute;\n                }\n                else {\n                    delete this.attributes[attribute.attrName];\n                }\n            }\n        }\n        else {\n            attribute.remove(this.domNode);\n            delete this.attributes[attribute.attrName];\n        }\n    };\n    AttributorStore.prototype.build = function () {\n        var _this = this;\n        this.attributes = {};\n        var attributes = attributor_1.default.keys(this.domNode);\n        var classes = class_1.default.keys(this.domNode);\n        var styles = style_1.default.keys(this.domNode);\n        attributes\n            .concat(classes)\n            .concat(styles)\n            .forEach(function (name) {\n            var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);\n            if (attr instanceof attributor_1.default) {\n                _this.attributes[attr.attrName] = attr;\n            }\n        });\n    };\n    AttributorStore.prototype.copy = function (target) {\n        var _this = this;\n        Object.keys(this.attributes).forEach(function (key) {\n            var value = _this.attributes[key].value(_this.domNode);\n            target.format(key, value);\n        });\n    };\n    AttributorStore.prototype.move = function (target) {\n        var _this = this;\n        this.copy(target);\n        Object.keys(this.attributes).forEach(function (key) {\n            _this.attributes[key].remove(_this.domNode);\n        });\n        this.attributes = {};\n    };\n    AttributorStore.prototype.values = function () {\n        var _this = this;\n        return Object.keys(this.attributes).reduce(function (attributes, name) {\n            attributes[name] = _this.attributes[name].value(_this.domNode);\n            return attributes;\n        }, {});\n    };\n    return AttributorStore;\n}());\nexports.default = AttributorStore;\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __nested_webpack_require_382380__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar attributor_1 = __nested_webpack_require_382380__(12);\nfunction match(node, prefix) {\n    var className = node.getAttribute('class') || '';\n    return className.split(/\\s+/).filter(function (name) {\n        return name.indexOf(prefix + \"-\") === 0;\n    });\n}\nvar ClassAttributor = /** @class */ (function (_super) {\n    __extends(ClassAttributor, _super);\n    function ClassAttributor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ClassAttributor.keys = function (node) {\n        return (node.getAttribute('class') || '').split(/\\s+/).map(function (name) {\n            return name\n                .split('-')\n                .slice(0, -1)\n                .join('-');\n        });\n    };\n    ClassAttributor.prototype.add = function (node, value) {\n        if (!this.canAdd(node, value))\n            return false;\n        this.remove(node);\n        node.classList.add(this.keyName + \"-\" + value);\n        return true;\n    };\n    ClassAttributor.prototype.remove = function (node) {\n        var matches = match(node, this.keyName);\n        matches.forEach(function (name) {\n            node.classList.remove(name);\n        });\n        if (node.classList.length === 0) {\n            node.removeAttribute('class');\n        }\n    };\n    ClassAttributor.prototype.value = function (node) {\n        var result = match(node, this.keyName)[0] || '';\n        var value = result.slice(this.keyName.length + 1); // +1 for hyphen\n        return this.canAdd(node, value) ? value : '';\n    };\n    return ClassAttributor;\n}(attributor_1.default));\nexports.default = ClassAttributor;\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __nested_webpack_require_384624__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar attributor_1 = __nested_webpack_require_384624__(12);\nfunction camelize(name) {\n    var parts = name.split('-');\n    var rest = parts\n        .slice(1)\n        .map(function (part) {\n        return part[0].toUpperCase() + part.slice(1);\n    })\n        .join('');\n    return parts[0] + rest;\n}\nvar StyleAttributor = /** @class */ (function (_super) {\n    __extends(StyleAttributor, _super);\n    function StyleAttributor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StyleAttributor.keys = function (node) {\n        return (node.getAttribute('style') || '').split(';').map(function (value) {\n            var arr = value.split(':');\n            return arr[0].trim();\n        });\n    };\n    StyleAttributor.prototype.add = function (node, value) {\n        if (!this.canAdd(node, value))\n            return false;\n        // @ts-ignore\n        node.style[camelize(this.keyName)] = value;\n        return true;\n    };\n    StyleAttributor.prototype.remove = function (node) {\n        // @ts-ignore\n        node.style[camelize(this.keyName)] = '';\n        if (!node.getAttribute('style')) {\n            node.removeAttribute('style');\n        }\n    };\n    StyleAttributor.prototype.value = function (node) {\n        // @ts-ignore\n        var value = node.style[camelize(this.keyName)];\n        return this.canAdd(node, value) ? value : '';\n    };\n    return StyleAttributor;\n}(attributor_1.default));\nexports.default = StyleAttributor;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Theme = function () {\n  function Theme(quill, options) {\n    _classCallCheck(this, Theme);\n\n    this.quill = quill;\n    this.options = options;\n    this.modules = {};\n  }\n\n  _createClass(Theme, [{\n    key: 'init',\n    value: function init() {\n      var _this = this;\n\n      Object.keys(this.options.modules).forEach(function (name) {\n        if (_this.modules[name] == null) {\n          _this.addModule(name);\n        }\n      });\n    }\n  }, {\n    key: 'addModule',\n    value: function addModule(name) {\n      var moduleClass = this.quill.constructor.import('modules/' + name);\n      this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});\n      return this.modules[name];\n    }\n  }]);\n\n  return Theme;\n}();\n\nTheme.DEFAULTS = {\n  modules: {}\n};\nTheme.themes = {\n  'default': Theme\n};\n\nexports.default = Theme;\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __nested_webpack_require_388451__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_388451__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _text = __nested_webpack_require_388451__(7);\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar GUARD_TEXT = '\\uFEFF';\n\nvar Embed = function (_Parchment$Embed) {\n  _inherits(Embed, _Parchment$Embed);\n\n  function Embed(node) {\n    _classCallCheck(this, Embed);\n\n    var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));\n\n    _this.contentNode = document.createElement('span');\n    _this.contentNode.setAttribute('contenteditable', false);\n    [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {\n      _this.contentNode.appendChild(childNode);\n    });\n    _this.leftGuard = document.createTextNode(GUARD_TEXT);\n    _this.rightGuard = document.createTextNode(GUARD_TEXT);\n    _this.domNode.appendChild(_this.leftGuard);\n    _this.domNode.appendChild(_this.contentNode);\n    _this.domNode.appendChild(_this.rightGuard);\n    return _this;\n  }\n\n  _createClass(Embed, [{\n    key: 'index',\n    value: function index(node, offset) {\n      if (node === this.leftGuard) return 0;\n      if (node === this.rightGuard) return 1;\n      return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);\n    }\n  }, {\n    key: 'restore',\n    value: function restore(node) {\n      var range = void 0,\n          textNode = void 0;\n      var text = node.data.split(GUARD_TEXT).join('');\n      if (node === this.leftGuard) {\n        if (this.prev instanceof _text2.default) {\n          var prevLength = this.prev.length();\n          this.prev.insertAt(prevLength, text);\n          range = {\n            startNode: this.prev.domNode,\n            startOffset: prevLength + text.length\n          };\n        } else {\n          textNode = document.createTextNode(text);\n          this.parent.insertBefore(_parchment2.default.create(textNode), this);\n          range = {\n            startNode: textNode,\n            startOffset: text.length\n          };\n        }\n      } else if (node === this.rightGuard) {\n        if (this.next instanceof _text2.default) {\n          this.next.insertAt(0, text);\n          range = {\n            startNode: this.next.domNode,\n            startOffset: text.length\n          };\n        } else {\n          textNode = document.createTextNode(text);\n          this.parent.insertBefore(_parchment2.default.create(textNode), this.next);\n          range = {\n            startNode: textNode,\n            startOffset: text.length\n          };\n        }\n      }\n      node.data = GUARD_TEXT;\n      return range;\n    }\n  }, {\n    key: 'update',\n    value: function update(mutations, context) {\n      var _this2 = this;\n\n      mutations.forEach(function (mutation) {\n        if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {\n          var range = _this2.restore(mutation.target);\n          if (range) context.range = range;\n        }\n      });\n    }\n  }]);\n\n  return Embed;\n}(_parchment2.default.Embed);\n\nexports.default = Embed;\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __nested_webpack_require_393779__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;\n\nvar _parchment = __nested_webpack_require_393779__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar config = {\n  scope: _parchment2.default.Scope.BLOCK,\n  whitelist: ['right', 'center', 'justify']\n};\n\nvar AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);\nvar AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);\nvar AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);\n\nexports.AlignAttribute = AlignAttribute;\nexports.AlignClass = AlignClass;\nexports.AlignStyle = AlignStyle;\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __nested_webpack_require_394694__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BackgroundStyle = exports.BackgroundClass = undefined;\n\nvar _parchment = __nested_webpack_require_394694__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _color = __nested_webpack_require_394694__(26);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {\n  scope: _parchment2.default.Scope.INLINE\n});\nvar BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {\n  scope: _parchment2.default.Scope.INLINE\n});\n\nexports.BackgroundClass = BackgroundClass;\nexports.BackgroundStyle = BackgroundStyle;\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __nested_webpack_require_395501__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;\n\nvar _parchment = __nested_webpack_require_395501__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar config = {\n  scope: _parchment2.default.Scope.BLOCK,\n  whitelist: ['rtl']\n};\n\nvar DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);\nvar DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);\nvar DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);\n\nexports.DirectionAttribute = DirectionAttribute;\nexports.DirectionClass = DirectionClass;\nexports.DirectionStyle = DirectionStyle;\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __nested_webpack_require_396454__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FontClass = exports.FontStyle = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_396454__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar config = {\n  scope: _parchment2.default.Scope.INLINE,\n  whitelist: ['serif', 'monospace']\n};\n\nvar FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);\n\nvar FontStyleAttributor = function (_Parchment$Attributor) {\n  _inherits(FontStyleAttributor, _Parchment$Attributor);\n\n  function FontStyleAttributor() {\n    _classCallCheck(this, FontStyleAttributor);\n\n    return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));\n  }\n\n  _createClass(FontStyleAttributor, [{\n    key: 'value',\n    value: function value(node) {\n      return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/[\"']/g, '');\n    }\n  }]);\n\n  return FontStyleAttributor;\n}(_parchment2.default.Attributor.Style);\n\nvar FontStyle = new FontStyleAttributor('font', 'font-family', config);\n\nexports.FontStyle = FontStyle;\nexports.FontClass = FontClass;\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __nested_webpack_require_399830__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SizeStyle = exports.SizeClass = undefined;\n\nvar _parchment = __nested_webpack_require_399830__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {\n  scope: _parchment2.default.Scope.INLINE,\n  whitelist: ['small', 'large', 'huge']\n});\nvar SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {\n  scope: _parchment2.default.Scope.INLINE,\n  whitelist: ['10px', '18px', '32px']\n});\n\nexports.SizeClass = SizeClass;\nexports.SizeStyle = SizeStyle;\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __nested_webpack_require_400627__) {\n\n\"use strict\";\n\n\nmodule.exports = {\n  'align': {\n    '': __nested_webpack_require_400627__(76),\n    'center': __nested_webpack_require_400627__(77),\n    'right': __nested_webpack_require_400627__(78),\n    'justify': __nested_webpack_require_400627__(79)\n  },\n  'background': __nested_webpack_require_400627__(80),\n  'blockquote': __nested_webpack_require_400627__(81),\n  'bold': __nested_webpack_require_400627__(82),\n  'clean': __nested_webpack_require_400627__(83),\n  'code': __nested_webpack_require_400627__(58),\n  'code-block': __nested_webpack_require_400627__(58),\n  'color': __nested_webpack_require_400627__(84),\n  'direction': {\n    '': __nested_webpack_require_400627__(85),\n    'rtl': __nested_webpack_require_400627__(86)\n  },\n  'float': {\n    'center': __nested_webpack_require_400627__(87),\n    'full': __nested_webpack_require_400627__(88),\n    'left': __nested_webpack_require_400627__(89),\n    'right': __nested_webpack_require_400627__(90)\n  },\n  'formula': __nested_webpack_require_400627__(91),\n  'header': {\n    '1': __nested_webpack_require_400627__(92),\n    '2': __nested_webpack_require_400627__(93)\n  },\n  'italic': __nested_webpack_require_400627__(94),\n  'image': __nested_webpack_require_400627__(95),\n  'indent': {\n    '+1': __nested_webpack_require_400627__(96),\n    '-1': __nested_webpack_require_400627__(97)\n  },\n  'link': __nested_webpack_require_400627__(98),\n  'list': {\n    'ordered': __nested_webpack_require_400627__(99),\n    'bullet': __nested_webpack_require_400627__(100),\n    'check': __nested_webpack_require_400627__(101)\n  },\n  'script': {\n    'sub': __nested_webpack_require_400627__(102),\n    'super': __nested_webpack_require_400627__(103)\n  },\n  'strike': __nested_webpack_require_400627__(104),\n  'underline': __nested_webpack_require_400627__(105),\n  'video': __nested_webpack_require_400627__(106)\n};\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __nested_webpack_require_402096__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLastChangeIndex = exports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _parchment = __nested_webpack_require_402096__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _quill = __nested_webpack_require_402096__(5);\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _module = __nested_webpack_require_402096__(9);\n\nvar _module2 = _interopRequireDefault(_module);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar History = function (_Module) {\n  _inherits(History, _Module);\n\n  function History(quill, options) {\n    _classCallCheck(this, History);\n\n    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));\n\n    _this.lastRecorded = 0;\n    _this.ignoreChange = false;\n    _this.clear();\n    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {\n      if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;\n      if (!_this.options.userOnly || source === _quill2.default.sources.USER) {\n        _this.record(delta, oldDelta);\n      } else {\n        _this.transform(delta);\n      }\n    });\n    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));\n    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));\n    if (/Win/i.test(navigator.platform)) {\n      _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));\n    }\n    return _this;\n  }\n\n  _createClass(History, [{\n    key: 'change',\n    value: function change(source, dest) {\n      if (this.stack[source].length === 0) return;\n      var delta = this.stack[source].pop();\n      this.stack[dest].push(delta);\n      this.lastRecorded = 0;\n      this.ignoreChange = true;\n      this.quill.updateContents(delta[source], _quill2.default.sources.USER);\n      this.ignoreChange = false;\n      var index = getLastChangeIndex(delta[source]);\n      this.quill.setSelection(index);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.stack = { undo: [], redo: [] };\n    }\n  }, {\n    key: 'cutoff',\n    value: function cutoff() {\n      this.lastRecorded = 0;\n    }\n  }, {\n    key: 'record',\n    value: function record(changeDelta, oldDelta) {\n      if (changeDelta.ops.length === 0) return;\n      this.stack.redo = [];\n      var undoDelta = this.quill.getContents().diff(oldDelta);\n      var timestamp = Date.now();\n      if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n        var delta = this.stack.undo.pop();\n        undoDelta = undoDelta.compose(delta.undo);\n        changeDelta = delta.redo.compose(changeDelta);\n      } else {\n        this.lastRecorded = timestamp;\n      }\n      this.stack.undo.push({\n        redo: changeDelta,\n        undo: undoDelta\n      });\n      if (this.stack.undo.length > this.options.maxStack) {\n        this.stack.undo.shift();\n      }\n    }\n  }, {\n    key: 'redo',\n    value: function redo() {\n      this.change('redo', 'undo');\n    }\n  }, {\n    key: 'transform',\n    value: function transform(delta) {\n      this.stack.undo.forEach(function (change) {\n        change.undo = delta.transform(change.undo, true);\n        change.redo = delta.transform(change.redo, true);\n      });\n      this.stack.redo.forEach(function (change) {\n        change.undo = delta.transform(change.undo, true);\n        change.redo = delta.transform(change.redo, true);\n      });\n    }\n  }, {\n    key: 'undo',\n    value: function undo() {\n      this.change('undo', 'redo');\n    }\n  }]);\n\n  return History;\n}(_module2.default);\n\nHistory.DEFAULTS = {\n  delay: 1000,\n  maxStack: 100,\n  userOnly: false\n};\n\nfunction endsWithNewlineChange(delta) {\n  var lastOp = delta.ops[delta.ops.length - 1];\n  if (lastOp == null) return false;\n  if (lastOp.insert != null) {\n    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\\n');\n  }\n  if (lastOp.attributes != null) {\n    return Object.keys(lastOp.attributes).some(function (attr) {\n      return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;\n    });\n  }\n  return false;\n}\n\nfunction getLastChangeIndex(delta) {\n  var deleteLength = delta.reduce(function (length, op) {\n    length += op.delete || 0;\n    return length;\n  }, 0);\n  var changeIndex = delta.length() - deleteLength;\n  if (endsWithNewlineChange(delta)) {\n    changeIndex -= 1;\n  }\n  return changeIndex;\n}\n\nexports.default = History;\nexports.getLastChangeIndex = getLastChangeIndex;\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __nested_webpack_require_408231__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BaseTooltip = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _extend = __nested_webpack_require_408231__(3);\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _quillDelta = __nested_webpack_require_408231__(2);\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _emitter = __nested_webpack_require_408231__(8);\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _keyboard = __nested_webpack_require_408231__(23);\n\nvar _keyboard2 = _interopRequireDefault(_keyboard);\n\nvar _theme = __nested_webpack_require_408231__(34);\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nvar _colorPicker = __nested_webpack_require_408231__(59);\n\nvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\nvar _iconPicker = __nested_webpack_require_408231__(60);\n\nvar _iconPicker2 = _interopRequireDefault(_iconPicker);\n\nvar _picker = __nested_webpack_require_408231__(28);\n\nvar _picker2 = _interopRequireDefault(_picker);\n\nvar _tooltip = __nested_webpack_require_408231__(61);\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ALIGNS = [false, 'center', 'right', 'justify'];\n\nvar COLORS = [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \"#008a00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \"#3d1466\"];\n\nvar FONTS = [false, 'serif', 'monospace'];\n\nvar HEADERS = ['1', '2', '3', false];\n\nvar SIZES = ['small', false, 'large', 'huge'];\n\nvar BaseTheme = function (_Theme) {\n  _inherits(BaseTheme, _Theme);\n\n  function BaseTheme(quill, options) {\n    _classCallCheck(this, BaseTheme);\n\n    var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));\n\n    var listener = function listener(e) {\n      if (!document.body.contains(quill.root)) {\n        return document.body.removeEventListener('click', listener);\n      }\n      if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {\n        _this.tooltip.hide();\n      }\n      if (_this.pickers != null) {\n        _this.pickers.forEach(function (picker) {\n          if (!picker.container.contains(e.target)) {\n            picker.close();\n          }\n        });\n      }\n    };\n    quill.emitter.listenDOM('click', document.body, listener);\n    return _this;\n  }\n\n  _createClass(BaseTheme, [{\n    key: 'addModule',\n    value: function addModule(name) {\n      var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);\n      if (name === 'toolbar') {\n        this.extendToolbar(module);\n      }\n      return module;\n    }\n  }, {\n    key: 'buildButtons',\n    value: function buildButtons(buttons, icons) {\n      buttons.forEach(function (button) {\n        var className = button.getAttribute('class') || '';\n        className.split(/\\s+/).forEach(function (name) {\n          if (!name.startsWith('ql-')) return;\n          name = name.slice('ql-'.length);\n          if (icons[name] == null) return;\n          if (name === 'direction') {\n            button.innerHTML = icons[name][''] + icons[name]['rtl'];\n          } else if (typeof icons[name] === 'string') {\n            button.innerHTML = icons[name];\n          } else {\n            var value = button.value || '';\n            if (value != null && icons[name][value]) {\n              button.innerHTML = icons[name][value];\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: 'buildPickers',\n    value: function buildPickers(selects, icons) {\n      var _this2 = this;\n\n      this.pickers = selects.map(function (select) {\n        if (select.classList.contains('ql-align')) {\n          if (select.querySelector('option') == null) {\n            fillSelect(select, ALIGNS);\n          }\n          return new _iconPicker2.default(select, icons.align);\n        } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {\n          var format = select.classList.contains('ql-background') ? 'background' : 'color';\n          if (select.querySelector('option') == null) {\n            fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');\n          }\n          return new _colorPicker2.default(select, icons[format]);\n        } else {\n          if (select.querySelector('option') == null) {\n            if (select.classList.contains('ql-font')) {\n              fillSelect(select, FONTS);\n            } else if (select.classList.contains('ql-header')) {\n              fillSelect(select, HEADERS);\n            } else if (select.classList.contains('ql-size')) {\n              fillSelect(select, SIZES);\n            }\n          }\n          return new _picker2.default(select);\n        }\n      });\n      var update = function update() {\n        _this2.pickers.forEach(function (picker) {\n          picker.update();\n        });\n      };\n      this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);\n    }\n  }]);\n\n  return BaseTheme;\n}(_theme2.default);\n\nBaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {\n  modules: {\n    toolbar: {\n      handlers: {\n        formula: function formula() {\n          this.quill.theme.tooltip.edit('formula');\n        },\n        image: function image() {\n          var _this3 = this;\n\n          var fileInput = this.container.querySelector('input.ql-image[type=file]');\n          if (fileInput == null) {\n            fileInput = document.createElement('input');\n            fileInput.setAttribute('type', 'file');\n            fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');\n            fileInput.classList.add('ql-image');\n            fileInput.addEventListener('change', function () {\n              if (fileInput.files != null && fileInput.files[0] != null) {\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                  var range = _this3.quill.getSelection(true);\n                  _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);\n                  _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);\n                  fileInput.value = \"\";\n                };\n                reader.readAsDataURL(fileInput.files[0]);\n              }\n            });\n            this.container.appendChild(fileInput);\n          }\n          fileInput.click();\n        },\n        video: function video() {\n          this.quill.theme.tooltip.edit('video');\n        }\n      }\n    }\n  }\n});\n\nvar BaseTooltip = function (_Tooltip) {\n  _inherits(BaseTooltip, _Tooltip);\n\n  function BaseTooltip(quill, boundsContainer) {\n    _classCallCheck(this, BaseTooltip);\n\n    var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));\n\n    _this4.textbox = _this4.root.querySelector('input[type=\"text\"]');\n    _this4.listen();\n    return _this4;\n  }\n\n  _createClass(BaseTooltip, [{\n    key: 'listen',\n    value: function listen() {\n      var _this5 = this;\n\n      this.textbox.addEventListener('keydown', function (event) {\n        if (_keyboard2.default.match(event, 'enter')) {\n          _this5.save();\n          event.preventDefault();\n        } else if (_keyboard2.default.match(event, 'escape')) {\n          _this5.cancel();\n          event.preventDefault();\n        }\n      });\n    }\n  }, {\n    key: 'cancel',\n    value: function cancel() {\n      this.hide();\n    }\n  }, {\n    key: 'edit',\n    value: function edit() {\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';\n      var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      this.root.classList.remove('ql-hidden');\n      this.root.classList.add('ql-editing');\n      if (preview != null) {\n        this.textbox.value = preview;\n      } else if (mode !== this.root.getAttribute('data-mode')) {\n        this.textbox.value = '';\n      }\n      this.position(this.quill.getBounds(this.quill.selection.savedRange));\n      this.textbox.select();\n      this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');\n      this.root.setAttribute('data-mode', mode);\n    }\n  }, {\n    key: 'restoreFocus',\n    value: function restoreFocus() {\n      var scrollTop = this.quill.scrollingContainer.scrollTop;\n      this.quill.focus();\n      this.quill.scrollingContainer.scrollTop = scrollTop;\n    }\n  }, {\n    key: 'save',\n    value: function save() {\n      var value = this.textbox.value;\n      switch (this.root.getAttribute('data-mode')) {\n        case 'link':\n          {\n            var scrollTop = this.quill.root.scrollTop;\n            if (this.linkRange) {\n              this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);\n              delete this.linkRange;\n            } else {\n              this.restoreFocus();\n              this.quill.format('link', value, _emitter2.default.sources.USER);\n            }\n            this.quill.root.scrollTop = scrollTop;\n            break;\n          }\n        case 'video':\n          {\n            value = extractVideoUrl(value);\n          } // eslint-disable-next-line no-fallthrough\n        case 'formula':\n          {\n            if (!value) break;\n            var range = this.quill.getSelection(true);\n            if (range != null) {\n              var index = range.index + range.length;\n              this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);\n              if (this.root.getAttribute('data-mode') === 'formula') {\n                this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);\n              }\n              this.quill.setSelection(index + 2, _emitter2.default.sources.USER);\n            }\n            break;\n          }\n        default:\n      }\n      this.textbox.value = '';\n      this.hide();\n    }\n  }]);\n\n  return BaseTooltip;\n}(_tooltip2.default);\n\nfunction extractVideoUrl(url) {\n  var match = url.match(/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?youtube\\.com\\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?youtu\\.be\\/([a-zA-Z0-9_-]+)/);\n  if (match) {\n    return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';\n  }\n  if (match = url.match(/^(?:(https?):\\/\\/)?(?:www\\.)?vimeo\\.com\\/(\\d+)/)) {\n    // eslint-disable-line no-cond-assign\n    return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';\n  }\n  return url;\n}\n\nfunction fillSelect(select, values) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  values.forEach(function (value) {\n    var option = document.createElement('option');\n    if (value === defaultValue) {\n      option.setAttribute('selected', 'selected');\n    } else {\n      option.setAttribute('value', value);\n    }\n    select.appendChild(option);\n  });\n}\n\nexports.BaseTooltip = BaseTooltip;\nexports.default = BaseTheme;\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList = /** @class */ (function () {\n    function LinkedList() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n    LinkedList.prototype.append = function () {\n        var nodes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            nodes[_i] = arguments[_i];\n        }\n        this.insertBefore(nodes[0], null);\n        if (nodes.length > 1) {\n            this.append.apply(this, nodes.slice(1));\n        }\n    };\n    LinkedList.prototype.contains = function (node) {\n        var cur, next = this.iterator();\n        while ((cur = next())) {\n            if (cur === node)\n                return true;\n        }\n        return false;\n    };\n    LinkedList.prototype.insertBefore = function (node, refNode) {\n        if (!node)\n            return;\n        node.next = refNode;\n        if (refNode != null) {\n            node.prev = refNode.prev;\n            if (refNode.prev != null) {\n                refNode.prev.next = node;\n            }\n            refNode.prev = node;\n            if (refNode === this.head) {\n                this.head = node;\n            }\n        }\n        else if (this.tail != null) {\n            this.tail.next = node;\n            node.prev = this.tail;\n            this.tail = node;\n        }\n        else {\n            node.prev = null;\n            this.head = this.tail = node;\n        }\n        this.length += 1;\n    };\n    LinkedList.prototype.offset = function (target) {\n        var index = 0, cur = this.head;\n        while (cur != null) {\n            if (cur === target)\n                return index;\n            index += cur.length();\n            cur = cur.next;\n        }\n        return -1;\n    };\n    LinkedList.prototype.remove = function (node) {\n        if (!this.contains(node))\n            return;\n        if (node.prev != null)\n            node.prev.next = node.next;\n        if (node.next != null)\n            node.next.prev = node.prev;\n        if (node === this.head)\n            this.head = node.next;\n        if (node === this.tail)\n            this.tail = node.prev;\n        this.length -= 1;\n    };\n    LinkedList.prototype.iterator = function (curNode) {\n        if (curNode === void 0) { curNode = this.head; }\n        // TODO use yield when we can\n        return function () {\n            var ret = curNode;\n            if (curNode != null)\n                curNode = curNode.next;\n            return ret;\n        };\n    };\n    LinkedList.prototype.find = function (index, inclusive) {\n        if (inclusive === void 0) { inclusive = false; }\n        var cur, next = this.iterator();\n        while ((cur = next())) {\n            var length = cur.length();\n            if (index < length ||\n                (inclusive && index === length && (cur.next == null || cur.next.length() !== 0))) {\n                return [cur, index];\n            }\n            index -= length;\n        }\n        return [null, 0];\n    };\n    LinkedList.prototype.forEach = function (callback) {\n        var cur, next = this.iterator();\n        while ((cur = next())) {\n            callback(cur);\n        }\n    };\n    LinkedList.prototype.forEachAt = function (index, length, callback) {\n        if (length <= 0)\n            return;\n        var _a = this.find(index), startNode = _a[0], offset = _a[1];\n        var cur, curIndex = index - offset, next = this.iterator(startNode);\n        while ((cur = next()) && curIndex < index + length) {\n            var curLength = cur.length();\n            if (index > curIndex) {\n                callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));\n            }\n            else {\n                callback(cur, 0, Math.min(curLength, index + length - curIndex));\n            }\n            curIndex += curLength;\n        }\n    };\n    LinkedList.prototype.map = function (callback) {\n        return this.reduce(function (memo, cur) {\n            memo.push(callback(cur));\n            return memo;\n        }, []);\n    };\n    LinkedList.prototype.reduce = function (callback, memo) {\n        var cur, next = this.iterator();\n        while ((cur = next())) {\n            memo = callback(memo, cur);\n        }\n        return memo;\n    };\n    return LinkedList;\n}());\nexports.default = LinkedList;\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __nested_webpack_require_426048__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar container_1 = __nested_webpack_require_426048__(17);\nvar Registry = __nested_webpack_require_426048__(1);\nvar OBSERVER_CONFIG = {\n    attributes: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true,\n};\nvar MAX_OPTIMIZE_ITERATIONS = 100;\nvar ScrollBlot = /** @class */ (function (_super) {\n    __extends(ScrollBlot, _super);\n    function ScrollBlot(node) {\n        var _this = _super.call(this, node) || this;\n        _this.scroll = _this;\n        _this.observer = new MutationObserver(function (mutations) {\n            _this.update(mutations);\n        });\n        _this.observer.observe(_this.domNode, OBSERVER_CONFIG);\n        _this.attach();\n        return _this;\n    }\n    ScrollBlot.prototype.detach = function () {\n        _super.prototype.detach.call(this);\n        this.observer.disconnect();\n    };\n    ScrollBlot.prototype.deleteAt = function (index, length) {\n        this.update();\n        if (index === 0 && length === this.length()) {\n            this.children.forEach(function (child) {\n                child.remove();\n            });\n        }\n        else {\n            _super.prototype.deleteAt.call(this, index, length);\n        }\n    };\n    ScrollBlot.prototype.formatAt = function (index, length, name, value) {\n        this.update();\n        _super.prototype.formatAt.call(this, index, length, name, value);\n    };\n    ScrollBlot.prototype.insertAt = function (index, value, def) {\n        this.update();\n        _super.prototype.insertAt.call(this, index, value, def);\n    };\n    ScrollBlot.prototype.optimize = function (mutations, context) {\n        var _this = this;\n        if (mutations === void 0) { mutations = []; }\n        if (context === void 0) { context = {}; }\n        _super.prototype.optimize.call(this, context);\n        // We must modify mutations directly, cannot make copy and then modify\n        var records = [].slice.call(this.observer.takeRecords());\n        // Array.push currently seems to be implemented by a non-tail recursive function\n        // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());\n        while (records.length > 0)\n            mutations.push(records.pop());\n        // TODO use WeakMap\n        var mark = function (blot, markParent) {\n            if (markParent === void 0) { markParent = true; }\n            if (blot == null || blot === _this)\n                return;\n            if (blot.domNode.parentNode == null)\n                return;\n            // @ts-ignore\n            if (blot.domNode[Registry.DATA_KEY].mutations == null) {\n                // @ts-ignore\n                blot.domNode[Registry.DATA_KEY].mutations = [];\n            }\n            if (markParent)\n                mark(blot.parent);\n        };\n        var optimize = function (blot) {\n            // Post-order traversal\n            if (\n            // @ts-ignore\n            blot.domNode[Registry.DATA_KEY] == null ||\n                // @ts-ignore\n                blot.domNode[Registry.DATA_KEY].mutations == null) {\n                return;\n            }\n            if (blot instanceof container_1.default) {\n                blot.children.forEach(optimize);\n            }\n            blot.optimize(context);\n        };\n        var remaining = mutations;\n        for (var i = 0; remaining.length > 0; i += 1) {\n            if (i >= MAX_OPTIMIZE_ITERATIONS) {\n                throw new Error('[Parchment] Maximum optimize iterations reached');\n            }\n            remaining.forEach(function (mutation) {\n                var blot = Registry.find(mutation.target, true);\n                if (blot == null)\n                    return;\n                if (blot.domNode === mutation.target) {\n                    if (mutation.type === 'childList') {\n                        mark(Registry.find(mutation.previousSibling, false));\n                        [].forEach.call(mutation.addedNodes, function (node) {\n                            var child = Registry.find(node, false);\n                            mark(child, false);\n                            if (child instanceof container_1.default) {\n                                child.children.forEach(function (grandChild) {\n                                    mark(grandChild, false);\n                                });\n                            }\n                        });\n                    }\n                    else if (mutation.type === 'attributes') {\n                        mark(blot.prev);\n                    }\n                }\n                mark(blot);\n            });\n            this.children.forEach(optimize);\n            remaining = [].slice.call(this.observer.takeRecords());\n            records = remaining.slice();\n            while (records.length > 0)\n                mutations.push(records.pop());\n        }\n    };\n    ScrollBlot.prototype.update = function (mutations, context) {\n        var _this = this;\n        if (context === void 0) { context = {}; }\n        mutations = mutations || this.observer.takeRecords();\n        // TODO use WeakMap\n        mutations\n            .map(function (mutation) {\n            var blot = Registry.find(mutation.target, true);\n            if (blot == null)\n                return null;\n            // @ts-ignore\n            if (blot.domNode[Registry.DATA_KEY].mutations == null) {\n                // @ts-ignore\n                blot.domNode[Registry.DATA_KEY].mutations = [mutation];\n                return blot;\n            }\n            else {\n                // @ts-ignore\n                blot.domNode[Registry.DATA_KEY].mutations.push(mutation);\n                return null;\n            }\n        })\n            .forEach(function (blot) {\n            if (blot == null ||\n                blot === _this ||\n                //@ts-ignore\n                blot.domNode[Registry.DATA_KEY] == null)\n                return;\n            // @ts-ignore\n            blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);\n        });\n        // @ts-ignore\n        if (this.domNode[Registry.DATA_KEY].mutations != null) {\n            // @ts-ignore\n            _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);\n        }\n        this.optimize(mutations, context);\n    };\n    ScrollBlot.blotName = 'scroll';\n    ScrollBlot.defaultChild = 'block';\n    ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;\n    ScrollBlot.tagName = 'DIV';\n    return ScrollBlot;\n}(container_1.default));\nexports.default = ScrollBlot;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __nested_webpack_require_433162__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar format_1 = __nested_webpack_require_433162__(18);\nvar Registry = __nested_webpack_require_433162__(1);\n// Shallow object comparison\nfunction isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length)\n        return false;\n    // @ts-ignore\n    for (var prop in obj1) {\n        // @ts-ignore\n        if (obj1[prop] !== obj2[prop])\n            return false;\n    }\n    return true;\n}\nvar InlineBlot = /** @class */ (function (_super) {\n    __extends(InlineBlot, _super);\n    function InlineBlot() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    InlineBlot.formats = function (domNode) {\n        if (domNode.tagName === InlineBlot.tagName)\n            return undefined;\n        return _super.formats.call(this, domNode);\n    };\n    InlineBlot.prototype.format = function (name, value) {\n        var _this = this;\n        if (name === this.statics.blotName && !value) {\n            this.children.forEach(function (child) {\n                if (!(child instanceof format_1.default)) {\n                    child = child.wrap(InlineBlot.blotName, true);\n                }\n                _this.attributes.copy(child);\n            });\n            this.unwrap();\n        }\n        else {\n            _super.prototype.format.call(this, name, value);\n        }\n    };\n    InlineBlot.prototype.formatAt = function (index, length, name, value) {\n        if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {\n            var blot = this.isolate(index, length);\n            blot.format(name, value);\n        }\n        else {\n            _super.prototype.formatAt.call(this, index, length, name, value);\n        }\n    };\n    InlineBlot.prototype.optimize = function (context) {\n        _super.prototype.optimize.call(this, context);\n        var formats = this.formats();\n        if (Object.keys(formats).length === 0) {\n            return this.unwrap(); // unformatted span\n        }\n        var next = this.next;\n        if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {\n            next.moveChildren(this);\n            next.remove();\n        }\n    };\n    InlineBlot.blotName = 'inline';\n    InlineBlot.scope = Registry.Scope.INLINE_BLOT;\n    InlineBlot.tagName = 'SPAN';\n    return InlineBlot;\n}(format_1.default));\nexports.default = InlineBlot;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __nested_webpack_require_436154__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar format_1 = __nested_webpack_require_436154__(18);\nvar Registry = __nested_webpack_require_436154__(1);\nvar BlockBlot = /** @class */ (function (_super) {\n    __extends(BlockBlot, _super);\n    function BlockBlot() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BlockBlot.formats = function (domNode) {\n        var tagName = Registry.query(BlockBlot.blotName).tagName;\n        if (domNode.tagName === tagName)\n            return undefined;\n        return _super.formats.call(this, domNode);\n    };\n    BlockBlot.prototype.format = function (name, value) {\n        if (Registry.query(name, Registry.Scope.BLOCK) == null) {\n            return;\n        }\n        else if (name === this.statics.blotName && !value) {\n            this.replaceWith(BlockBlot.blotName);\n        }\n        else {\n            _super.prototype.format.call(this, name, value);\n        }\n    };\n    BlockBlot.prototype.formatAt = function (index, length, name, value) {\n        if (Registry.query(name, Registry.Scope.BLOCK) != null) {\n            this.format(name, value);\n        }\n        else {\n            _super.prototype.formatAt.call(this, index, length, name, value);\n        }\n    };\n    BlockBlot.prototype.insertAt = function (index, value, def) {\n        if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {\n            // Insert text or inline\n            _super.prototype.insertAt.call(this, index, value, def);\n        }\n        else {\n            var after = this.split(index);\n            var blot = Registry.create(value, def);\n            after.parent.insertBefore(blot, after);\n        }\n    };\n    BlockBlot.prototype.update = function (mutations, context) {\n        if (navigator.userAgent.match(/Trident/)) {\n            this.build();\n        }\n        else {\n            _super.prototype.update.call(this, mutations, context);\n        }\n    };\n    BlockBlot.blotName = 'block';\n    BlockBlot.scope = Registry.Scope.BLOCK_BLOT;\n    BlockBlot.tagName = 'P';\n    return BlockBlot;\n}(format_1.default));\nexports.default = BlockBlot;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __nested_webpack_require_438862__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar leaf_1 = __nested_webpack_require_438862__(19);\nvar EmbedBlot = /** @class */ (function (_super) {\n    __extends(EmbedBlot, _super);\n    function EmbedBlot() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EmbedBlot.formats = function (domNode) {\n        return undefined;\n    };\n    EmbedBlot.prototype.format = function (name, value) {\n        // super.formatAt wraps, which is what we want in general,\n        // but this allows subclasses to overwrite for formats\n        // that just apply to particular embeds\n        _super.prototype.formatAt.call(this, 0, this.length(), name, value);\n    };\n    EmbedBlot.prototype.formatAt = function (index, length, name, value) {\n        if (index === 0 && length === this.length()) {\n            this.format(name, value);\n        }\n        else {\n            _super.prototype.formatAt.call(this, index, length, name, value);\n        }\n    };\n    EmbedBlot.prototype.formats = function () {\n        return this.statics.formats(this.domNode);\n    };\n    return EmbedBlot;\n}(leaf_1.default));\nexports.default = EmbedBlot;\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __nested_webpack_require_440603__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar leaf_1 = __nested_webpack_require_440603__(19);\nvar Registry = __nested_webpack_require_440603__(1);\nvar TextBlot = /** @class */ (function (_super) {\n    __extends(TextBlot, _super);\n    function TextBlot(node) {\n        var _this = _super.call(this, node) || this;\n        _this.text = _this.statics.value(_this.domNode);\n        return _this;\n    }\n    TextBlot.create = function (value) {\n        return document.createTextNode(value);\n    };\n    TextBlot.value = function (domNode) {\n        var text = domNode.data;\n        // @ts-ignore\n        if (text['normalize'])\n            text = text['normalize']();\n        return text;\n    };\n    TextBlot.prototype.deleteAt = function (index, length) {\n        this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);\n    };\n    TextBlot.prototype.index = function (node, offset) {\n        if (this.domNode === node) {\n            return offset;\n        }\n        return -1;\n    };\n    TextBlot.prototype.insertAt = function (index, value, def) {\n        if (def == null) {\n            this.text = this.text.slice(0, index) + value + this.text.slice(index);\n            this.domNode.data = this.text;\n        }\n        else {\n            _super.prototype.insertAt.call(this, index, value, def);\n        }\n    };\n    TextBlot.prototype.length = function () {\n        return this.text.length;\n    };\n    TextBlot.prototype.optimize = function (context) {\n        _super.prototype.optimize.call(this, context);\n        this.text = this.statics.value(this.domNode);\n        if (this.text.length === 0) {\n            this.remove();\n        }\n        else if (this.next instanceof TextBlot && this.next.prev === this) {\n            this.insertAt(this.length(), this.next.value());\n            this.next.remove();\n        }\n    };\n    TextBlot.prototype.position = function (index, inclusive) {\n        if (inclusive === void 0) { inclusive = false; }\n        return [this.domNode, index];\n    };\n    TextBlot.prototype.split = function (index, force) {\n        if (force === void 0) { force = false; }\n        if (!force) {\n            if (index === 0)\n                return this;\n            if (index === this.length())\n                return this.next;\n        }\n        var after = Registry.create(this.domNode.splitText(index));\n        this.parent.insertBefore(after, this.next);\n        this.text = this.statics.value(this.domNode);\n        return after;\n    };\n    TextBlot.prototype.update = function (mutations, context) {\n        var _this = this;\n        if (mutations.some(function (mutation) {\n            return mutation.type === 'characterData' && mutation.target === _this.domNode;\n        })) {\n            this.text = this.statics.value(this.domNode);\n        }\n    };\n    TextBlot.prototype.value = function () {\n        return this.text;\n    };\n    TextBlot.blotName = 'text';\n    TextBlot.scope = Registry.Scope.INLINE_BLOT;\n    return TextBlot;\n}(leaf_1.default));\nexports.default = TextBlot;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar elem = document.createElement('div');\nelem.classList.toggle('test-class', false);\nif (elem.classList.contains('test-class')) {\n  var _toggle = DOMTokenList.prototype.toggle;\n  DOMTokenList.prototype.toggle = function (token, force) {\n    if (arguments.length > 1 && !this.contains(token) === !force) {\n      return force;\n    } else {\n      return _toggle.call(this, token);\n    }\n  };\n}\n\nif (!String.prototype.startsWith) {\n  String.prototype.startsWith = function (searchString, position) {\n    position = position || 0;\n    return this.substr(position, searchString.length) === searchString;\n  };\n}\n\nif (!String.prototype.endsWith) {\n  String.prototype.endsWith = function (searchString, position) {\n    var subjectString = this.toString();\n    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n      position = subjectString.length;\n    }\n    position -= searchString.length;\n    var lastIndex = subjectString.indexOf(searchString, position);\n    return lastIndex !== -1 && lastIndex === position;\n  };\n}\n\nif (!Array.prototype.find) {\n  Object.defineProperty(Array.prototype, \"find\", {\n    value: function value(predicate) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.find called on null or undefined');\n      }\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n      var list = Object(this);\n      var length = list.length >>> 0;\n      var thisArg = arguments[1];\n      var value;\n\n      for (var i = 0; i < length; i++) {\n        value = list[i];\n        if (predicate.call(thisArg, value, i, list)) {\n          return value;\n        }\n      }\n      return undefined;\n    }\n  });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Disable resizing in Firefox\n  document.execCommand(\"enableObjectResizing\", false, false);\n  // Disable automatic linkifying in IE11\n  document.execCommand(\"autoUrlDetect\", false, false);\n});\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports) {\n\n/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Check cursor_pos within bounds\n  if (cursor_pos < 0 || text1.length < cursor_pos) {\n    cursor_pos = null;\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  if (cursor_pos != null) {\n    diffs = fix_cursor(diffs, cursor_pos);\n  }\n  diffs = fix_emoji(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i),\n                                           shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n                                           shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n\n\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n\n/*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */\nfunction cursor_normalize_diff (diffs, cursor_pos) {\n  if (cursor_pos === 0) {\n    return [DIFF_EQUAL, diffs];\n  }\n  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n    var d = diffs[i];\n    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n      var next_pos = current_pos + d[1].length;\n      if (cursor_pos === next_pos) {\n        return [i + 1, diffs];\n      } else if (cursor_pos < next_pos) {\n        // copy to prevent side effects\n        diffs = diffs.slice();\n        // split d into two diff changes\n        var split_pos = cursor_pos - current_pos;\n        var d_left = [d[0], d[1].slice(0, split_pos)];\n        var d_right = [d[0], d[1].slice(split_pos)];\n        diffs.splice(i, 1, d_left, d_right);\n        return [i + 1, diffs];\n      } else {\n        current_pos = next_pos;\n      }\n    }\n  }\n  throw new Error('cursor_pos is out of bounds!')\n}\n\n/*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */\nfunction fix_cursor (diffs, cursor_pos) {\n  var norm = cursor_normalize_diff(diffs, cursor_pos);\n  var ndiffs = norm[1];\n  var cursor_pointer = norm[0];\n  var d = ndiffs[cursor_pointer];\n  var d_next = ndiffs[cursor_pointer + 1];\n\n  if (d == null) {\n    // Text was deleted from end of original string,\n    // cursor is now out of bounds in new string\n    return diffs;\n  } else if (d[0] !== DIFF_EQUAL) {\n    // A modification happened at the cursor location.\n    // This is the expected outcome, so we can return the original diff.\n    return diffs;\n  } else {\n    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n      // Case 1)\n      // It is possible to perform a naive shift\n      ndiffs.splice(cursor_pointer, 2, d_next, d)\n      return merge_tuples(ndiffs, cursor_pointer, 2)\n    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n      // Case 2)\n      // d[1] is a prefix of d_next[1]\n      // We can assume that d_next[0] !== 0, since d[0] === 0\n      // Shift edit locations..\n      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n      var suffix = d_next[1].slice(d[1].length);\n      if (suffix.length > 0) {\n        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n      }\n      return merge_tuples(ndiffs, cursor_pointer, 3)\n    } else {\n      // Not possible to perform any modification\n      return diffs;\n    }\n  }\n}\n\n/*\n * Check diff did not split surrogate pairs.\n * Ex. [0, '\\uD83D'], [-1, '\\uDC36'], [1, '\\uDC2F'] -> [-1, '\\uD83D\\uDC36'], [1, '\\uD83D\\uDC2F']\n *     '\\uD83D\\uDC36' === '🐶', '\\uD83D\\uDC2F' === '🐯'\n *\n * @param {Array} diffs Array of diff tuples\n * @return {Array} Array of diff tuples\n */\nfunction fix_emoji (diffs) {\n  var compact = false;\n  var starts_with_pair_end = function(str) {\n    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;\n  }\n  var ends_with_pair_start = function(str) {\n    return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;\n  }\n  for (var i = 2; i < diffs.length; i += 1) {\n    if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&\n        diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&\n        diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {\n      compact = true;\n\n      diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];\n      diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];\n\n      diffs[i-2][1] = diffs[i-2][1].slice(0, -1);\n    }\n  }\n  if (!compact) {\n    return diffs;\n  }\n  var fixed_diffs = [];\n  for (var i = 0; i < diffs.length; i += 1) {\n    if (diffs[i][1].length > 0) {\n      fixed_diffs.push(diffs[i]);\n    }\n  }\n  return fixed_diffs;\n}\n\n/*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */\nfunction merge_tuples (diffs, start, length) {\n  // Check from (start-1) to (start+length).\n  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n    if (i + 1 < diffs.length) {\n      var left_d = diffs[i];\n      var right_d = diffs[i+1];\n      if (left_d[0] === right_d[1]) {\n        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n      }\n    }\n  }\n  return diffs;\n}\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports) {\n\nexports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports) {\n\nvar supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports) {\n\n'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @api private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {Mixed} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Boolean} exists Only check if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {Mixed} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n         listeners.fn === fn\n      && (!once || listeners.once)\n      && (!context || listeners.context === context)\n    ) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n           listeners[i].fn !== fn\n        || (once && !listeners[i].once)\n        || (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {String|Symbol} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __nested_webpack_require_481668__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _extend2 = __nested_webpack_require_481668__(3);\n\nvar _extend3 = _interopRequireDefault(_extend2);\n\nvar _quillDelta = __nested_webpack_require_481668__(2);\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __nested_webpack_require_481668__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _quill = __nested_webpack_require_481668__(5);\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _logger = __nested_webpack_require_481668__(10);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _module = __nested_webpack_require_481668__(9);\n\nvar _module2 = _interopRequireDefault(_module);\n\nvar _align = __nested_webpack_require_481668__(36);\n\nvar _background = __nested_webpack_require_481668__(37);\n\nvar _code = __nested_webpack_require_481668__(13);\n\nvar _code2 = _interopRequireDefault(_code);\n\nvar _color = __nested_webpack_require_481668__(26);\n\nvar _direction = __nested_webpack_require_481668__(38);\n\nvar _font = __nested_webpack_require_481668__(39);\n\nvar _size = __nested_webpack_require_481668__(40);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar debug = (0, _logger2.default)('quill:clipboard');\n\nvar DOM_KEY = '__ql-matcher';\n\nvar CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];\n\nvar ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\nvar STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\nvar Clipboard = function (_Module) {\n  _inherits(Clipboard, _Module);\n\n  function Clipboard(quill, options) {\n    _classCallCheck(this, Clipboard);\n\n    var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));\n\n    _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));\n    _this.container = _this.quill.addContainer('ql-clipboard');\n    _this.container.setAttribute('contenteditable', true);\n    _this.container.setAttribute('tabindex', -1);\n    _this.matchers = [];\n    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          selector = _ref2[0],\n          matcher = _ref2[1];\n\n      if (!options.matchVisual && matcher === matchSpacing) return;\n      _this.addMatcher(selector, matcher);\n    });\n    return _this;\n  }\n\n  _createClass(Clipboard, [{\n    key: 'addMatcher',\n    value: function addMatcher(selector, matcher) {\n      this.matchers.push([selector, matcher]);\n    }\n  }, {\n    key: 'convert',\n    value: function convert(html) {\n      if (typeof html === 'string') {\n        this.container.innerHTML = html.replace(/\\>\\r?\\n +\\</g, '><'); // Remove spaces between tags\n        return this.convert();\n      }\n      var formats = this.quill.getFormat(this.quill.selection.savedRange.index);\n      if (formats[_code2.default.blotName]) {\n        var text = this.container.innerText;\n        this.container.innerHTML = '';\n        return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));\n      }\n\n      var _prepareMatching = this.prepareMatching(),\n          _prepareMatching2 = _slicedToArray(_prepareMatching, 2),\n          elementMatchers = _prepareMatching2[0],\n          textMatchers = _prepareMatching2[1];\n\n      var delta = traverse(this.container, elementMatchers, textMatchers);\n      // Remove trailing newline\n      if (deltaEndsWith(delta, '\\n') && delta.ops[delta.ops.length - 1].attributes == null) {\n        delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));\n      }\n      debug.log('convert', this.container.innerHTML, delta);\n      this.container.innerHTML = '';\n      return delta;\n    }\n  }, {\n    key: 'dangerouslyPasteHTML',\n    value: function dangerouslyPasteHTML(index, html) {\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;\n\n      if (typeof index === 'string') {\n        this.quill.setContents(this.convert(index), html);\n        this.quill.setSelection(0, _quill2.default.sources.SILENT);\n      } else {\n        var paste = this.convert(html);\n        this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);\n        this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);\n      }\n    }\n  }, {\n    key: 'onPaste',\n    value: function onPaste(e) {\n      var _this2 = this;\n\n      if (e.defaultPrevented || !this.quill.isEnabled()) return;\n      var range = this.quill.getSelection();\n      var delta = new _quillDelta2.default().retain(range.index);\n      var scrollTop = this.quill.scrollingContainer.scrollTop;\n      this.container.focus();\n      this.quill.selection.update(_quill2.default.sources.SILENT);\n      setTimeout(function () {\n        delta = delta.concat(_this2.convert()).delete(range.length);\n        _this2.quill.updateContents(delta, _quill2.default.sources.USER);\n        // range.length contributes to delta.length()\n        _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);\n        _this2.quill.scrollingContainer.scrollTop = scrollTop;\n        _this2.quill.focus();\n      }, 1);\n    }\n  }, {\n    key: 'prepareMatching',\n    value: function prepareMatching() {\n      var _this3 = this;\n\n      var elementMatchers = [],\n          textMatchers = [];\n      this.matchers.forEach(function (pair) {\n        var _pair = _slicedToArray(pair, 2),\n            selector = _pair[0],\n            matcher = _pair[1];\n\n        switch (selector) {\n          case Node.TEXT_NODE:\n            textMatchers.push(matcher);\n            break;\n          case Node.ELEMENT_NODE:\n            elementMatchers.push(matcher);\n            break;\n          default:\n            [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {\n              // TODO use weakmap\n              node[DOM_KEY] = node[DOM_KEY] || [];\n              node[DOM_KEY].push(matcher);\n            });\n            break;\n        }\n      });\n      return [elementMatchers, textMatchers];\n    }\n  }]);\n\n  return Clipboard;\n}(_module2.default);\n\nClipboard.DEFAULTS = {\n  matchers: [],\n  matchVisual: true\n};\n\nfunction applyFormat(delta, format, value) {\n  if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {\n    return Object.keys(format).reduce(function (delta, key) {\n      return applyFormat(delta, key, format[key]);\n    }, delta);\n  } else {\n    return delta.reduce(function (delta, op) {\n      if (op.attributes && op.attributes[format]) {\n        return delta.push(op);\n      } else {\n        return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));\n      }\n    }, new _quillDelta2.default());\n  }\n}\n\nfunction computeStyle(node) {\n  if (node.nodeType !== Node.ELEMENT_NODE) return {};\n  var DOM_KEY = '__ql-computed-style';\n  return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));\n}\n\nfunction deltaEndsWith(delta, text) {\n  var endText = \"\";\n  for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {\n    var op = delta.ops[i];\n    if (typeof op.insert !== 'string') break;\n    endText = op.insert + endText;\n  }\n  return endText.slice(-1 * text.length) === text;\n}\n\nfunction isLine(node) {\n  if (node.childNodes.length === 0) return false; // Exclude embed blocks\n  var style = computeStyle(node);\n  return ['block', 'list-item'].indexOf(style.display) > -1;\n}\n\nfunction traverse(node, elementMatchers, textMatchers) {\n  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce(function (delta, matcher) {\n      return matcher(node, delta);\n    }, new _quillDelta2.default());\n  } else if (node.nodeType === node.ELEMENT_NODE) {\n    return [].reduce.call(node.childNodes || [], function (delta, childNode) {\n      var childrenDelta = traverse(childNode, elementMatchers, textMatchers);\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {\n          return matcher(childNode, childrenDelta);\n        }, childrenDelta);\n        childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {\n          return matcher(childNode, childrenDelta);\n        }, childrenDelta);\n      }\n      return delta.concat(childrenDelta);\n    }, new _quillDelta2.default());\n  } else {\n    return new _quillDelta2.default();\n  }\n}\n\nfunction matchAlias(format, node, delta) {\n  return applyFormat(delta, format, true);\n}\n\nfunction matchAttributor(node, delta) {\n  var attributes = _parchment2.default.Attributor.Attribute.keys(node);\n  var classes = _parchment2.default.Attributor.Class.keys(node);\n  var styles = _parchment2.default.Attributor.Style.keys(node);\n  var formats = {};\n  attributes.concat(classes).concat(styles).forEach(function (name) {\n    var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);\n    if (attr != null) {\n      formats[attr.attrName] = attr.value(node);\n      if (formats[attr.attrName]) return;\n    }\n    attr = ATTRIBUTE_ATTRIBUTORS[name];\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n    attr = STYLE_ATTRIBUTORS[name];\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      attr = STYLE_ATTRIBUTORS[name];\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n  });\n  if (Object.keys(formats).length > 0) {\n    delta = applyFormat(delta, formats);\n  }\n  return delta;\n}\n\nfunction matchBlot(node, delta) {\n  var match = _parchment2.default.query(node);\n  if (match == null) return delta;\n  if (match.prototype instanceof _parchment2.default.Embed) {\n    var embed = {};\n    var value = match.value(node);\n    if (value != null) {\n      embed[match.blotName] = value;\n      delta = new _quillDelta2.default().insert(embed, match.formats(node));\n    }\n  } else if (typeof match.formats === 'function') {\n    delta = applyFormat(delta, match.blotName, match.formats(node));\n  }\n  return delta;\n}\n\nfunction matchBreak(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    delta.insert('\\n');\n  }\n  return delta;\n}\n\nfunction matchIgnore() {\n  return new _quillDelta2.default();\n}\n\nfunction matchIndent(node, delta) {\n  var match = _parchment2.default.query(node);\n  if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\\n')) {\n    return delta;\n  }\n  var indent = -1,\n      parent = node.parentNode;\n  while (!parent.classList.contains('ql-clipboard')) {\n    if ((_parchment2.default.query(parent) || {}).blotName === 'list') {\n      indent += 1;\n    }\n    parent = parent.parentNode;\n  }\n  if (indent <= 0) return delta;\n  return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));\n}\n\nfunction matchNewline(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {\n      delta.insert('\\n');\n    }\n  }\n  return delta;\n}\n\nfunction matchSpacing(node, delta) {\n  if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\\n\\n')) {\n    var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);\n    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {\n      delta.insert('\\n');\n    }\n  }\n  return delta;\n}\n\nfunction matchStyles(node, delta) {\n  var formats = {};\n  var style = node.style || {};\n  if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {\n    formats.italic = true;\n  }\n  if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {\n    formats.bold = true;\n  }\n  if (Object.keys(formats).length > 0) {\n    delta = applyFormat(delta, formats);\n  }\n  if (parseFloat(style.textIndent || 0) > 0) {\n    // Could be 0.5in\n    delta = new _quillDelta2.default().insert('\\t').concat(delta);\n  }\n  return delta;\n}\n\nfunction matchText(node, delta) {\n  var text = node.data;\n  // Word represents empty line with <o:p>&nbsp;</o:p>\n  if (node.parentNode.tagName === 'O:P') {\n    return delta.insert(text.trim());\n  }\n  if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {\n    return delta;\n  }\n  if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {\n    // eslint-disable-next-line func-style\n    var replacer = function replacer(collapse, match) {\n      match = match.replace(/[^\\u00a0]/g, ''); // \\u00a0 is nbsp;\n      return match.length < 1 && collapse ? ' ' : match;\n    };\n    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {\n      text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n    }\n    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {\n      text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n    }\n  }\n  return delta.insert(text);\n}\n\nexports.default = Clipboard;\nexports.matchAttributor = matchAttributor;\nexports.matchBlot = matchBlot;\nexports.matchNewline = matchNewline;\nexports.matchSpacing = matchSpacing;\nexports.matchText = matchText;\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __nested_webpack_require_498526__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _inline = __nested_webpack_require_498526__(6);\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Bold = function (_Inline) {\n  _inherits(Bold, _Inline);\n\n  function Bold() {\n    _classCallCheck(this, Bold);\n\n    return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));\n  }\n\n  _createClass(Bold, [{\n    key: 'optimize',\n    value: function optimize(context) {\n      _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);\n      if (this.domNode.tagName !== this.statics.tagName[0]) {\n        this.replaceWith(this.statics.blotName);\n      }\n    }\n  }], [{\n    key: 'create',\n    value: function create() {\n      return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);\n    }\n  }, {\n    key: 'formats',\n    value: function formats() {\n      return true;\n    }\n  }]);\n\n  return Bold;\n}(_inline2.default);\n\nBold.blotName = 'bold';\nBold.tagName = ['STRONG', 'B'];\n\nexports.default = Bold;\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __nested_webpack_require_501754__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addControls = exports.default = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _quillDelta = __nested_webpack_require_501754__(2);\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __nested_webpack_require_501754__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _quill = __nested_webpack_require_501754__(5);\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _logger = __nested_webpack_require_501754__(10);\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _module = __nested_webpack_require_501754__(9);\n\nvar _module2 = _interopRequireDefault(_module);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar debug = (0, _logger2.default)('quill:toolbar');\n\nvar Toolbar = function (_Module) {\n  _inherits(Toolbar, _Module);\n\n  function Toolbar(quill, options) {\n    _classCallCheck(this, Toolbar);\n\n    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));\n\n    if (Array.isArray(_this.options.container)) {\n      var container = document.createElement('div');\n      addControls(container, _this.options.container);\n      quill.container.parentNode.insertBefore(container, quill.container);\n      _this.container = container;\n    } else if (typeof _this.options.container === 'string') {\n      _this.container = document.querySelector(_this.options.container);\n    } else {\n      _this.container = _this.options.container;\n    }\n    if (!(_this.container instanceof HTMLElement)) {\n      var _ret;\n\n      return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);\n    }\n    _this.container.classList.add('ql-toolbar');\n    _this.controls = [];\n    _this.handlers = {};\n    Object.keys(_this.options.handlers).forEach(function (format) {\n      _this.addHandler(format, _this.options.handlers[format]);\n    });\n    [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {\n      _this.attach(input);\n    });\n    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {\n      if (type === _quill2.default.events.SELECTION_CHANGE) {\n        _this.update(range);\n      }\n    });\n    _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {\n      var _this$quill$selection = _this.quill.selection.getRange(),\n          _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),\n          range = _this$quill$selection2[0]; // quill.getSelection triggers update\n\n\n      _this.update(range);\n    });\n    return _this;\n  }\n\n  _createClass(Toolbar, [{\n    key: 'addHandler',\n    value: function addHandler(format, handler) {\n      this.handlers[format] = handler;\n    }\n  }, {\n    key: 'attach',\n    value: function attach(input) {\n      var _this2 = this;\n\n      var format = [].find.call(input.classList, function (className) {\n        return className.indexOf('ql-') === 0;\n      });\n      if (!format) return;\n      format = format.slice('ql-'.length);\n      if (input.tagName === 'BUTTON') {\n        input.setAttribute('type', 'button');\n      }\n      if (this.handlers[format] == null) {\n        if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {\n          debug.warn('ignoring attaching to disabled format', format, input);\n          return;\n        }\n        if (_parchment2.default.query(format) == null) {\n          debug.warn('ignoring attaching to nonexistent format', format, input);\n          return;\n        }\n      }\n      var eventName = input.tagName === 'SELECT' ? 'change' : 'click';\n      input.addEventListener(eventName, function (e) {\n        var value = void 0;\n        if (input.tagName === 'SELECT') {\n          if (input.selectedIndex < 0) return;\n          var selected = input.options[input.selectedIndex];\n          if (selected.hasAttribute('selected')) {\n            value = false;\n          } else {\n            value = selected.value || false;\n          }\n        } else {\n          if (input.classList.contains('ql-active')) {\n            value = false;\n          } else {\n            value = input.value || !input.hasAttribute('value');\n          }\n          e.preventDefault();\n        }\n        _this2.quill.focus();\n\n        var _quill$selection$getR = _this2.quill.selection.getRange(),\n            _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),\n            range = _quill$selection$getR2[0];\n\n        if (_this2.handlers[format] != null) {\n          _this2.handlers[format].call(_this2, value);\n        } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {\n          value = prompt('Enter ' + format);\n          if (!value) return;\n          _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);\n        } else {\n          _this2.quill.format(format, value, _quill2.default.sources.USER);\n        }\n        _this2.update(range);\n      });\n      // TODO use weakmap\n      this.controls.push([format, input]);\n    }\n  }, {\n    key: 'update',\n    value: function update(range) {\n      var formats = range == null ? {} : this.quill.getFormat(range);\n      this.controls.forEach(function (pair) {\n        var _pair = _slicedToArray(pair, 2),\n            format = _pair[0],\n            input = _pair[1];\n\n        if (input.tagName === 'SELECT') {\n          var option = void 0;\n          if (range == null) {\n            option = null;\n          } else if (formats[format] == null) {\n            option = input.querySelector('option[selected]');\n          } else if (!Array.isArray(formats[format])) {\n            var value = formats[format];\n            if (typeof value === 'string') {\n              value = value.replace(/\\\"/g, '\\\\\"');\n            }\n            option = input.querySelector('option[value=\"' + value + '\"]');\n          }\n          if (option == null) {\n            input.value = ''; // TODO make configurable?\n            input.selectedIndex = -1;\n          } else {\n            option.selected = true;\n          }\n        } else {\n          if (range == null) {\n            input.classList.remove('ql-active');\n          } else if (input.hasAttribute('value')) {\n            // both being null should match (default values)\n            // '1' should match with 1 (headers)\n            var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');\n            input.classList.toggle('ql-active', isActive);\n          } else {\n            input.classList.toggle('ql-active', formats[format] != null);\n          }\n        }\n      });\n    }\n  }]);\n\n  return Toolbar;\n}(_module2.default);\n\nToolbar.DEFAULTS = {};\n\nfunction addButton(container, format, value) {\n  var input = document.createElement('button');\n  input.setAttribute('type', 'button');\n  input.classList.add('ql-' + format);\n  if (value != null) {\n    input.value = value;\n  }\n  container.appendChild(input);\n}\n\nfunction addControls(container, groups) {\n  if (!Array.isArray(groups[0])) {\n    groups = [groups];\n  }\n  groups.forEach(function (controls) {\n    var group = document.createElement('span');\n    group.classList.add('ql-formats');\n    controls.forEach(function (control) {\n      if (typeof control === 'string') {\n        addButton(group, control);\n      } else {\n        var format = Object.keys(control)[0];\n        var value = control[format];\n        if (Array.isArray(value)) {\n          addSelect(group, format, value);\n        } else {\n          addButton(group, format, value);\n        }\n      }\n    });\n    container.appendChild(group);\n  });\n}\n\nfunction addSelect(container, format, values) {\n  var input = document.createElement('select');\n  input.classList.add('ql-' + format);\n  values.forEach(function (value) {\n    var option = document.createElement('option');\n    if (value !== false) {\n      option.setAttribute('value', value);\n    } else {\n      option.setAttribute('selected', 'selected');\n    }\n    input.appendChild(option);\n  });\n  container.appendChild(input);\n}\n\nToolbar.DEFAULTS = {\n  container: null,\n  handlers: {\n    clean: function clean() {\n      var _this3 = this;\n\n      var range = this.quill.getSelection();\n      if (range == null) return;\n      if (range.length == 0) {\n        var formats = this.quill.getFormat();\n        Object.keys(formats).forEach(function (name) {\n          // Clean functionality in existing apps only clean inline formats\n          if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {\n            _this3.quill.format(name, false);\n          }\n        });\n      } else {\n        this.quill.removeFormat(range, _quill2.default.sources.USER);\n      }\n    },\n    direction: function direction(value) {\n      var align = this.quill.getFormat()['align'];\n      if (value === 'rtl' && align == null) {\n        this.quill.format('align', 'right', _quill2.default.sources.USER);\n      } else if (!value && align === 'right') {\n        this.quill.format('align', false, _quill2.default.sources.USER);\n      }\n      this.quill.format('direction', value, _quill2.default.sources.USER);\n    },\n    indent: function indent(value) {\n      var range = this.quill.getSelection();\n      var formats = this.quill.getFormat(range);\n      var indent = parseInt(formats.indent || 0);\n      if (value === '+1' || value === '-1') {\n        var modifier = value === '+1' ? 1 : -1;\n        if (formats.direction === 'rtl') modifier *= -1;\n        this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);\n      }\n    },\n    link: function link(value) {\n      if (value === true) {\n        value = prompt('Enter link URL:');\n      }\n      this.quill.format('link', value, _quill2.default.sources.USER);\n    },\n    list: function list(value) {\n      var range = this.quill.getSelection();\n      var formats = this.quill.getFormat(range);\n      if (value === 'check') {\n        if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {\n          this.quill.format('list', false, _quill2.default.sources.USER);\n        } else {\n          this.quill.format('list', 'unchecked', _quill2.default.sources.USER);\n        }\n      } else {\n        this.quill.format('list', value, _quill2.default.sources.USER);\n      }\n    }\n  }\n};\n\nexports.default = Toolbar;\nexports.addControls = addControls;\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polyline class=\\\"ql-even ql-stroke\\\" points=\\\"5 7 3 9 5 11\\\"></polyline> <polyline class=\\\"ql-even ql-stroke\\\" points=\\\"13 7 15 9 13 11\\\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>\";\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __nested_webpack_require_515033__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _picker = __nested_webpack_require_515033__(28);\n\nvar _picker2 = _interopRequireDefault(_picker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ColorPicker = function (_Picker) {\n  _inherits(ColorPicker, _Picker);\n\n  function ColorPicker(select, label) {\n    _classCallCheck(this, ColorPicker);\n\n    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));\n\n    _this.label.innerHTML = label;\n    _this.container.classList.add('ql-color-picker');\n    [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {\n      item.classList.add('ql-primary');\n    });\n    return _this;\n  }\n\n  _createClass(ColorPicker, [{\n    key: 'buildItem',\n    value: function buildItem(option) {\n      var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);\n      item.style.backgroundColor = option.getAttribute('value') || '';\n      return item;\n    }\n  }, {\n    key: 'selectItem',\n    value: function selectItem(item, trigger) {\n      _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);\n      var colorLabel = this.label.querySelector('.ql-color-label');\n      var value = item ? item.getAttribute('data-value') || '' : '';\n      if (colorLabel) {\n        if (colorLabel.tagName === 'line') {\n          colorLabel.style.stroke = value;\n        } else {\n          colorLabel.style.fill = value;\n        }\n      }\n    }\n  }]);\n\n  return ColorPicker;\n}(_picker2.default);\n\nexports.default = ColorPicker;\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __nested_webpack_require_518844__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _picker = __nested_webpack_require_518844__(28);\n\nvar _picker2 = _interopRequireDefault(_picker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar IconPicker = function (_Picker) {\n  _inherits(IconPicker, _Picker);\n\n  function IconPicker(select, icons) {\n    _classCallCheck(this, IconPicker);\n\n    var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));\n\n    _this.container.classList.add('ql-icon-picker');\n    [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {\n      item.innerHTML = icons[item.getAttribute('data-value') || ''];\n    });\n    _this.defaultItem = _this.container.querySelector('.ql-selected');\n    _this.selectItem(_this.defaultItem);\n    return _this;\n  }\n\n  _createClass(IconPicker, [{\n    key: 'selectItem',\n    value: function selectItem(item, trigger) {\n      _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);\n      item = item || this.defaultItem;\n      this.label.innerHTML = item.innerHTML;\n    }\n  }]);\n\n  return IconPicker;\n}(_picker2.default);\n\nexports.default = IconPicker;\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Tooltip = function () {\n  function Tooltip(quill, boundsContainer) {\n    var _this = this;\n\n    _classCallCheck(this, Tooltip);\n\n    this.quill = quill;\n    this.boundsContainer = boundsContainer || document.body;\n    this.root = quill.addContainer('ql-tooltip');\n    this.root.innerHTML = this.constructor.TEMPLATE;\n    if (this.quill.root === this.quill.scrollingContainer) {\n      this.quill.root.addEventListener('scroll', function () {\n        _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';\n      });\n    }\n    this.hide();\n  }\n\n  _createClass(Tooltip, [{\n    key: 'hide',\n    value: function hide() {\n      this.root.classList.add('ql-hidden');\n    }\n  }, {\n    key: 'position',\n    value: function position(reference) {\n      var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;\n      // root.scrollTop should be 0 if scrollContainer !== root\n      var top = reference.bottom + this.quill.root.scrollTop;\n      this.root.style.left = left + 'px';\n      this.root.style.top = top + 'px';\n      this.root.classList.remove('ql-flip');\n      var containerBounds = this.boundsContainer.getBoundingClientRect();\n      var rootBounds = this.root.getBoundingClientRect();\n      var shift = 0;\n      if (rootBounds.right > containerBounds.right) {\n        shift = containerBounds.right - rootBounds.right;\n        this.root.style.left = left + shift + 'px';\n      }\n      if (rootBounds.left < containerBounds.left) {\n        shift = containerBounds.left - rootBounds.left;\n        this.root.style.left = left + shift + 'px';\n      }\n      if (rootBounds.bottom > containerBounds.bottom) {\n        var height = rootBounds.bottom - rootBounds.top;\n        var verticalShift = reference.bottom - reference.top + height;\n        this.root.style.top = top - verticalShift + 'px';\n        this.root.classList.add('ql-flip');\n      }\n      return shift;\n    }\n  }, {\n    key: 'show',\n    value: function show() {\n      this.root.classList.remove('ql-editing');\n      this.root.classList.remove('ql-hidden');\n    }\n  }]);\n\n  return Tooltip;\n}();\n\nexports.default = Tooltip;\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __nested_webpack_require_525184__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _extend = __nested_webpack_require_525184__(3);\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _emitter = __nested_webpack_require_525184__(8);\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _base = __nested_webpack_require_525184__(43);\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _link = __nested_webpack_require_525184__(27);\n\nvar _link2 = _interopRequireDefault(_link);\n\nvar _selection = __nested_webpack_require_525184__(15);\n\nvar _icons = __nested_webpack_require_525184__(41);\n\nvar _icons2 = _interopRequireDefault(_icons);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];\n\nvar SnowTheme = function (_BaseTheme) {\n  _inherits(SnowTheme, _BaseTheme);\n\n  function SnowTheme(quill, options) {\n    _classCallCheck(this, SnowTheme);\n\n    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n      options.modules.toolbar.container = TOOLBAR_CONFIG;\n    }\n\n    var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));\n\n    _this.quill.container.classList.add('ql-snow');\n    return _this;\n  }\n\n  _createClass(SnowTheme, [{\n    key: 'extendToolbar',\n    value: function extendToolbar(toolbar) {\n      toolbar.container.classList.add('ql-snow');\n      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);\n      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);\n      this.tooltip = new SnowTooltip(this.quill, this.options.bounds);\n      if (toolbar.container.querySelector('.ql-link')) {\n        this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {\n          toolbar.handlers['link'].call(toolbar, !context.format.link);\n        });\n      }\n    }\n  }]);\n\n  return SnowTheme;\n}(_base2.default);\n\nSnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n  modules: {\n    toolbar: {\n      handlers: {\n        link: function link(value) {\n          if (value) {\n            var range = this.quill.getSelection();\n            if (range == null || range.length == 0) return;\n            var preview = this.quill.getText(range);\n            if (/^\\S+@\\S+\\.\\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {\n              preview = 'mailto:' + preview;\n            }\n            var tooltip = this.quill.theme.tooltip;\n            tooltip.edit('link', preview);\n          } else {\n            this.quill.format('link', false);\n          }\n        }\n      }\n    }\n  }\n});\n\nvar SnowTooltip = function (_BaseTooltip) {\n  _inherits(SnowTooltip, _BaseTooltip);\n\n  function SnowTooltip(quill, bounds) {\n    _classCallCheck(this, SnowTooltip);\n\n    var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));\n\n    _this2.preview = _this2.root.querySelector('a.ql-preview');\n    return _this2;\n  }\n\n  _createClass(SnowTooltip, [{\n    key: 'listen',\n    value: function listen() {\n      var _this3 = this;\n\n      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);\n      this.root.querySelector('a.ql-action').addEventListener('click', function (event) {\n        if (_this3.root.classList.contains('ql-editing')) {\n          _this3.save();\n        } else {\n          _this3.edit('link', _this3.preview.textContent);\n        }\n        event.preventDefault();\n      });\n      this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {\n        if (_this3.linkRange != null) {\n          var range = _this3.linkRange;\n          _this3.restoreFocus();\n          _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);\n          delete _this3.linkRange;\n        }\n        event.preventDefault();\n        _this3.hide();\n      });\n      this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {\n        if (range == null) return;\n        if (range.length === 0 && source === _emitter2.default.sources.USER) {\n          var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),\n              _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),\n              link = _quill$scroll$descend2[0],\n              offset = _quill$scroll$descend2[1];\n\n          if (link != null) {\n            _this3.linkRange = new _selection.Range(range.index - offset, link.length());\n            var preview = _link2.default.formats(link.domNode);\n            _this3.preview.textContent = preview;\n            _this3.preview.setAttribute('href', preview);\n            _this3.show();\n            _this3.position(_this3.quill.getBounds(_this3.linkRange));\n            return;\n          }\n        } else {\n          delete _this3.linkRange;\n        }\n        _this3.hide();\n      });\n    }\n  }, {\n    key: 'show',\n    value: function show() {\n      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);\n      this.root.removeAttribute('data-mode');\n    }\n  }]);\n\n  return SnowTooltip;\n}(_base.BaseTooltip);\n\nSnowTooltip.TEMPLATE = ['<a class=\"ql-preview\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"about:blank\"></a>', '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"https://quilljs.com\" data-video=\"Embed URL\">', '<a class=\"ql-action\"></a>', '<a class=\"ql-remove\"></a>'].join('');\n\nexports.default = SnowTheme;\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __nested_webpack_require_533568__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = __nested_webpack_require_533568__(29);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _align = __nested_webpack_require_533568__(36);\n\nvar _direction = __nested_webpack_require_533568__(38);\n\nvar _indent = __nested_webpack_require_533568__(64);\n\nvar _blockquote = __nested_webpack_require_533568__(65);\n\nvar _blockquote2 = _interopRequireDefault(_blockquote);\n\nvar _header = __nested_webpack_require_533568__(66);\n\nvar _header2 = _interopRequireDefault(_header);\n\nvar _list = __nested_webpack_require_533568__(67);\n\nvar _list2 = _interopRequireDefault(_list);\n\nvar _background = __nested_webpack_require_533568__(37);\n\nvar _color = __nested_webpack_require_533568__(26);\n\nvar _font = __nested_webpack_require_533568__(39);\n\nvar _size = __nested_webpack_require_533568__(40);\n\nvar _bold = __nested_webpack_require_533568__(56);\n\nvar _bold2 = _interopRequireDefault(_bold);\n\nvar _italic = __nested_webpack_require_533568__(68);\n\nvar _italic2 = _interopRequireDefault(_italic);\n\nvar _link = __nested_webpack_require_533568__(27);\n\nvar _link2 = _interopRequireDefault(_link);\n\nvar _script = __nested_webpack_require_533568__(69);\n\nvar _script2 = _interopRequireDefault(_script);\n\nvar _strike = __nested_webpack_require_533568__(70);\n\nvar _strike2 = _interopRequireDefault(_strike);\n\nvar _underline = __nested_webpack_require_533568__(71);\n\nvar _underline2 = _interopRequireDefault(_underline);\n\nvar _image = __nested_webpack_require_533568__(72);\n\nvar _image2 = _interopRequireDefault(_image);\n\nvar _video = __nested_webpack_require_533568__(73);\n\nvar _video2 = _interopRequireDefault(_video);\n\nvar _code = __nested_webpack_require_533568__(13);\n\nvar _code2 = _interopRequireDefault(_code);\n\nvar _formula = __nested_webpack_require_533568__(74);\n\nvar _formula2 = _interopRequireDefault(_formula);\n\nvar _syntax = __nested_webpack_require_533568__(75);\n\nvar _syntax2 = _interopRequireDefault(_syntax);\n\nvar _toolbar = __nested_webpack_require_533568__(57);\n\nvar _toolbar2 = _interopRequireDefault(_toolbar);\n\nvar _icons = __nested_webpack_require_533568__(41);\n\nvar _icons2 = _interopRequireDefault(_icons);\n\nvar _picker = __nested_webpack_require_533568__(28);\n\nvar _picker2 = _interopRequireDefault(_picker);\n\nvar _colorPicker = __nested_webpack_require_533568__(59);\n\nvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\nvar _iconPicker = __nested_webpack_require_533568__(60);\n\nvar _iconPicker2 = _interopRequireDefault(_iconPicker);\n\nvar _tooltip = __nested_webpack_require_533568__(61);\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _bubble = __nested_webpack_require_533568__(108);\n\nvar _bubble2 = _interopRequireDefault(_bubble);\n\nvar _snow = __nested_webpack_require_533568__(62);\n\nvar _snow2 = _interopRequireDefault(_snow);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.register({\n  'attributors/attribute/direction': _direction.DirectionAttribute,\n\n  'attributors/class/align': _align.AlignClass,\n  'attributors/class/background': _background.BackgroundClass,\n  'attributors/class/color': _color.ColorClass,\n  'attributors/class/direction': _direction.DirectionClass,\n  'attributors/class/font': _font.FontClass,\n  'attributors/class/size': _size.SizeClass,\n\n  'attributors/style/align': _align.AlignStyle,\n  'attributors/style/background': _background.BackgroundStyle,\n  'attributors/style/color': _color.ColorStyle,\n  'attributors/style/direction': _direction.DirectionStyle,\n  'attributors/style/font': _font.FontStyle,\n  'attributors/style/size': _size.SizeStyle\n}, true);\n\n_core2.default.register({\n  'formats/align': _align.AlignClass,\n  'formats/direction': _direction.DirectionClass,\n  'formats/indent': _indent.IndentClass,\n\n  'formats/background': _background.BackgroundStyle,\n  'formats/color': _color.ColorStyle,\n  'formats/font': _font.FontClass,\n  'formats/size': _size.SizeClass,\n\n  'formats/blockquote': _blockquote2.default,\n  'formats/code-block': _code2.default,\n  'formats/header': _header2.default,\n  'formats/list': _list2.default,\n\n  'formats/bold': _bold2.default,\n  'formats/code': _code.Code,\n  'formats/italic': _italic2.default,\n  'formats/link': _link2.default,\n  'formats/script': _script2.default,\n  'formats/strike': _strike2.default,\n  'formats/underline': _underline2.default,\n\n  'formats/image': _image2.default,\n  'formats/video': _video2.default,\n\n  'formats/list/item': _list.ListItem,\n\n  'modules/formula': _formula2.default,\n  'modules/syntax': _syntax2.default,\n  'modules/toolbar': _toolbar2.default,\n\n  'themes/bubble': _bubble2.default,\n  'themes/snow': _snow2.default,\n\n  'ui/icons': _icons2.default,\n  'ui/picker': _picker2.default,\n  'ui/icon-picker': _iconPicker2.default,\n  'ui/color-picker': _colorPicker2.default,\n  'ui/tooltip': _tooltip2.default\n}, true);\n\nexports.default = _core2.default;\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __nested_webpack_require_538155__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndentClass = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_538155__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar IdentAttributor = function (_Parchment$Attributor) {\n  _inherits(IdentAttributor, _Parchment$Attributor);\n\n  function IdentAttributor() {\n    _classCallCheck(this, IdentAttributor);\n\n    return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));\n  }\n\n  _createClass(IdentAttributor, [{\n    key: 'add',\n    value: function add(node, value) {\n      if (value === '+1' || value === '-1') {\n        var indent = this.value(node) || 0;\n        value = value === '+1' ? indent + 1 : indent - 1;\n      }\n      if (value === 0) {\n        this.remove(node);\n        return true;\n      } else {\n        return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);\n      }\n    }\n  }, {\n    key: 'canAdd',\n    value: function canAdd(node, value) {\n      return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));\n    }\n  }, {\n    key: 'value',\n    value: function value(node) {\n      return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN\n    }\n  }]);\n\n  return IdentAttributor;\n}(_parchment2.default.Attributor.Class);\n\nvar IndentClass = new IdentAttributor('indent', 'ql-indent', {\n  scope: _parchment2.default.Scope.BLOCK,\n  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]\n});\n\nexports.IndentClass = IndentClass;\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __nested_webpack_require_542195__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _block = __nested_webpack_require_542195__(4);\n\nvar _block2 = _interopRequireDefault(_block);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Blockquote = function (_Block) {\n  _inherits(Blockquote, _Block);\n\n  function Blockquote() {\n    _classCallCheck(this, Blockquote);\n\n    return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));\n  }\n\n  return Blockquote;\n}(_block2.default);\n\nBlockquote.blotName = 'blockquote';\nBlockquote.tagName = 'blockquote';\n\nexports.default = Blockquote;\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __nested_webpack_require_543844__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _block = __nested_webpack_require_543844__(4);\n\nvar _block2 = _interopRequireDefault(_block);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Header = function (_Block) {\n  _inherits(Header, _Block);\n\n  function Header() {\n    _classCallCheck(this, Header);\n\n    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));\n  }\n\n  _createClass(Header, null, [{\n    key: 'formats',\n    value: function formats(domNode) {\n      return this.tagName.indexOf(domNode.tagName) + 1;\n    }\n  }]);\n\n  return Header;\n}(_block2.default);\n\nHeader.blotName = 'header';\nHeader.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];\n\nexports.default = Header;\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __nested_webpack_require_546200__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ListItem = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_546200__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _block = __nested_webpack_require_546200__(4);\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _container = __nested_webpack_require_546200__(25);\n\nvar _container2 = _interopRequireDefault(_container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ListItem = function (_Block) {\n  _inherits(ListItem, _Block);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));\n  }\n\n  _createClass(ListItem, [{\n    key: 'format',\n    value: function format(name, value) {\n      if (name === List.blotName && !value) {\n        this.replaceWith(_parchment2.default.create(this.statics.scope));\n      } else {\n        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);\n      }\n    }\n  }, {\n    key: 'remove',\n    value: function remove() {\n      if (this.prev == null && this.next == null) {\n        this.parent.remove();\n      } else {\n        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);\n      }\n    }\n  }, {\n    key: 'replaceWith',\n    value: function replaceWith(name, value) {\n      this.parent.isolate(this.offset(this.parent), this.length());\n      if (name === this.parent.statics.blotName) {\n        this.parent.replaceWith(name, value);\n        return this;\n      } else {\n        this.parent.unwrap();\n        return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);\n      }\n    }\n  }], [{\n    key: 'formats',\n    value: function formats(domNode) {\n      return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);\n    }\n  }]);\n\n  return ListItem;\n}(_block2.default);\n\nListItem.blotName = 'list-item';\nListItem.tagName = 'LI';\n\nvar List = function (_Container) {\n  _inherits(List, _Container);\n\n  _createClass(List, null, [{\n    key: 'create',\n    value: function create(value) {\n      var tagName = value === 'ordered' ? 'OL' : 'UL';\n      var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);\n      if (value === 'checked' || value === 'unchecked') {\n        node.setAttribute('data-checked', value === 'checked');\n      }\n      return node;\n    }\n  }, {\n    key: 'formats',\n    value: function formats(domNode) {\n      if (domNode.tagName === 'OL') return 'ordered';\n      if (domNode.tagName === 'UL') {\n        if (domNode.hasAttribute('data-checked')) {\n          return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';\n        } else {\n          return 'bullet';\n        }\n      }\n      return undefined;\n    }\n  }]);\n\n  function List(domNode) {\n    _classCallCheck(this, List);\n\n    var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));\n\n    var listEventHandler = function listEventHandler(e) {\n      if (e.target.parentNode !== domNode) return;\n      var format = _this2.statics.formats(domNode);\n      var blot = _parchment2.default.find(e.target);\n      if (format === 'checked') {\n        blot.format('list', 'unchecked');\n      } else if (format === 'unchecked') {\n        blot.format('list', 'checked');\n      }\n    };\n\n    domNode.addEventListener('touchstart', listEventHandler);\n    domNode.addEventListener('mousedown', listEventHandler);\n    return _this2;\n  }\n\n  _createClass(List, [{\n    key: 'format',\n    value: function format(name, value) {\n      if (this.children.length > 0) {\n        this.children.tail.format(name, value);\n      }\n    }\n  }, {\n    key: 'formats',\n    value: function formats() {\n      // We don't inherit from FormatBlot\n      return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));\n    }\n  }, {\n    key: 'insertBefore',\n    value: function insertBefore(blot, ref) {\n      if (blot instanceof ListItem) {\n        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);\n      } else {\n        var index = ref == null ? this.length() : ref.offset(this);\n        var after = this.split(index);\n        after.parent.insertBefore(blot, after);\n      }\n    }\n  }, {\n    key: 'optimize',\n    value: function optimize(context) {\n      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);\n      var next = this.next;\n      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {\n        next.moveChildren(this);\n        next.remove();\n      }\n    }\n  }, {\n    key: 'replace',\n    value: function replace(target) {\n      if (target.statics.blotName !== this.statics.blotName) {\n        var item = _parchment2.default.create(this.statics.defaultChild);\n        target.moveChildren(item);\n        this.appendChild(item);\n      }\n      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);\n    }\n  }]);\n\n  return List;\n}(_container2.default);\n\nList.blotName = 'list';\nList.scope = _parchment2.default.Scope.BLOCK_BLOT;\nList.tagName = ['OL', 'UL'];\nList.defaultChild = 'list-item';\nList.allowedChildren = [ListItem];\n\nexports.ListItem = ListItem;\nexports.default = List;\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __nested_webpack_require_554252__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _bold = __nested_webpack_require_554252__(56);\n\nvar _bold2 = _interopRequireDefault(_bold);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Italic = function (_Bold) {\n  _inherits(Italic, _Bold);\n\n  function Italic() {\n    _classCallCheck(this, Italic);\n\n    return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));\n  }\n\n  return Italic;\n}(_bold2.default);\n\nItalic.blotName = 'italic';\nItalic.tagName = ['EM', 'I'];\n\nexports.default = Italic;\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __nested_webpack_require_555851__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _inline = __nested_webpack_require_555851__(6);\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Script = function (_Inline) {\n  _inherits(Script, _Inline);\n\n  function Script() {\n    _classCallCheck(this, Script);\n\n    return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));\n  }\n\n  _createClass(Script, null, [{\n    key: 'create',\n    value: function create(value) {\n      if (value === 'super') {\n        return document.createElement('sup');\n      } else if (value === 'sub') {\n        return document.createElement('sub');\n      } else {\n        return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);\n      }\n    }\n  }, {\n    key: 'formats',\n    value: function formats(domNode) {\n      if (domNode.tagName === 'SUB') return 'sub';\n      if (domNode.tagName === 'SUP') return 'super';\n      return undefined;\n    }\n  }]);\n\n  return Script;\n}(_inline2.default);\n\nScript.blotName = 'script';\nScript.tagName = ['SUB', 'SUP'];\n\nexports.default = Script;\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __nested_webpack_require_559112__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _inline = __nested_webpack_require_559112__(6);\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Strike = function (_Inline) {\n  _inherits(Strike, _Inline);\n\n  function Strike() {\n    _classCallCheck(this, Strike);\n\n    return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));\n  }\n\n  return Strike;\n}(_inline2.default);\n\nStrike.blotName = 'strike';\nStrike.tagName = 'S';\n\nexports.default = Strike;\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __nested_webpack_require_560714__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _inline = __nested_webpack_require_560714__(6);\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Underline = function (_Inline) {\n  _inherits(Underline, _Inline);\n\n  function Underline() {\n    _classCallCheck(this, Underline);\n\n    return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));\n  }\n\n  return Underline;\n}(_inline2.default);\n\nUnderline.blotName = 'underline';\nUnderline.tagName = 'U';\n\nexports.default = Underline;\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __nested_webpack_require_562349__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_562349__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _link = __nested_webpack_require_562349__(27);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ATTRIBUTES = ['alt', 'height', 'width'];\n\nvar Image = function (_Parchment$Embed) {\n  _inherits(Image, _Parchment$Embed);\n\n  function Image() {\n    _classCallCheck(this, Image);\n\n    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));\n  }\n\n  _createClass(Image, [{\n    key: 'format',\n    value: function format(name, value) {\n      if (ATTRIBUTES.indexOf(name) > -1) {\n        if (value) {\n          this.domNode.setAttribute(name, value);\n        } else {\n          this.domNode.removeAttribute(name);\n        }\n      } else {\n        _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);\n      }\n    }\n  }], [{\n    key: 'create',\n    value: function create(value) {\n      var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);\n      if (typeof value === 'string') {\n        node.setAttribute('src', this.sanitize(value));\n      }\n      return node;\n    }\n  }, {\n    key: 'formats',\n    value: function formats(domNode) {\n      return ATTRIBUTES.reduce(function (formats, attribute) {\n        if (domNode.hasAttribute(attribute)) {\n          formats[attribute] = domNode.getAttribute(attribute);\n        }\n        return formats;\n      }, {});\n    }\n  }, {\n    key: 'match',\n    value: function match(url) {\n      return (/\\.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url)\n      );\n    }\n  }, {\n    key: 'sanitize',\n    value: function sanitize(url) {\n      return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';\n    }\n  }, {\n    key: 'value',\n    value: function value(domNode) {\n      return domNode.getAttribute('src');\n    }\n  }]);\n\n  return Image;\n}(_parchment2.default.Embed);\n\nImage.blotName = 'image';\nImage.tagName = 'IMG';\n\nexports.default = Image;\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __nested_webpack_require_566563__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _block = __nested_webpack_require_566563__(4);\n\nvar _link = __nested_webpack_require_566563__(27);\n\nvar _link2 = _interopRequireDefault(_link);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ATTRIBUTES = ['height', 'width'];\n\nvar Video = function (_BlockEmbed) {\n  _inherits(Video, _BlockEmbed);\n\n  function Video() {\n    _classCallCheck(this, Video);\n\n    return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));\n  }\n\n  _createClass(Video, [{\n    key: 'format',\n    value: function format(name, value) {\n      if (ATTRIBUTES.indexOf(name) > -1) {\n        if (value) {\n          this.domNode.setAttribute(name, value);\n        } else {\n          this.domNode.removeAttribute(name);\n        }\n      } else {\n        _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);\n      }\n    }\n  }], [{\n    key: 'create',\n    value: function create(value) {\n      var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);\n      node.setAttribute('frameborder', '0');\n      node.setAttribute('allowfullscreen', true);\n      node.setAttribute('src', this.sanitize(value));\n      return node;\n    }\n  }, {\n    key: 'formats',\n    value: function formats(domNode) {\n      return ATTRIBUTES.reduce(function (formats, attribute) {\n        if (domNode.hasAttribute(attribute)) {\n          formats[attribute] = domNode.getAttribute(attribute);\n        }\n        return formats;\n      }, {});\n    }\n  }, {\n    key: 'sanitize',\n    value: function sanitize(url) {\n      return _link2.default.sanitize(url);\n    }\n  }, {\n    key: 'value',\n    value: function value(domNode) {\n      return domNode.getAttribute('src');\n    }\n  }]);\n\n  return Video;\n}(_block.BlockEmbed);\n\nVideo.blotName = 'video';\nVideo.className = 'ql-video';\nVideo.tagName = 'IFRAME';\n\nexports.default = Video;\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __nested_webpack_require_570623__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.FormulaBlot = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _embed = __nested_webpack_require_570623__(35);\n\nvar _embed2 = _interopRequireDefault(_embed);\n\nvar _quill = __nested_webpack_require_570623__(5);\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _module = __nested_webpack_require_570623__(9);\n\nvar _module2 = _interopRequireDefault(_module);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar FormulaBlot = function (_Embed) {\n  _inherits(FormulaBlot, _Embed);\n\n  function FormulaBlot() {\n    _classCallCheck(this, FormulaBlot);\n\n    return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));\n  }\n\n  _createClass(FormulaBlot, null, [{\n    key: 'create',\n    value: function create(value) {\n      var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);\n      if (typeof value === 'string') {\n        window.katex.render(value, node, {\n          throwOnError: false,\n          errorColor: '#f00'\n        });\n        node.setAttribute('data-value', value);\n      }\n      return node;\n    }\n  }, {\n    key: 'value',\n    value: function value(domNode) {\n      return domNode.getAttribute('data-value');\n    }\n  }]);\n\n  return FormulaBlot;\n}(_embed2.default);\n\nFormulaBlot.blotName = 'formula';\nFormulaBlot.className = 'ql-formula';\nFormulaBlot.tagName = 'SPAN';\n\nvar Formula = function (_Module) {\n  _inherits(Formula, _Module);\n\n  _createClass(Formula, null, [{\n    key: 'register',\n    value: function register() {\n      _quill2.default.register(FormulaBlot, true);\n    }\n  }]);\n\n  function Formula() {\n    _classCallCheck(this, Formula);\n\n    var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));\n\n    if (window.katex == null) {\n      throw new Error('Formula module requires KaTeX.');\n    }\n    return _this2;\n  }\n\n  return Formula;\n}(_module2.default);\n\nexports.FormulaBlot = FormulaBlot;\nexports.default = Formula;\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __nested_webpack_require_574752__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CodeToken = exports.CodeBlock = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __nested_webpack_require_574752__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\nvar _quill = __nested_webpack_require_574752__(5);\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _module = __nested_webpack_require_574752__(9);\n\nvar _module2 = _interopRequireDefault(_module);\n\nvar _code = __nested_webpack_require_574752__(13);\n\nvar _code2 = _interopRequireDefault(_code);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar SyntaxCodeBlock = function (_CodeBlock) {\n  _inherits(SyntaxCodeBlock, _CodeBlock);\n\n  function SyntaxCodeBlock() {\n    _classCallCheck(this, SyntaxCodeBlock);\n\n    return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));\n  }\n\n  _createClass(SyntaxCodeBlock, [{\n    key: 'replaceWith',\n    value: function replaceWith(block) {\n      this.domNode.textContent = this.domNode.textContent;\n      this.attach();\n      _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);\n    }\n  }, {\n    key: 'highlight',\n    value: function highlight(_highlight) {\n      var text = this.domNode.textContent;\n      if (this.cachedText !== text) {\n        if (text.trim().length > 0 || this.cachedText == null) {\n          this.domNode.innerHTML = _highlight(text);\n          this.domNode.normalize();\n          this.attach();\n        }\n        this.cachedText = text;\n      }\n    }\n  }]);\n\n  return SyntaxCodeBlock;\n}(_code2.default);\n\nSyntaxCodeBlock.className = 'ql-syntax';\n\nvar CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {\n  scope: _parchment2.default.Scope.INLINE\n});\n\nvar Syntax = function (_Module) {\n  _inherits(Syntax, _Module);\n\n  _createClass(Syntax, null, [{\n    key: 'register',\n    value: function register() {\n      _quill2.default.register(CodeToken, true);\n      _quill2.default.register(SyntaxCodeBlock, true);\n    }\n  }]);\n\n  function Syntax(quill, options) {\n    _classCallCheck(this, Syntax);\n\n    var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));\n\n    if (typeof _this2.options.highlight !== 'function') {\n      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');\n    }\n    var timer = null;\n    _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        _this2.highlight();\n        timer = null;\n      }, _this2.options.interval);\n    });\n    _this2.highlight();\n    return _this2;\n  }\n\n  _createClass(Syntax, [{\n    key: 'highlight',\n    value: function highlight() {\n      var _this3 = this;\n\n      if (this.quill.selection.composing) return;\n      this.quill.update(_quill2.default.sources.USER);\n      var range = this.quill.getSelection();\n      this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {\n        code.highlight(_this3.options.highlight);\n      });\n      this.quill.update(_quill2.default.sources.SILENT);\n      if (range != null) {\n        this.quill.setSelection(range, _quill2.default.sources.SILENT);\n      }\n    }\n  }]);\n\n  return Syntax;\n}(_module2.default);\n\nSyntax.DEFAULTS = {\n  highlight: function () {\n    if (window.hljs == null) return null;\n    return function (text) {\n      var result = window.hljs.highlightAuto(text);\n      return result.value;\n    };\n  }(),\n  interval: 1000\n};\n\nexports.CodeBlock = SyntaxCodeBlock;\nexports.CodeToken = CodeToken;\nexports.default = Syntax;\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>\";\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>\";\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>\";\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>\";\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <g class=\\\"ql-fill ql-color-label\\\"> <polygon points=\\\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\\\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\\\"6.817 5 6 5 6 6 6.38 6 6.817 5\\\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\\\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\\\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\\\"4.63 10 4 10 4 11 4.192 11 4.63 10\\\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\\\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\\\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\\\"12 6.868 12 6 11.62 6 12 6.868\\\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\\\"12.933 9 13 9 13 8 12.495 8 12.933 9\\\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\\\"5.5 13 9 5 12.5 13\\\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>\";\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=\\\"ql-fill ql-stroke\\\" height=3 width=3 x=4 y=5></rect> <rect class=\\\"ql-fill ql-stroke\\\" height=3 width=3 x=11 y=5></rect> <path class=\\\"ql-even ql-fill ql-stroke\\\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\\\"ql-even ql-fill ql-stroke\\\" d=M14,8c0,4.031-3,5-3,5></path> </svg>\";\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>\";\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg class=\\\"\\\" viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>\";\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=\\\"ql-color-label ql-stroke ql-transparent\\\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\\\"5.5 11 9 3 12.5 11\\\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>\";\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=\\\"ql-stroke ql-fill\\\" points=\\\"3 11 5 9 3 7 3 11\\\"></polygon> <line class=\\\"ql-stroke ql-fill\\\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>\";\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=\\\"ql-stroke ql-fill\\\" points=\\\"15 12 13 10 15 8 15 12\\\"></polygon> <line class=\\\"ql-stroke ql-fill\\\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>\";\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>\";\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>\";\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>\";\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\\\"translate(24 18) rotate(-180)\\\"/> </svg>\";\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>\";\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewBox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>\";\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewBox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>\";\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>\";\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\\\"ql-even ql-fill\\\" points=\\\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\\\"></polyline> </svg>\";\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\\\"ql-fill ql-stroke\\\" points=\\\"3 7 3 11 5 9 3 7\\\"></polyline> </svg>\";\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\\\"5 7 5 11 3 9 5 7\\\"></polyline> </svg>\";\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\\\"ql-even ql-stroke\\\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\\\"ql-even ql-stroke\\\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>\";\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\\\"ql-stroke ql-thin\\\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\\\"ql-stroke ql-thin\\\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\\\"ql-stroke ql-thin\\\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>\";\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>\";\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg class=\\\"\\\" viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\\\"3 4 4 5 6 3\\\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\\\"3 14 4 15 6 13\\\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\\\"3 9 4 10 6 8\\\"></polyline> </svg>\";\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>\";\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>\";\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=\\\"ql-stroke ql-thin\\\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>\";\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>\";\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>\";\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=ql-stroke points=\\\"7 11 9 13 11 11 7 11\\\"></polygon> <polygon class=ql-stroke points=\\\"7 7 9 5 11 7 7 7\\\"></polygon> </svg>\";\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __nested_webpack_require_597518__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BubbleTooltip = undefined;\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _extend = __nested_webpack_require_597518__(3);\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _emitter = __nested_webpack_require_597518__(8);\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _base = __nested_webpack_require_597518__(43);\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _selection = __nested_webpack_require_597518__(15);\n\nvar _icons = __nested_webpack_require_597518__(41);\n\nvar _icons2 = _interopRequireDefault(_icons);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];\n\nvar BubbleTheme = function (_BaseTheme) {\n  _inherits(BubbleTheme, _BaseTheme);\n\n  function BubbleTheme(quill, options) {\n    _classCallCheck(this, BubbleTheme);\n\n    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n      options.modules.toolbar.container = TOOLBAR_CONFIG;\n    }\n\n    var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));\n\n    _this.quill.container.classList.add('ql-bubble');\n    return _this;\n  }\n\n  _createClass(BubbleTheme, [{\n    key: 'extendToolbar',\n    value: function extendToolbar(toolbar) {\n      this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);\n      this.tooltip.root.appendChild(toolbar.container);\n      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);\n      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);\n    }\n  }]);\n\n  return BubbleTheme;\n}(_base2.default);\n\nBubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n  modules: {\n    toolbar: {\n      handlers: {\n        link: function link(value) {\n          if (!value) {\n            this.quill.format('link', false);\n          } else {\n            this.quill.theme.tooltip.edit();\n          }\n        }\n      }\n    }\n  }\n});\n\nvar BubbleTooltip = function (_BaseTooltip) {\n  _inherits(BubbleTooltip, _BaseTooltip);\n\n  function BubbleTooltip(quill, bounds) {\n    _classCallCheck(this, BubbleTooltip);\n\n    var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));\n\n    _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {\n      if (type !== _emitter2.default.events.SELECTION_CHANGE) return;\n      if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {\n        _this2.show();\n        // Lock our width so we will expand beyond our offsetParent boundaries\n        _this2.root.style.left = '0px';\n        _this2.root.style.width = '';\n        _this2.root.style.width = _this2.root.offsetWidth + 'px';\n        var lines = _this2.quill.getLines(range.index, range.length);\n        if (lines.length === 1) {\n          _this2.position(_this2.quill.getBounds(range));\n        } else {\n          var lastLine = lines[lines.length - 1];\n          var index = _this2.quill.getIndex(lastLine);\n          var length = Math.min(lastLine.length() - 1, range.index + range.length - index);\n          var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));\n          _this2.position(_bounds);\n        }\n      } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {\n        _this2.hide();\n      }\n    });\n    return _this2;\n  }\n\n  _createClass(BubbleTooltip, [{\n    key: 'listen',\n    value: function listen() {\n      var _this3 = this;\n\n      _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);\n      this.root.querySelector('.ql-close').addEventListener('click', function () {\n        _this3.root.classList.remove('ql-editing');\n      });\n      this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {\n        // Let selection be restored by toolbar handlers before repositioning\n        setTimeout(function () {\n          if (_this3.root.classList.contains('ql-hidden')) return;\n          var range = _this3.quill.getSelection();\n          if (range != null) {\n            _this3.position(_this3.quill.getBounds(range));\n          }\n        }, 1);\n      });\n    }\n  }, {\n    key: 'cancel',\n    value: function cancel() {\n      this.show();\n    }\n  }, {\n    key: 'position',\n    value: function position(reference) {\n      var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);\n      var arrow = this.root.querySelector('.ql-tooltip-arrow');\n      arrow.style.marginLeft = '';\n      if (shift === 0) return shift;\n      arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';\n    }\n  }]);\n\n  return BubbleTooltip;\n}(_base.BaseTooltip);\n\nBubbleTooltip.TEMPLATE = ['<span class=\"ql-tooltip-arrow\"></span>', '<div class=\"ql-tooltip-editor\">', '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"https://quilljs.com\" data-video=\"Embed URL\">', '<a class=\"ql-close\"></a>', '</div>'].join('');\n\nexports.BubbleTooltip = BubbleTooltip;\nexports.default = BubbleTheme;\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __nested_webpack_require_604840__) {\n\nmodule.exports = __nested_webpack_require_604840__(63);\n\n\n/***/ })\n/******/ ])[\"default\"];\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_165235__(43).Buffer))\n\n/***/ })\n/******/ ]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/quill-image-resize-vue/image-resize-vue.min.js\n");

/***/ }),

/***/ "./resources/js/components/Icons/add-realisation-1.vue":
/*!*************************************************************!*\
  !*** ./resources/js/components/Icons/add-realisation-1.vue ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _add_realisation_1_vue_vue_type_template_id_689a3695___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-realisation-1.vue?vue&type=template&id=689a3695& */ \"./resources/js/components/Icons/add-realisation-1.vue?vue&type=template&id=689a3695&\");\n/* harmony import */ var _add_realisation_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-realisation-1.vue?vue&type=script&lang=js& */ \"./resources/js/components/Icons/add-realisation-1.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _add_realisation_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _add_realisation_1_vue_vue_type_template_id_689a3695___WEBPACK_IMPORTED_MODULE_0__.render,\n  _add_realisation_1_vue_vue_type_template_id_689a3695___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/components/Icons/add-realisation-1.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9hZGQtcmVhbGlzYXRpb24tMS52dWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRztBQUMzQjtBQUNMOzs7QUFHaEU7QUFDQSxDQUFnRztBQUNoRyxnQkFBZ0IsdUdBQVU7QUFDMUIsRUFBRSx1RkFBTTtBQUNSLEVBQUUseUZBQU07QUFDUixFQUFFLGtHQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksS0FBVSxFQUFFLFlBaUJmO0FBQ0Q7QUFDQSxpRUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0ljb25zL2FkZC1yZWFsaXNhdGlvbi0xLnZ1ZT9lMjUwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vYWRkLXJlYWxpc2F0aW9uLTEudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY4OWEzNjk1JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2FkZC1yZWFsaXNhdGlvbi0xLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vYWRkLXJlYWxpc2F0aW9uLTEudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxocFxcXFxEZXNrdG9wXFxcXG1lbW9pcmVcXFxcUmVhbGlzYXRpb25zX0V0dWRpYW50c19maWxlc1xcXFxSZWFsaXNhdGlvbnNfRXR1ZGlhbnRzXzVcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNjg5YTM2OTUnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNjg5YTM2OTUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNjg5YTM2OTUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL2FkZC1yZWFsaXNhdGlvbi0xLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02ODlhMzY5NSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc2ODlhMzY5NScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvSWNvbnMvYWRkLXJlYWxpc2F0aW9uLTEudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/components/Icons/add-realisation-1.vue\n");

/***/ }),

/***/ "./resources/js/components/Icons/description-1.vue":
/*!*********************************************************!*\
  !*** ./resources/js/components/Icons/description-1.vue ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _description_1_vue_vue_type_template_id_da96e660___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./description-1.vue?vue&type=template&id=da96e660& */ \"./resources/js/components/Icons/description-1.vue?vue&type=template&id=da96e660&\");\n/* harmony import */ var _description_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./description-1.vue?vue&type=script&lang=js& */ \"./resources/js/components/Icons/description-1.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _description_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _description_1_vue_vue_type_template_id_da96e660___WEBPACK_IMPORTED_MODULE_0__.render,\n  _description_1_vue_vue_type_template_id_da96e660___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/components/Icons/description-1.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9kZXNjcmlwdGlvbi0xLnZ1ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRGO0FBQzNCO0FBQ0w7OztBQUc1RDtBQUNBLENBQWdHO0FBQ2hHLGdCQUFnQix1R0FBVTtBQUMxQixFQUFFLG1GQUFNO0FBQ1IsRUFBRSxxRkFBTTtBQUNSLEVBQUUsOEZBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxLQUFVLEVBQUUsWUFpQmY7QUFDRDtBQUNBLGlFQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvSWNvbnMvZGVzY3JpcHRpb24tMS52dWU/NDNlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2Rlc2NyaXB0aW9uLTEudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRhOTZlNjYwJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2Rlc2NyaXB0aW9uLTEudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9kZXNjcmlwdGlvbi0xLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxcaHBcXFxcRGVza3RvcFxcXFxtZW1vaXJlXFxcXFJlYWxpc2F0aW9uc19FdHVkaWFudHNfZmlsZXNcXFxcUmVhbGlzYXRpb25zX0V0dWRpYW50c181XFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJ2RhOTZlNjYwJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJ2RhOTZlNjYwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJ2RhOTZlNjYwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9kZXNjcmlwdGlvbi0xLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1kYTk2ZTY2MCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdkYTk2ZTY2MCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvSWNvbnMvZGVzY3JpcHRpb24tMS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/Icons/description-1.vue\n");

/***/ }),

/***/ "./resources/js/components/Icons/infos-base-1.vue":
/*!********************************************************!*\
  !*** ./resources/js/components/Icons/infos-base-1.vue ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _infos_base_1_vue_vue_type_template_id_3c2daefd___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./infos-base-1.vue?vue&type=template&id=3c2daefd& */ \"./resources/js/components/Icons/infos-base-1.vue?vue&type=template&id=3c2daefd&\");\n/* harmony import */ var _infos_base_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./infos-base-1.vue?vue&type=script&lang=js& */ \"./resources/js/components/Icons/infos-base-1.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _infos_base_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _infos_base_1_vue_vue_type_template_id_3c2daefd___WEBPACK_IMPORTED_MODULE_0__.render,\n  _infos_base_1_vue_vue_type_template_id_3c2daefd___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/components/Icons/infos-base-1.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9pbmZvcy1iYXNlLTEudnVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkY7QUFDM0I7QUFDTDs7O0FBRzNEO0FBQ0EsQ0FBZ0c7QUFDaEcsZ0JBQWdCLHVHQUFVO0FBQzFCLEVBQUUsa0ZBQU07QUFDUixFQUFFLG9GQUFNO0FBQ1IsRUFBRSw2RkFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLEtBQVUsRUFBRSxZQWlCZjtBQUNEO0FBQ0EsaUVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9pbmZvcy1iYXNlLTEudnVlPzY2MjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmZvcy1iYXNlLTEudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNjMmRhZWZkJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZm9zLWJhc2UtMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZm9zLWJhc2UtMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXGhwXFxcXERlc2t0b3BcXFxcbWVtb2lyZVxcXFxSZWFsaXNhdGlvbnNfRXR1ZGlhbnRzX2ZpbGVzXFxcXFJlYWxpc2F0aW9uc19FdHVkaWFudHNfNVxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCczYzJkYWVmZCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCczYzJkYWVmZCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCczYzJkYWVmZCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vaW5mb3MtYmFzZS0xLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zYzJkYWVmZCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCczYzJkYWVmZCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvSWNvbnMvaW5mb3MtYmFzZS0xLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/components/Icons/infos-base-1.vue\n");

/***/ }),

/***/ "./resources/js/components/Icons/medias-1.vue":
/*!****************************************************!*\
  !*** ./resources/js/components/Icons/medias-1.vue ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _medias_1_vue_vue_type_template_id_54607d73_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./medias-1.vue?vue&type=template&id=54607d73&scoped=true& */ \"./resources/js/components/Icons/medias-1.vue?vue&type=template&id=54607d73&scoped=true&\");\n/* harmony import */ var _medias_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./medias-1.vue?vue&type=script&lang=js& */ \"./resources/js/components/Icons/medias-1.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _medias_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _medias_1_vue_vue_type_template_id_54607d73_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,\n  _medias_1_vue_vue_type_template_id_54607d73_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  \"54607d73\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/components/Icons/medias-1.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9tZWRpYXMtMS52dWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtRztBQUN2QztBQUNMOzs7QUFHdkQ7QUFDQSxDQUFnRztBQUNoRyxnQkFBZ0IsdUdBQVU7QUFDMUIsRUFBRSw4RUFBTTtBQUNSLEVBQUUsNEZBQU07QUFDUixFQUFFLHFHQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksS0FBVSxFQUFFLFlBaUJmO0FBQ0Q7QUFDQSxpRUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0ljb25zL21lZGlhcy0xLnZ1ZT9mZjYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vbWVkaWFzLTEudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU0NjA3ZDczJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL21lZGlhcy0xLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vbWVkaWFzLTEudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI1NDYwN2Q3M1wiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXGhwXFxcXERlc2t0b3BcXFxcbWVtb2lyZVxcXFxSZWFsaXNhdGlvbnNfRXR1ZGlhbnRzX2ZpbGVzXFxcXFJlYWxpc2F0aW9uc19FdHVkaWFudHNfNVxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc1NDYwN2Q3MycpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc1NDYwN2Q3MycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc1NDYwN2Q3MycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vbWVkaWFzLTEudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU0NjA3ZDczJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzU0NjA3ZDczJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJyZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9tZWRpYXMtMS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/Icons/medias-1.vue\n");

/***/ }),

/***/ "./resources/js/components/Realisations/RealisationsAd.vue":
/*!*****************************************************************!*\
  !*** ./resources/js/components/Realisations/RealisationsAd.vue ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _RealisationsAd_vue_vue_type_template_id_3531c3f7_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true& */ \"./resources/js/components/Realisations/RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true&\");\n/* harmony import */ var _RealisationsAd_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RealisationsAd.vue?vue&type=script&lang=js& */ \"./resources/js/components/Realisations/RealisationsAd.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _RealisationsAd_vue_vue_type_style_index_0_id_3531c3f7_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css& */ \"./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  _RealisationsAd_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _RealisationsAd_vue_vue_type_template_id_3531c3f7_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,\n  _RealisationsAd_vue_vue_type_template_id_3531c3f7_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  \"3531c3f7\",\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"resources/js/components/Realisations/RealisationsAd.vue\"\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9SZWFsaXNhdGlvbnMvUmVhbGlzYXRpb25zQWQudnVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlHO0FBQ3ZDO0FBQ0w7QUFDN0QsQ0FBa0c7OztBQUdsRztBQUNnRztBQUNoRyxnQkFBZ0IsdUdBQVU7QUFDMUIsRUFBRSxvRkFBTTtBQUNSLEVBQUUsa0dBQU07QUFDUixFQUFFLDJHQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksS0FBVSxFQUFFLFlBaUJmO0FBQ0Q7QUFDQSxpRUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL1JlYWxpc2F0aW9ucy9SZWFsaXNhdGlvbnNBZC52dWU/ODQ5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1JlYWxpc2F0aW9uc0FkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zNTMxYzNmNyZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9SZWFsaXNhdGlvbnNBZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1JlYWxpc2F0aW9uc0FkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9SZWFsaXNhdGlvbnNBZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zNTMxYzNmNyZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMzUzMWMzZjdcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxocFxcXFxEZXNrdG9wXFxcXG1lbW9pcmVcXFxcUmVhbGlzYXRpb25zX0V0dWRpYW50c19maWxlc1xcXFxSZWFsaXNhdGlvbnNfRXR1ZGlhbnRzXzVcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMzUzMWMzZjcnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMzUzMWMzZjcnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMzUzMWMzZjcnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1JlYWxpc2F0aW9uc0FkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zNTMxYzNmNyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCczNTMxYzNmNycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvUmVhbGlzYXRpb25zL1JlYWxpc2F0aW9uc0FkLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/components/Realisations/RealisationsAd.vue\n");

/***/ }),

/***/ "./resources/js/components/Icons/add-realisation-1.vue?vue&type=script&lang=js&":
/*!**************************************************************************************!*\
  !*** ./resources/js/components/Icons/add-realisation-1.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_add_realisation_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./add-realisation-1.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/add-realisation-1.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_add_realisation_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9hZGQtcmVhbGlzYXRpb24tMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFOLENBQUMsaUVBQWUsNE1BQUcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0ljb25zL2FkZC1yZWFsaXNhdGlvbi0xLnZ1ZT9lNGYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9hZGQtcmVhbGlzYXRpb24tMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9hZGQtcmVhbGlzYXRpb24tMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/Icons/add-realisation-1.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/components/Icons/description-1.vue?vue&type=script&lang=js&":
/*!**********************************************************************************!*\
  !*** ./resources/js/components/Icons/description-1.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_description_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./description-1.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/description-1.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_description_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9kZXNjcmlwdGlvbi0xLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaU4sQ0FBQyxpRUFBZSx3TUFBRyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvSWNvbnMvZGVzY3JpcHRpb24tMS52dWU/Y2U1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZGVzY3JpcHRpb24tMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9kZXNjcmlwdGlvbi0xLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/components/Icons/description-1.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/components/Icons/infos-base-1.vue?vue&type=script&lang=js&":
/*!*********************************************************************************!*\
  !*** ./resources/js/components/Icons/infos-base-1.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_infos_base_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./infos-base-1.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/infos-base-1.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_infos_base_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9pbmZvcy1iYXNlLTEudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnTixDQUFDLGlFQUFlLHVNQUFHLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9pbmZvcy1iYXNlLTEudnVlP2FlYzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZm9zLWJhc2UtMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmZvcy1iYXNlLTEudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/components/Icons/infos-base-1.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/components/Icons/medias-1.vue?vue&type=script&lang=js&":
/*!*****************************************************************************!*\
  !*** ./resources/js/components/Icons/medias-1.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_medias_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./medias-1.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/medias-1.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_medias_1_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9JY29ucy9tZWRpYXMtMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRNLENBQUMsaUVBQWUsbU1BQUcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0ljb25zL21lZGlhcy0xLnZ1ZT8xY2Y0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9tZWRpYXMtMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9tZWRpYXMtMS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/Icons/medias-1.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/components/Realisations/RealisationsAd.vue?vue&type=script&lang=js&":
/*!******************************************************************************************!*\
  !*** ./resources/js/components/Realisations/RealisationsAd.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RealisationsAd.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=script&lang=js&\");\n /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9SZWFsaXNhdGlvbnMvUmVhbGlzYXRpb25zQWQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrTixDQUFDLGlFQUFlLHlNQUFHLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9SZWFsaXNhdGlvbnMvUmVhbGlzYXRpb25zQWQudnVlP2E1YzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlYWxpc2F0aW9uc0FkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlYWxpc2F0aW9uc0FkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/components/Realisations/RealisationsAd.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./resources/js/components/Icons/add-realisation-1.vue?vue&type=template&id=689a3695&":
/*!********************************************************************************************!*\
  !*** ./resources/js/components/Icons/add-realisation-1.vue?vue&type=template&id=689a3695& ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_add_realisation_1_vue_vue_type_template_id_689a3695___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_add_realisation_1_vue_vue_type_template_id_689a3695___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_add_realisation_1_vue_vue_type_template_id_689a3695___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./add-realisation-1.vue?vue&type=template&id=689a3695& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/add-realisation-1.vue?vue&type=template&id=689a3695&");


/***/ }),

/***/ "./resources/js/components/Icons/description-1.vue?vue&type=template&id=da96e660&":
/*!****************************************************************************************!*\
  !*** ./resources/js/components/Icons/description-1.vue?vue&type=template&id=da96e660& ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_description_1_vue_vue_type_template_id_da96e660___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_description_1_vue_vue_type_template_id_da96e660___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_description_1_vue_vue_type_template_id_da96e660___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./description-1.vue?vue&type=template&id=da96e660& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/description-1.vue?vue&type=template&id=da96e660&");


/***/ }),

/***/ "./resources/js/components/Icons/infos-base-1.vue?vue&type=template&id=3c2daefd&":
/*!***************************************************************************************!*\
  !*** ./resources/js/components/Icons/infos-base-1.vue?vue&type=template&id=3c2daefd& ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_infos_base_1_vue_vue_type_template_id_3c2daefd___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_infos_base_1_vue_vue_type_template_id_3c2daefd___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_infos_base_1_vue_vue_type_template_id_3c2daefd___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./infos-base-1.vue?vue&type=template&id=3c2daefd& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/infos-base-1.vue?vue&type=template&id=3c2daefd&");


/***/ }),

/***/ "./resources/js/components/Icons/medias-1.vue?vue&type=template&id=54607d73&scoped=true&":
/*!***********************************************************************************************!*\
  !*** ./resources/js/components/Icons/medias-1.vue?vue&type=template&id=54607d73&scoped=true& ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_medias_1_vue_vue_type_template_id_54607d73_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_medias_1_vue_vue_type_template_id_54607d73_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_medias_1_vue_vue_type_template_id_54607d73_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./medias-1.vue?vue&type=template&id=54607d73&scoped=true& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Icons/medias-1.vue?vue&type=template&id=54607d73&scoped=true&");


/***/ }),

/***/ "./resources/js/components/Realisations/RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true&":
/*!************************************************************************************************************!*\
  !*** ./resources/js/components/Realisations/RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true& ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_template_id_3531c3f7_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "staticRenderFns": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_template_id_3531c3f7_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_template_id_3531c3f7_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true& */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=template&id=3531c3f7&scoped=true&");


/***/ }),

/***/ "./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css&":
/*!**************************************************************************************************************************!*\
  !*** ./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css& ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_laravel_mix_node_modules_style_loader_dist_cjs_js_node_modules_laravel_mix_node_modules_css_loader_dist_cjs_js_clonedRuleSet_9_use_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_9_use_2_node_modules_vue_loader_lib_index_js_vue_loader_options_RealisationsAd_vue_vue_type_style_index_0_id_3531c3f7_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/laravel-mix/node_modules/style-loader/dist/cjs.js!../../../../node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css& */ "./node_modules/laravel-mix/node_modules/style-loader/dist/cjs.js!./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Realisations/RealisationsAd.vue?vue&type=style&index=0&id=3531c3f7&scoped=true&lang=css&");


/***/ })

}]);